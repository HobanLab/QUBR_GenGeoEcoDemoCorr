par(mar = c(4.5, 4.5, 1, 1))
# Blank plot with horizontal, x, and vertical, y, axes from 0 to 1
plot(x = NA, type = "n", las = 1, xlab = "Prey, V", ylab = "Predator, P", xlim = c(0, 4.5), ylim = c(0, 5))
trash <- flowField(deriv = LVmod, xlim = c(0, 4.5), ylim = c(0, 5), parameters = pars, state.names = c("Prey", "Predator"), arrow.type = "proportional")
trash
nullclines(deriv = LVmod, xlim = c(0, 4.5), ylim = c(0, 5), parameters = pars, state.names = c("Prey", "Predator"))
trash
par(mar = c(4.5, 4.5, 1, 1))
# Blank plot with horizontal, x, and vertical, y, axes from 0 to 1
plot(x = NA, type = "n", las = 1, xlab = "Prey, V", ylab = "Predator, P", xlim = c(0, 4.5), ylim = c(0, 5))
trash <- flowField(deriv = LVmod, xlim = c(0, 4.5), ylim = c(0, 5), parameters = pars, state.names = c("Prey", "Predator"), arrow.type = "proportional")
trash
nullclines(deriv = LVmod, xlim = c(0, 4.5), ylim = c(0, 5), parameters = pars, state.names = c("Prey", "Predator"))
LVmod <- function(Time, State, Pars) {
with(as.list(c(State, Pars)), {
Ingestion    <- rIng  * Prey * Predator
GrowthPrey   <- rGrow * Prey
MortPredator <- rMort * Predator
dPrey        <- GrowthPrey - Ingestion
dPredator    <- Ingestion * assEff - MortPredator
return(list(c(dPrey, dPredator)))
})
}
pars  <- c(rIng   = 0.2,    # /day, rate of ingestion
rGrow  = 1.0,    # /day, growth rate of prey
rMort  = 0.2 ,   # /day, mortality rate of predator
assEff = 0.5,    # -, assimilation efficiency
K      = 10)     # mmol/m3, carrying capacity
yini  <- c(Prey = 1, Predator = 2)
times <- seq(0, 200, by = 1)
out   <- ode(yini, times, LVmod, pars)
par(mar = c(4.5, 4.5, 1, 1))
# Blank plot with horizontal, x, and vertical, y, axes from 0 to 1
plot(x = NA, type = "n", las = 1, xlab = "Prey, V", ylab = "Predator, P", xlim = c(0, 4.5), ylim = c(0, 5))
m = 0.2
b = 0.2
r = 1.0
a = 0.5
##isoclines for prey
# p = 0
x_vec3 <- c(0, 4.5)
y_vec3 <- c(0, 0)
lines(x = x_vec3, y = y_vec3, col = "#ef3b24", lwd = 2)
# V = m/b
x_vec2 <- c(m/b, m/b)
y_vec2 <- c(0, 5)
lines(x = x_vec2, y = y_vec2, col = "#ef3b24", lwd = 2)
##isoclines for predator
# v = 0
x_vec1 <- c(0, 0)
y_vec1 <- c(0, 5)
lines(x = x_vec1, y = y_vec1, col = "#007ac1", lwd = 2)
# p = r/a
x_vec3 <- c(0, 4.5)
y_vec3 <- c(r/a, r/a)
lines(x = x_vec3, y = y_vec3, col = "#007ac1", lwd = 2)
# intial densities
points(x = 0, y = 1, col = "#ef3b24")
text(x = 0, y = 1, label = "Initial Prey Density",pos = 4)
points(x = 0, y = 2, col = "#007ac1")
text(x = 0, y = 2, label = "Initial Predator Density", pos = 4)
#E, plotting trajectory
lines(x = out[ , 2], y= out[ , 3])
par(mar = c(4.5, 4.5, 1, 1))
# Blank plot with horizontal, x, and vertical, y, axes from 0 to 1
plot(x = NA, type = "n", las = 1, xlab = "Prey, V", ylab = "Predator, P", xlim = c(0, 20), ylim = c(0, 20))
m = 0.2
b = 0.2
r = 1.0
a = 0.5
##isoclines for prey
# p = 0
x_vec3 <- c(0, 4.5)
y_vec3 <- c(0, 0)
lines(x = x_vec3, y = y_vec3, col = "#ef3b24", lwd = 2)
# V = m/b
x_vec2 <- c(m/b, m/b)
y_vec2 <- c(0, 5)
lines(x = x_vec2, y = y_vec2, col = "#ef3b24", lwd = 2)
##isoclines for predator
# v = 0
x_vec1 <- c(0, 0)
y_vec1 <- c(0, 5)
lines(x = x_vec1, y = y_vec1, col = "#007ac1", lwd = 2)
# p = r/a
x_vec3 <- c(0, 4.5)
y_vec3 <- c(r/a, r/a)
lines(x = x_vec3, y = y_vec3, col = "#007ac1", lwd = 2)
# intial densities
points(x = 0, y = 1, col = "#ef3b24")
text(x = 0, y = 1, label = "Initial Prey Density",pos = 4)
points(x = 0, y = 2, col = "#007ac1")
text(x = 0, y = 2, label = "Initial Predator Density", pos = 4)
#E, plotting trajectory
lines(x = out[ , 2], y= out[ , 3])
par(mar = c(4.5, 4.5, 1, 1))
# Blank plot with horizontal, x, and vertical, y, axes from 0 to 1
plot(x = NA, type = "n", las = 1, xlab = "Prey, V", ylab = "Predator, P", xlim = c(0, 20), ylim = c(0, 20))
m = 0.2
b = 0.2
r = 1.0
a = 0.5
##isoclines for prey
# p = 0
x_vec3 <- c(0, 20)
y_vec3 <- c(0, 0)
lines(x = x_vec3, y = y_vec3, col = "#ef3b24", lwd = 2)
# V = m/b
x_vec2 <- c(m/b, m/b)
y_vec2 <- c(0, 20)
lines(x = x_vec2, y = y_vec2, col = "#ef3b24", lwd = 2)
##isoclines for predator
# v = 0
x_vec1 <- c(0, 0)
y_vec1 <- c(0, 20)
lines(x = x_vec1, y = y_vec1, col = "#007ac1", lwd = 2)
# p = r/a
x_vec3 <- c(0, 20)
y_vec3 <- c(r/a, r/a)
lines(x = x_vec3, y = y_vec3, col = "#007ac1", lwd = 2)
# intial densities
points(x = 0, y = 1, col = "#ef3b24")
text(x = 0, y = 1, label = "Initial Prey Density",pos = 4)
points(x = 0, y = 2, col = "#007ac1")
text(x = 0, y = 2, label = "Initial Predator Density", pos = 4)
#E, plotting trajectory
lines(x = out[ , 2], y= out[ , 3])
par(mar = c(4.5, 4.5, 1, 1))
# Blank plot with horizontal, x, and vertical, y, axes from 0 to 1
plot(x = NA, type = "n", las = 1, xlab = "Prey, V", ylab = "Predator, P", xlim = c(0, 4.5), ylim = c(0, 5))
trash <- flowField(deriv = LVmod, xlim = c(0, 4.5), ylim = c(0, 5), parameters = pars, state.names = c("Prey", "Predator"), arrow.type = "proportional")
trash
nullclines(deriv = LVmod, xlim = c(0, 4.5), ylim = c(0, 5), parameters = pars, state.names = c("Prey", "Predator"))
par(mar = c(4.5, 4.5, 1, 1))
# Blank plot with horizontal, x, and vertical, y, axes from 0 to 1
plot(x = NA, type = "n", las = 1, xlab = "Prey, V", ylab = "Predator, P", xlim = c(0, 4.5), ylim = c(0, 5))
trash <- flowField(deriv = LVmod, xlim = c(0, 20), ylim = c(0, 20), parameters = pars, state.names = c("Prey", "Predator"), arrow.type = "proportional")
trash
nullclines(deriv = LVmod, xlim = c(0, 20), ylim = c(0, 20), parameters = pars, state.names = c("Prey", "Predator"))
par(mar = c(4.5, 4.5, 1, 1))
# Blank plot with horizontal, x, and vertical, y, axes from 0 to 1
plot(x = NA, type = "n", las = 1, xlab = "Prey, V", ylab = "Predator, P", xlim = c(0, 20), ylim = c(0, 20))
trash <- flowField(deriv = LVmod, xlim = c(0, 20), ylim = c(0, 20), parameters = pars, state.names = c("Prey", "Predator"), arrow.type = "proportional")
trash
nullclines(deriv = LVmod, xlim = c(0, 20), ylim = c(0, 20), parameters = pars, state.names = c("Prey", "Predator"))
LVmod <- function(Time, State, Pars) {
with(as.list(c(State, Pars)), {
Ingestion    <- rIng  * Prey * Predator
GrowthPrey   <- rGrow * Prey
MortPredator <- rMort * Predator
dPrey        <- GrowthPrey - Ingestion
dPredator    <- Ingestion * assEff - MortPredator
return(list(c(dPrey, dPredator)))
})
}
pars  <- c(rIng   = 0.2,    # /day, rate of ingestion
rGrow  = 1.0,    # /day, growth rate of prey
rMort  = 0.2 ,   # /day, mortality rate of predator
assEff = 0.5,    # -, assimilation efficiency
K      = 10)     # mmol/m3, carrying capacity
yini  <- c(Prey = 1, Predator = 2)
times <- seq(0, 200, by = 0.1)
out   <- ode(yini, times, LVmod, pars)
par(mar = c(4.5, 4.5, 1, 1))
# Blank plot with horizontal, x, and vertical, y, axes from 0 to 1
plot(x = NA, type = "n", las = 1, xlab = "Prey, V", ylab = "Predator, P", xlim = c(0, 20), ylim = c(0, 20))
m = 0.2
b = 0.2
r = 1.0
a = 0.5
##isoclines for prey
# p = 0
x_vec3 <- c(0, 20)
y_vec3 <- c(0, 0)
lines(x = x_vec3, y = y_vec3, col = "#ef3b24", lwd = 2)
# V = m/b
x_vec2 <- c(m/b, m/b)
y_vec2 <- c(0, 20)
lines(x = x_vec2, y = y_vec2, col = "#ef3b24", lwd = 2)
##isoclines for predator
# v = 0
x_vec1 <- c(0, 0)
y_vec1 <- c(0, 20)
lines(x = x_vec1, y = y_vec1, col = "#007ac1", lwd = 2)
# p = r/a
x_vec3 <- c(0, 20)
y_vec3 <- c(r/a, r/a)
lines(x = x_vec3, y = y_vec3, col = "#007ac1", lwd = 2)
# intial densities
points(x = 0, y = 1, col = "#ef3b24")
text(x = 0, y = 1, label = "Initial Prey Density",pos = 4)
points(x = 0, y = 2, col = "#007ac1")
text(x = 0, y = 2, label = "Initial Predator Density", pos = 4)
#E, plotting trajectory
lines(x = out[ , 2], y= out[ , 3])
par(mar = c(4.5, 4.5, 1, 1))
# Blank plot with horizontal, x, and vertical, y, axes from 0 to 1
plot(x = NA, type = "n", las = 1, xlab = "Prey, V", ylab = "Predator, P", xlim = c(0, 20), ylim = c(0, 20))
trash <- flowField(deriv = LVmod, xlim = c(0, 20), ylim = c(0, 20), parameters = pars, state.names = c("Prey", "Predator"), arrow.type = "proportional")
trash
nullclines(deriv = LVmod, xlim = c(-.1, 20), ylim = c(-.1, 20), parameters = pars, state.names = c("Prey", "Predator"))
par(mar = c(4.5, 4.5, 1, 1))
# Blank plot with horizontal, x, and vertical, y, axes from 0 to 1
plot(x = NA, type = "n", las = 1, xlab = "Prey, V", ylab = "Predator, P", xlim = c(0, 20), ylim = c(0, 20))
trash <- flowField(deriv = LVmod, xlim = c(0, 20), ylim = c(0, 20), parameters = pars, state.names = c("Prey", "Predator"), arrow.type = "proportional")
trash
nullclines(deriv = LVmod, xlim = c(-.1, 20), ylim = c(-.1, 20), parameters = pars, state.names = c("Prey", "Predator"))
par(mar = c(4.5, 4.5, 1, 1))
# Blank plot with horizontal, x, and vertical, y, axes from 0 to 1
plot(x = NA, type = "n", las = 1, xlab = "Prey, V", ylab = "Predator, P", xlim = c(0, 20), ylim = c(0, 20))
trash <- flowField(deriv = LVmod, xlim = c(0, 20), ylim = c(0, 20), parameters = pars, state.names = c("Prey", "Predator"), arrow.type = "proportional")
trash <- nullclines(deriv = LVmod, xlim = c(-.1, 20), ylim = c(-.1, 20), parameters = pars, state.names = c("Prey", "Predator"))
par(mar = c(4.5, 4.5, 1, 1))
# Blank plot with horizontal, x, and vertical, y, axes from 0 to 1
plot(x = NA, type = "n", las = 1, xlab = "Prey, V", ylab = "Predator, P", xlim = c(0, 20), ylim = c(0, 20))
trash <- flowField(deriv = LVmod, xlim = c(0, 20), ylim = c(0, 20), parameters = pars, state.names = c("Prey", "Predator"), arrow.type = "proportional")
trash.1 <- nullclines(deriv = LVmod, xlim = c(-.1, 20), ylim = c(-.1, 20), parameters = pars, state.names = c("Prey", "Predator"))
legend(legend = c("Prey Isoclines", "Predator Isoclines"), col = c("#007ac1", "#ef3b24"))
par(mar = c(4.5, 4.5, 1, 1))
# Blank plot with horizontal, x, and vertical, y, axes from 0 to 1
plot(x = NA, type = "n", las = 1, xlab = "Prey, V", ylab = "Predator, P", xlim = c(0, 1), ylim = c(0, 1))
m = 0.1
b = 0.2
r = 0.1
a = 0.2
##isoclines for predator
# p = 0
x_vec3 <- c(0, 1)
y_vec3 <- c(0, 0)
lines(x = x_vec3, y = y_vec3, col = "#ef3b24", lwd = 2)
# V = m/b
x_vec2 <- c(m/b, m/b)
y_vec2 <- c(0, 1)
lines(x = x_vec2, y = y_vec2, col = "#ef3b24", lwd = 2)
##isoclines for prey
# v = 0
x_vec1 <- c(0, 0)
y_vec1 <- c(0, 1)
lines(x = x_vec1, y = y_vec1, col = "#007ac1", lwd = 2)
# p = r/a
x_vec3 <- c(0, 1)
y_vec3 <- c(r/a, r/a)
lines(x = x_vec3, y = y_vec3, col = "#007ac1", lwd = 2)
legend(legend = c("Prey Isoclines", "Predator Isoclines"), col = c("#007ac1", "#ef3b24"), lwd = c(2,2))
par(mar = c(4.5, 4.5, 1, 1))
# Blank plot with horizontal, x, and vertical, y, axes from 0 to 1
plot(x = NA, type = "n", las = 1, xlab = "Prey, V", ylab = "Predator, P", xlim = c(0, 1), ylim = c(0, 1))
m = 0.1
b = 0.2
r = 0.1
a = 0.2
##isoclines for predator
# p = 0
x_vec3 <- c(0, 1)
y_vec3 <- c(0, 0)
lines(x = x_vec3, y = y_vec3, col = "#ef3b24", lwd = 2)
# V = m/b
x_vec2 <- c(m/b, m/b)
y_vec2 <- c(0, 1)
lines(x = x_vec2, y = y_vec2, col = "#ef3b24", lwd = 2)
##isoclines for prey
# v = 0
x_vec1 <- c(0, 0)
y_vec1 <- c(0, 1)
lines(x = x_vec1, y = y_vec1, col = "#007ac1", lwd = 2)
# p = r/a
x_vec3 <- c(0, 1)
y_vec3 <- c(r/a, r/a)
lines(x = x_vec3, y = y_vec3, col = "#007ac1", lwd = 2)
legend("topleft", legend = c("Prey Isoclines", "Predator Isoclines"), col = c("#007ac1", "#ef3b24"), lwd = 2)
par(mar = c(4.5, 4.5, 1, 1))
# Blank plot with horizontal, x, and vertical, y, axes from 0 to 1
plot(x = NA, type = "n", las = 1, xlab = "Prey, V", ylab = "Predator, P", xlim = c(0, 1), ylim = c(0, 1))
m = 0.1
b = 0.2
r = 0.1
a = 0.2
##isoclines for predator
# p = 0
x_vec3 <- c(0, 1)
y_vec3 <- c(0, 0)
lines(x = x_vec3, y = y_vec3, col = "#ef3b24", lwd = 2)
# V = m/b
x_vec2 <- c(m/b, m/b)
y_vec2 <- c(0, 1)
lines(x = x_vec2, y = y_vec2, col = "#ef3b24", lwd = 2)
##isoclines for prey
# v = 0
x_vec1 <- c(0, 0)
y_vec1 <- c(0, 1)
lines(x = x_vec1, y = y_vec1, col = "#007ac1", lwd = 2)
# p = r/a
x_vec3 <- c(0, 1)
y_vec3 <- c(r/a, r/a)
lines(x = x_vec3, y = y_vec3, col = "#007ac1", lwd = 2)
legend("topright", legend = c("Prey Isoclines", "Predator Isoclines"), col = c("#007ac1", "#ef3b24"), lwd = 2)
library(tidyverse)
library(moments) # for calculating the moments of each variable
library(sf) # for plotting spatial objects
library(smatr)
library(ggpmisc)
library(PMCMRplus) # for Dunn test
library(geomtextpath) # for PCA graphing
library(spatstat) # to run the nndist function
library(raster)
library(rstatix) #to run the Games-Howell Test
gc()
library(tidyverse)
library(moments) # for calculating the moments of each variable
library(sf) # for plotting spatial objects
library(smatr)
library(ggpmisc)
library(PMCMRplus) # for Dunn test
library(geomtextpath) # for PCA graphing
library(spatstat) # to run the nndist function
library(raster)
library(rstatix) #to run the Games-Howell Test
fixed_field_data_processed <- read.csv("./analyses/fixed_field_data_processed.csv") #imports the csv created from analyzing_morpho_data_cleaned.R
#transforming the data into shapefiles with either WGS84
fixed_field_data_processed_sf <- st_as_sf(fixed_field_data_processed,
coords = c("long", "lat"), crs = 4326)
#transforming the shapefile of trees from WGS84 into equal area projection UTM 12N
fixed_field_data_processed_sf_transformed <- st_transform(fixed_field_data_processed_sf, crs = 26912) # this in UTM 12 N an equal area projection
fixed_field_data_processed <- read.csv("./analyses/fixed_field_data_processed.csv") #imports the csv created from analyzing_morpho_data_cleaned.R
setwd("~/Documents/chewbecca/Morton Arboretum REU 2024/Untitled/QUBR_GenGeoEcoDemoCorr")
library(tidyverse)
library(moments) # for calculating the moments of each variable
library(sf) # for plotting spatial objects
library(smatr)
library(ggpmisc)
library(PMCMRplus) # for Dunn test
library(geomtextpath) # for PCA graphing
library(spatstat) # to run the nndist function
library(raster)
library(rstatix) #to run the Games-Howell Test
fixed_field_data_processed <- read.csv("./analyses/fixed_field_data_processed.csv") #imports the csv created from analyzing_morpho_data_cleaned.R
#transforming the data into shapefiles with either WGS84
fixed_field_data_processed_sf <- st_as_sf(fixed_field_data_processed,
coords = c("long", "lat"), crs = 4326)
#transforming the shapefile of trees from WGS84 into equal area projection UTM 12N
fixed_field_data_processed_sf_transformed <- st_transform(fixed_field_data_processed_sf, crs = 26912) # this in UTM 12 N an equal area projection
#create dataframe with X and Y UTM coordinates
fixed_field_data_processed_sf_trans_coords <- st_coordinates(fixed_field_data_processed_sf_transformed) #creates a dataframe with seperate x and y columns from the UTM 12N transformation
fixed_field_data_processed_sf_trans_coordinates <- fixed_field_data_processed_sf_transformed %>%
cbind(fixed_field_data_processed_sf_trans_coords) #combines the x and y coordinate data frame with the transformed sf dataframe
#add average nearest neighbor for each individual column
fixed_field_data_processed_NN_UTM <- fixed_field_data_processed_sf_trans_coordinates %>%  #creates a dataframe with the ANN of the closest 5 individual trees for each individual
mutate(dist1 = nndist(X = X.1, Y= Y, k = 1))%>% #creates column for the distances of each tree to their 1st nearest neighbor
mutate(dist2 = nndist(X = X.1, Y= Y, k = 2)) %>% #creates column for the distances of each tree to their 2nd nearest neighbor
mutate(dist3 = nndist(X = X.1, Y= Y, k = 3)) %>% #creates column for the distances of each tree to their 3rd nearest neighbor
mutate(dist4 = nndist(X = X.1, Y= Y, k = 4)) %>% #creates column for the distances of each tree to their 4th nearest neighbor
mutate(dist5 = nndist(X = X.1, Y= Y, k = 5)) %>% #creates column for the distances of each tree to their 5th nearest neighbor
rowwise()%>% #so that in the next part we take the averages across rows
mutate(ANN = mean(c(dist1, dist2, dist3, dist4, dist5)))  %>% #creates a column of the average distances (1-5) of each individual
dplyr::select(!c(dist1, dist2, dist3, dist4, dist5)) #removes the excess columns with the 5 nearest neighbor distances
LM_fixed_field_data_processed_sf <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "LM") %>%
st_as_sfc()
LC_fixed_field_data_processed_sf <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "LC") %>%
st_as_sfc()
SD_fixed_field_data_processed_sf <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "SD") %>%
st_as_sfc()
LM_fixed_field_data_processed <- fixed_field_data_processed_sf_trans_coordinates %>%
filter(Locality == "LM")
LC_fixed_field_data_processed <- fixed_field_data_processed_sf_trans_coordinates %>%
filter(Locality == "LC")
SD_fixed_field_data_processed <- fixed_field_data_processed_sf_trans_coordinates %>%
filter(Locality == "SD")
#upload ArcGIS river shapefile and filter out polygons for each population
river_LM <- st_read("./data/Shapefiles/FINAL River Shapefiles ArcGIS/LM River/LM_Rivers_Final.shp")
river_LM  <- river_LM$geometry[1]
plot(river_LM)
river_LC  <- st_read("./data/Shapefiles/FINAL River Shapefiles ArcGIS/LC River/LC_Rivers_Final.shp")
river_LC  <- river_LC$geometry[1]
plot(river_LC)
river_SD <- st_read("./data/Shapefiles/FINAL River Shapefiles ArcGIS/SD River/SD_Rivers_Final.shp")
river_SD <- river_SD$geometry[1]
plot(river_SD)
#changing the coordinate reference system of the river polygons to be equal area projection (UTM 12N), uses meters as distance measurement
river_LM_trans <- st_as_sf(st_transform(river_LM, crs = 26912))
river_LC_trans <- st_as_sf(st_transform(river_LC, crs = 26912))
river_SD_trans <- st_as_sf(st_transform(river_SD, crs = 26912))
#creating a boundry box of LM with the UTM 12 N min and max lat lon values and then turning it into a simple feature geometry
LM_fixed_field_data_processed_box <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "LM") %>%
st_bbox %>%
st_as_sfc()
#creating a boundry box of LC with the UTM 12 N min and max lat lon values and then turning it into a simple feature geometry
LC_fixed_field_data_processed_box <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "LC") %>%
st_bbox %>%
st_as_sfc()
#creating a boundry box of SD with the UTM 12 N min and max lat lon values and then turning it into a simple feature geometry
SD_fixed_field_data_processed_box <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "SD") %>%
st_bbox %>%
st_as_sfc()
#creating bboxs for all of the river shapefiles for each population
LM_box <- st_bbox(river_LM_trans)
LC_box <- st_bbox(river_LC_trans)
SD_box <- st_bbox(river_SD_trans)
#loading in soil textures from CONABIO, theses are too larger, about 1 km^2 I believe
clay_05 <- raster(paste0("./data/Soil Grid/clay content/clay content 0-5.tif"))
clay_200 <- raster(paste0("./data/Soil Grid/clay content/clay content 100-200.tif"))
silt_05 <- raster(paste0("./data/Soil Grid/silt/silt 0-5.tif"))
silt_200 <-raster(paste0("./data/Soil Grid/silt/silt 100-200.tif"))
sand_05 <- raster(paste0("./data/Soil Grid/sand/sand 0-5.tif"))
sand_200 <- raster(paste0("./data/Soil Grid/sand/sand 100-200.tif"))
ph_05 <- raster(paste0("./data/Soil Grid/pH/ph_0-5.tif")) #0-5 cm ph
ph_200 <- raster(paste0("./data/Soil Grid/pH/ph_100-200.tif")) #100-200 ph
ocd_05 <- raster(paste0("./data/Soil Grid/organic carbon density/OCD_0-5.tif")) #0-5cm organic carbon density
ocd_200 <- raster(paste0("./data/Soil Grid/organic carbon density/OCR_100-200.tif")) #100-200cm organic carbon density
coarse_frag_05 <- raster(paste0("./data/Soil Grid/coarse fragments/coarse_fragments_0-5.tif")) #0-5 cm coarse fragments
coarse_frag_200 <- raster(paste0("./data/Soil Grid/coarse fragments/coarse_fragments_100-200.tif")) #100-200 cm coarse fragments
cat_ex_cap_05 <-raster(paste0("./data/Soil Grid/cation exchange capacity/Cat_exc_0-5.tif")) #0-5 cm cation exchange capacity
cat_ex_cap_200 <- raster(paste0("./data/Soil Grid/cation exchange capacity/Cat_exc_100-200.tif")) #100-200 cm cation exchange capacity
bulk_dens_05 <- raster(paste0("./data/Soil Grid/bulk density/bulk_density_0-5.tif")) #0-5 cm bulk density
bulk_dens_200 <- raster(paste0("./data/Soil Grid/bulk density/bulk_density_100-200.tif")) #100-200 cm bulk density
vol_wat_10kpa_05 <- raster(paste0("./data/Soil Grid/vol. water content at -10 kPa/vol_water_-10_0-5.tif"))  #0-5 cm -10 kpa volumn water content
vol_wat_10kpa_200 <- raster(paste0("./data/Soil Grid/vol. water content at -10 kPa/vol_water_-10_100-200.tif"))  #100-200 cm -10 kpa volumn water content
vol_wat_33kpa_05 <- raster(paste0("./data/Soil Grid/vol. water content at -33 kPa /vol_water_0-5.tif")) #0-5 cm -33 kpa volumn water content
vol_wat_33kpa_200 <- raster(paste0("./data/Soil Grid/vol. water content at -33 kPa /vol_water_100-200.tif")) #100-200 cm -33 kpa volumn water content
vol_wat_1500kpa_05 <- raster(paste0("./data/Soil Grid/vol. water content at -1500 kPa/vol_water_-1500kPa_0-5.tif"))  #0-5 cm -1500 kpa volumn water content
vol_wat_1500kpa_200 <- raster(paste0("./data/Soil Grid/vol. water content at -1500 kPa/vol_water_-1500_100-200.tif")) #100-200 cm -1500 kpa volumn water content
nitrogen_05 <- raster(paste0("./data/Soil Grid/Nitrogen/nitrogen 0-5.tif"))
nitrogen_200 <- raster(paste0("./data/Soil Grid/Nitrogen/nitrogen 100-200.tif"))
Soil_Organic_Carbon_05 <- raster(paste0("./data/Soil Grid/Soil Organic Carbon/SOC 0-5.tif"))
Soil_Organic_Carbon_200 <- raster(paste0("./data/Soil Grid/Soil Organic Carbon/SOC 100-200.tif"))
#project rasters to equal area projection (UTM 12N), uses meters as distance measurement
clay_05_utm <- projectRaster(clay_05, crs=26912) #converting the 0-5 cm clay raster to utm 12
clay_200_utm <- projectRaster(clay_200, crs=26912) #converting the 90-200 cm clay raster to utm 12
silt_05_utm <- projectRaster(silt_05, crs=26912)
silt_200_utm <- projectRaster(silt_200, crs=26912)
sand_05_utm <- projectRaster(sand_05, crs=26912)
sand_200_utm <- projectRaster(sand_200, crs=26912)
ph_05_utm <- projectRaster(ph_05, crs=26912)
ph_200_utm <- projectRaster(ph_200, crs=26912)
ocd_05_utm <- projectRaster(ocd_05, crs=26912)
ocd_200_utm <- projectRaster(ocd_200, crs=26912)
coarse_frag_05_utm <- projectRaster(coarse_frag_05, crs=26912)
coarse_frag_200_utm <- projectRaster(coarse_frag_200, crs=26912)
cat_ex_cap_05_utm <- projectRaster(cat_ex_cap_05, crs=26912)
cat_ex_cap_200_utm <- projectRaster(cat_ex_cap_200, crs=26912)
bulk_dens_05_utm <- projectRaster(bulk_dens_05, crs=26912)
bulk_dens_200_utm <- projectRaster(bulk_dens_200, crs=26912)
vol_wat_10kpa_05_utm <- projectRaster(vol_wat_10kpa_05, crs=26912)
vol_wat_10kpa_200_utm <- projectRaster(vol_wat_10kpa_200, crs=26912)
vol_wat_33kpa_05_utm <- projectRaster(vol_wat_33kpa_05, crs=26912)
vol_wat_33kpa_200_utm <- projectRaster(vol_wat_33kpa_200, crs=26912)
vol_wat_1500kpa_05_utm <- projectRaster(vol_wat_1500kpa_05, crs=26912)
vol_wat_1500kpa_200_utm <- projectRaster(vol_wat_1500kpa_200, crs=26912)
nitrogen_05_utm <- projectRaster(nitrogen_05, crs=26912)
nitrogen_200_utm <- projectRaster(nitrogen_200, crs=26912)
Soil_Organic_Carbon_05_utm <- projectRaster(Soil_Organic_Carbon_05, crs=26912)
Soil_Organic_Carbon_200_utm <- projectRaster(Soil_Organic_Carbon_200, crs=26912)
#using the extent of the box around the rivers to crop the raster for each soil texture layer
clay_05_LM <- crop(clay_05_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
clay_200_LM <- crop(clay_200_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
silt_05_LM <- crop(silt_05_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
silt_200_LM <- crop(silt_200_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
sand_05_LM <- crop(sand_05_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
sand_200_LM <- crop(sand_200_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
ph_05_LM <- crop(ph_05_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
ph_200_LM <- crop(ph_200_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
ocd_05_LM <- crop(ocd_05_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
ocd_200_LM <- crop(ocd_200_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
coarse_frag_05_LM <- crop(coarse_frag_05_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
coarse_frag_200_LM <- crop(coarse_frag_200_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
cat_ex_cap_05_LM <- crop(cat_ex_cap_05_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
cat_ex_cap_200_LM <- crop(cat_ex_cap_200_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
bulk_dens_05_LM <- crop(bulk_dens_05_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
bulk_dens_200_LM <- crop(bulk_dens_200_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
vol_wat_10kpa_05_LM <- crop(vol_wat_10kpa_05_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
vol_wat_10kpa_200_LM <- crop(vol_wat_10kpa_200_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
vol_wat_33kpa_05_LM <- crop(vol_wat_33kpa_05_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
vol_wat_33kpa_200_LM <- crop(vol_wat_33kpa_200_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
vol_wat_1500kpa_05_LM <- crop(vol_wat_1500kpa_05_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
vol_wat_1500kpa_200_LM <- crop(vol_wat_1500kpa_200_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
nitrogen_05_LM <-  crop(nitrogen_05_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
nitrogen_200_LM <- crop(nitrogen_200_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
Soil_Organic_Carbon_05_LM <- crop(Soil_Organic_Carbon_05_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
Soil_Organic_Carbon_200_LM <- crop(Soil_Organic_Carbon_200_utm, extent(LM_box[1]-100, LM_box[3]+100, LM_box[2]-100, LM_box[4]+100))
#attempt of using ggplot to plot clay layer with river shapefile
ggplot()+
geom_raster(data = as.data.frame(Soil_Organic_Carbon_05_LM, xy=T), aes(x=x, y=y, fill = SOC.0.5))+
geom_sf(data = river_LM_trans)+
geom_sf(data = LM_fixed_field_data_processed)
ggplot()+
geom_raster(data = as.data.frame(ph_200_LM, xy=T), aes(x=x, y=y, fill = ph_100.200))+
geom_sf(data = river_LM_trans)+
geom_sf(data = LM_fixed_field_data_processed)
#creating a stack of the raster layers
soil_stack_LM_soil_text <- stack(clay_05_LM, clay_200_LM, silt_05_LM, silt_200_LM, sand_05_LM, sand_200_LM) #the stack of all of the soil texture rasters
soil_stack_LM_other <- stack(ph_05_LM, ph_200_LM, ocd_05_LM, ocd_200_LM, coarse_frag_05_LM, coarse_frag_200_LM, #the stack of all of the other soil variables, with different extents than the soil texture rasters
cat_ex_cap_05_LM, cat_ex_cap_200_LM, bulk_dens_05_LM, bulk_dens_200_LM, vol_wat_10kpa_05_LM,
vol_wat_10kpa_200_LM, vol_wat_33kpa_05_LM, vol_wat_33kpa_200_LM, vol_wat_1500kpa_05_LM,
vol_wat_1500kpa_200_LM)
soil_stack_LM_extra <- stack(nitrogen_05_LM, nitrogen_200_LM, Soil_Organic_Carbon_05_LM, Soil_Organic_Carbon_200_LM)
soil_stack_LM.df <- as.data.frame(getValues(soil_stack_LM))
nitrogen_200_SD <- crop(nitrogen_200_utm, extent(SD_box[1]-100, SD_box[3]+100, SD_box[2]-100, SD_box[4]+100))
Soil_Organic_Carbon_05_SD <- crop(Soil_Organic_Carbon_05_utm, extent(SD_box[1]-100, SD_box[3]+100, SD_box[2]-100, SD_box[4]+100))
Soil_Organic_Carbon_200_SD <- crop(Soil_Organic_Carbon_200_utm, extent(SD_box[1]-100, SD_box[3]+100, SD_box[2]-100, SD_box[4]+100))
#creating a stack of the raster layers
soil_stack_SD_soil_text <- stack(clay_05_SD, clay_200_SD, silt_05_SD, silt_200_SD, sand_05_SD, sand_200_SD) #the stack of all of the soil texture rasters
soil_stack_SD_other <- stack(ph_05_SD, ph_200_SD, ocd_05_SD, ocd_200_SD, coarse_frag_05_SD, coarse_frag_200_SD, #the stack of all of the other soil variables, with different extents than the soil texture rasters
cat_ex_cap_05_SD, cat_ex_cap_200_SD, bulk_dens_05_SD, bulk_dens_200_SD, vol_wat_10kpa_05_SD,
vol_wat_10kpa_200_SD, vol_wat_33kpa_05_SD, vol_wat_33kpa_200_SD, vol_wat_1500kpa_05_SD,
vol_wat_1500kpa_200_SD)
soil_stack_SD_extra <- stack(nitrogen_05_SD, nitrogen_200_SD,Soil_Organic_Carbon_05_SD,  Soil_Organic_Carbon_200_SD)
size.pop.slopes.df
