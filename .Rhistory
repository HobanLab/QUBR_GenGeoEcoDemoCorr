plot(smaller_Sales_mlr$residuals ~ smaller_Sales_mlr$fitted.values)
plot(slr_slopes, mlr_slopes)
plot(slr_slopes, mlr_slopes, xlab = "Single Linear Regression Slopes", ylab = "Multiple Linear Regression Slopes")
x1
plot(smaller_Sales_mlr$residuals ~ smaller_Sales_mlr$fitted.values, xlab = "Fitted Values", ylab = "Residuals")
#making the mlr
Sales_mlr <- lm(Sales ~ Price + Urban + US + ShelveLoc, data = Carseats)
summary(Sales_mlr)
summary(smaller_Sales_mlr)
summary(smaller_Sales_mlr)
confint(smaller_Sales_mlr)
plot(hatvalues(smaller_Sales_mlr))
plot(hatvalues(smaller_Sales_mlr))
which.max(hatvalues(smaller_Sales_mlr))
sapply(smaller_Sales_mlr, > 10.49712308)
?sapply
which((smaller_Sales_mlr > 10.49712308)
which(smaller_Sales_mlr > 10.49712308)
which(smaller_Sales_mlr, smaller_Sales_mlr > 10.49712308)
which(Sales > 10.49712308)
which(Carseats$Sales > 10.49712308)
which(Carseats$Sales > 10.49712308)
Carseats
#loading in package with datafram
library("ISLR2")
which(Carseats$Sales > 10.49712308)
sapply(Carseats, range)
sapply(Carseats, range)
plot(predict(smaller_Sales_mlr), rstudent(smaller_Sales_mlr))
par(mfrow = c(2, 2))
plot(smaller_Sales_mlr)
plot(predict(smaller_Sales_mlr), rstudent(smaller_Sales_mlr))
par(mfrow = c(2, 2))
plot(smaller_Sales_mlr)
plot(predict(smaller_Sales_mlr), rstudent(smaller_Sales_mlr))
??carseats
#plotting the relationship between x1 and x2
plot(x1, x2)
abline(z)
plot(x1, x2)
abline(z)
#looking for outliers
plot(predict(y_x1_lm), rstudent(y_x1_lm))
#looking for high leverage points
plot(hatvalues(y_x1_lm))
which.max(hatvalues(y_x1_lm))
#looking for outliers
plot(predict(y_x1_lm), rstudent(y_x1_lm))
#looking for high leverage points
plot(hatvalues(y_x1_lm))
which.max(hatvalues(y_x1_lm))
#looking for outliers
plot(predict(y_x1_lm), rstudent(y_x1_lm))
#looking for high leverage points
plot(hatvalues(y_x1_lm))
which.max(hatvalues(y_x1_lm))
#looking for outliers
plot(predict(y_x1_lm), rstudent(y_x1_lm))
#looking for high leverage points
plot(hatvalues(y_x1_lm))
which.max(hatvalues(y_x1_lm))
#c
y_lm <- lm(y ~ x1 + x2)
summary(y_lm)
plot(predict(y_x1_lm), rstudent(y_x1_lm)) #looking for outliers
plot(hatvalues(y_x1_lm)) #looking for high leverage points
which.max(hatvalues(y_x1_lm))
plot(predict(y_x1_lm), rstudent(y_x1_lm)) #looking for outliers
#d
y_x1_lm <- lm(y ~ x1)
summary(y_x1_lm)
plot(predict(y_x1_lm), rstudent(y_x1_lm)) #looking for outliers
#e
y_x2_lm <- lm(y ~ x2)
summary(y_x2_lm)
plot(predict(y_x1_lm), rstudent(y_x1_lm)) #looking for outliers
plot(hatvalues(y_x1_lm)) #looking for high leverage points
plot(predict(y_x2_lm), rstudent(y_x2_lm)) #looking for outliers
plot(hatvalues(y_x2_lm)) #looking for high leverage points
which.max(hatvalues(y_x2_lm))
plot(predict(y_x2_lm), rstudent(y_x2_lm)) #looking for outliers
plot(predict(y_x1_lm), rstudent(y_x1_lm)) #looking for outliers
which.max(hatvalues(y_x1_lm))
plot(predict(y_lm), rstudent(y_lm)) #looking for outliers
plot(hatvalues(y_lm)) #looking for high leverage points
which.max(hatvalues(y_lm))
summary(y_x1_lm)
plot(predict(y_x2_lm), rstudent(y_x2_lm)) #looking for outliers
plot(hatvalues(y_x2_lm)) #looking for high leverage points
which.max(hatvalues(y_x2_lm))
plot(predict(y_x1_lm), rstudent(y_x1_lm)) #looking for outliers
which(rstudent(y_x1_lm) > 3 | < 3)
which(rstudent(y_x1_lm) > 3 | rstudent(y_x1_lm) < 3)
which(rstudent(y_x1_lm) > 3 | rstudent(y_x1_lm) < 3)
which(rstudent(y_x1_lm) > 3 | rstudent(y_x1_lm) < -3)
summary(y_x1_lm)
plot(predict(y_x2_lm), rstudent(y_x2_lm)) #looking for outliers
plot(hatvalues(y_x2_lm)) #looking for high leverage points
which.max(hatvalues(y_x2_lm))
test$mRSI <- predict(mRSI_lm, newdata = test)
library(tidyverse)
library(tidyverse)
library(moments) # for calculating the moments of each variable
library(mgcv) #needed for the gam function for generalized additive models
library(MuMIn) #to use the dredge function
library(visreg) #package to be able to plot effects of categorical variables
library(gratia) #using the function smooth estimates
library(gridExtra) #way to arrange ggplots in one plot
library(plotly) #3d plotting
#reading in the data
all_points_fixed_field_data_processed_terrain <- read.csv("./all_points_fixed_field_data_processed_terrain.csv")
setwd("~/GAM Files for Jason")
#reading in the data
all_points_fixed_field_data_processed_terrain <- read.csv("./all_points_fixed_field_data_processed_terrain.csv")
#had to remove points 174 and 175 because they had NAs in the slope data and there was a NA in elevation we needed to remove to continue the analysis
all_points_fixed_field_data_processed_terrain_no_NA <- all_points_fixed_field_data_processed_terrain %>%
filter(is.na(all_points_slope_raster_15_data_pts) == F) %>%
filter(is.na(Elevation..m.FIXED) == F) %>%
filter(is.na(all_points_aspect_raster_15_data_pts_8_categorical) == F)
all_points_add.gam_SCA <- gam(Canopy_short ~ Elevation..m.FIXED + all_points_slope_raster_15_data_pts + all_points_aspect_raster_15_data_pts_8_categorical,
data = all_points_fixed_field_data_processed_terrain_no_NA)
all_points_add.gam_SCA.smoothed <- gam(Canopy_short ~ s(Elevation..m.FIXED) + s(all_points_slope_raster_15_data_pts) + all_points_aspect_raster_15_data_pts_8_categorical,
data = all_points_fixed_field_data_processed_terrain_no_NA)
all_points_add.gam_SCA.smoothed <- gam(Canopy_short ~ s(Elevation..m.FIXED) + s(all_points_slope_raster_15_data_pts) + all_points_aspect_raster_15_data_pts_8_categorical,
data = all_points_fixed_field_data_processed_terrain_no_NA)
all_points_add.gam_SCA.smoothed_first_term <- gam(Canopy_short ~ s(Elevation..m.FIXED) + all_points_slope_raster_15_data_pts + all_points_aspect_raster_15_data_pts_8_categorical,
data = all_points_fixed_field_data_processed_terrain_no_NA)
all_points_add.gam_SCA.smoothed_second_term <- gam(Canopy_short ~ Elevation..m.FIXED + s(all_points_slope_raster_15_data_pts) + all_points_aspect_raster_15_data_pts_8_categorical,
data = all_points_fixed_field_data_processed_terrain_no_NA)
all_points_add.gam_SCA.smoothed <- gam(Canopy_short ~ s(Elevation..m.FIXED) + s(all_points_slope_raster_15_data_pts) + all_points_aspect_raster_15_data_pts_8_categorical,
data = all_points_fixed_field_data_processed_terrain_no_NA)
all_points_fixed_field_data_processed_terrain_no_NA$all_points_aspect_raster_15_data_pts_8_categorical
length(all_points_fixed_field_data_processed_terrain_no_NA$all_points_aspect_raster_15_data_pts_8_categorical)
#SCA
length(all_points_fixed_field_data_processed_terrain_no_NA$Elevation..m.FIXED)
#SCA
length(all_points_fixed_field_data_processed_terrain_no_NA$all_points_slope_raster_15_data_pts)
all_points_add.gam_SCA.smoothed <- gam(Canopy_short ~ Elevation..m.FIXED + all_points_slope_raster_15_data_pts + all_points_aspect_raster_15_data_pts_8_categorical,
data = all_points_fixed_field_data_processed_terrain_no_NA)
all_points_add.gam_SCA.smoothed <- gam(Canopy_short ~ s(Elevation..m.FIXED) + s(all_points_slope_raster_15_data_pts) + all_points_aspect_raster_15_data_pts_8_categorical,
data = all_points_fixed_field_data_processed_terrain_no_NA)
all_points_add.gam_SCA.smoothed <- gam(Canopy_short ~ s(Elevation..m.FIXED) + s(all_points_slope_raster_15_data_pts) + all_points_aspect_raster_15_data_pts_8_categorical,
data = all_points_fixed_field_data_processed_terrain_no_NA)
all_points_add.gam_SCA.smoothed <- gam(Canopy_short ~ s(Elevation..m.FIXED) + s(all_points_slope_raster_15_data_pts) + s(all_points_aspect_raster_15_data_pts_8_categorical),
data = all_points_fixed_field_data_processed_terrain_no_NA)
all_points_add.gam_SCA.smoothed <- gam(Canopy_short ~ s(Elevation..m.FIXED) + s(all_points_slope_raster_15_data_pts) + all_points_aspect_raster_15_data_pts_8_categorical,
data = all_points_fixed_field_data_processed_terrain_no_NA)
all_points_add.gam_SCA.smoothed <- gam(Canopy_short ~ s(Elevation..m.FIXED) + all_points_slope_raster_15_data_pts + all_points_aspect_raster_15_data_pts_8_categorical,
data = all_points_fixed_field_data_processed_terrain_no_NA)
all_points_add.gam_SCA.smoothed <- gam(Canopy_short ~ Elevation..m.FIXED + s(all_points_slope_raster_15_data_pts) + all_points_aspect_raster_15_data_pts_8_categorical,
data = all_points_fixed_field_data_processed_terrain_no_NA)
all_points_add.gam_SCA.smoothed <- gam(Canopy_short ~ Elevation..m.FIXED + s(all_points_slope_raster_15_data_pts) + all_points_aspect_raster_15_data_pts_8_categorical,
data = all_points_fixed_field_data_processed_terrain_no_NA)
#SCA
all_points_fixed_field_data_processed_terrain_no_NA$all_points_slope_raster_15_data_pts
library(tidyverse)
library(moments) # for calculating the moments of each variable
library(sf) # for plotting spatial objects
library(smatr)
library(ggpmisc)
library(raster) #for working with the rast files
library(terra) # for extracting the slope and aspect from the DEM elevation files
library(car) #to create added variable plots and to run levene's test for checking ANOVA conditions
library(stars) # to convert raster into stars
library(gdalUtilities) #to be able to use gdalwarp
library(mgcv) #needed for the gam function for generalized additive models
library(starsExtra) #to use dist_to_nearest
library(MuMIn) #to use the dredge function
library(rpart) #to use the function rpart to check recurissive binary
library(visreg) #package to be able to plot effects of categorical variables
library(gratia) #using the function smooth estimates
library(gridExtra) #way to arrange ggplots in one plot
library(plotly) #3d plotting
devtools::install_github("AckerDWM/gg3D") #3d plotting
library("gg3D") #3d plotting
library(mgcViz) #3d plotting
library(rgl) #3d plotting
fixed_field_data_processed <- read.csv("./analyses/fixed_field_data_processed.csv") #imports the csv created from analyzing_morpho_data_cleaned.R
#creating bboxs for all of the river shapefiles for each population
LM_box <- st_bbox(river_LM_trans)
LC_box <- st_bbox(river_LC_trans)
SD_box <- st_bbox(river_SD_trans)
setwd("~/Morton Arboretum REU 2024/Untitled/QUBR_GenGeoEcoDemoCorr")
library(tidyverse)
library(moments) # for calculating the moments of each variable
library(sf) # for plotting spatial objects
library(smatr)
library(ggpmisc)
library(raster) #for working with the rast files
library(terra) # for extracting the slope and aspect from the DEM elevation files
library(car) #to create added variable plots and to run levene's test for checking ANOVA conditions
library(stars) # to convert raster into stars
library(gdalUtilities) #to be able to use gdalwarp
library(mgcv) #needed for the gam function for generalized additive models
library(starsExtra) #to use dist_to_nearest
library(MuMIn) #to use the dredge function
library(rpart) #to use the function rpart to check recurissive binary
library(visreg) #package to be able to plot effects of categorical variables
library(gratia) #using the function smooth estimates
library(gridExtra) #way to arrange ggplots in one plot
library(plotly) #3d plotting
devtools::install_github("AckerDWM/gg3D") #3d plotting
library("gg3D") #3d plotting
library(mgcViz) #3d plotting
library(rgl) #3d plotting
fixed_field_data_processed <- read.csv("./analyses/fixed_field_data_processed.csv") #imports the csv created from analyzing_morpho_data_cleaned.R
#transforming the data into shapefiles with either WGS84
fixed_field_data_processed_sf <- st_as_sf(fixed_field_data_processed,
coords = c("long", "lat"), crs = 4326)
#transforming the shapefile of trees from WGS84 into equal area projection UTM 12N
fixed_field_data_processed_sf_transformed <- st_transform(fixed_field_data_processed_sf, crs = 26912) # this in UTM 12 N an equal area projection
#create dataframe with X and Y UTM coordinates
fixed_field_data_processed_sf_trans_coords <- st_coordinates(fixed_field_data_processed_sf_transformed) #creates a dataframe with seperate x and y columns from the UTM 12N transformation
fixed_field_data_processed_sf_trans_coordinates <- fixed_field_data_processed_sf_transformed %>%
cbind(fixed_field_data_processed_sf_trans_coords) #combines the x and y coordinate data frame with the transformed sf dataframe
#export the csv of the UTM 12N points for using the file in ArcGIS to make new shapefiles
fixed_field_data_processed_sf_trans_coordinates_download <- write.csv(fixed_field_data_processed_sf_trans_coordinates, "/Users/chewbecca/Morton Arboretum REU 2024/Untitled/QUBR_GenGeoEcoDemoCorr/data/fixed_field_data_processed_sf_trans_coordinates.csv", row.names = F)
View(fixed_field_data_processed_sf_transformed)
LM_fixed_field_data_processed_sf <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "LM") %>%
st_as_sfc()
LC_fixed_field_data_processed_sf <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "LC") %>%
st_as_sfc()
SD_fixed_field_data_processed_sf <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "SD") %>%
st_as_sfc()
#creating columns with transformations: logged all of the variables
fixed_field_data_processed_sf_trans_coordinates <- fixed_field_data_processed_sf_trans_coordinates %>%
mutate(Canopy_short_lg = log(Canopy_short))%>%
mutate(Canopy_long_lg = log(Canopy_long))%>%
mutate(Canopy_area_lg = log(Canopy_area))%>%
mutate(Crown_spread_lg = log(Crown_spread))%>%
mutate(DBH_ag_lg = log(DBH_ag))
#creating columns with transformations: square root all of the variables
fixed_field_data_processed_sf_trans_coordinates <- fixed_field_data_processed_sf_trans_coordinates %>%
mutate(Canopy_short_sqrt = sqrt(Canopy_short))%>%
mutate(Canopy_long_sqrt = sqrt(Canopy_long))%>%
mutate(Canopy_area_sqrt = sqrt(Canopy_area))%>%
mutate(Crown_spread_sqrt = sqrt(Crown_spread))%>%
mutate(DBH_ag_sqrt = sqrt(DBH_ag))
#set elevation as a numeric value
fixed_field_data_processed_sf_trans_coordinates <- fixed_field_data_processed_sf_trans_coordinates %>%
mutate(Elevation..m. = as.numeric(Elevation..m.))
LM_fixed_field_data_processed <- fixed_field_data_processed_sf_trans_coordinates %>%
filter(Locality == "LM")
LC_fixed_field_data_processed <- fixed_field_data_processed_sf_trans_coordinates %>%
filter(Locality == "LC")
SD_fixed_field_data_processed <- fixed_field_data_processed_sf_trans_coordinates %>%
filter(Locality == "SD")
LM_fixed_field_data_processed <- LM_fixed_field_data_processed %>%
mutate(Elevation..m. = as.numeric(Elevation..m.))
#creating a new column in the whole dataset to get rid of  360 m outlier and turn the values in feet into meter
fixed_field_data_processed_sf_trans_coordinates <-  fixed_field_data_processed_sf_trans_coordinates %>%
mutate(Elevation..m.FIXED = case_when((Elevation..m. < 700 & Elevation..m. != 360) ~ Elevation..m.,
(Elevation..m. == 360) ~ NA,
(Elevation..m. > 700) ~ Elevation..m.*0.3048))  #because LM and LC do not have a 360 elevation and SD and LC do have values above 700, this should not effect them
View(fixed_field_data_processed_sf_trans_coordinates)
#creating a new elevation column so the values that were mistakenly put in feet are in meters
LM_fixed_field_data_processed <-  LM_fixed_field_data_processed %>%
mutate(Elevation..m.FIXED = case_when((Elevation..m. > 700) ~ Elevation..m.*0.3048,
(Elevation..m. < 700) ~ Elevation..m.))
#creating a new elevation column so LC, LM, and SD all have this same column, makes it easier for combining the populaiton data frames
LC_fixed_field_data_processed <-  LC_fixed_field_data_processed %>%
mutate(Elevation..m.FIXED = case_when((Elevation..m. > 700) ~ Elevation..m.*0.3048,
(Elevation..m. < 700) ~ Elevation..m.))
#plotting the tree points by elevation (m)
ggplot()+
geom_sf(data = LM_fixed_field_data_processed, aes(color = Elevation..m.FIXED))
ggplot()+
geom_sf(data = fixed_field_data_processed_sf_trans_coordinates, aes(color = Elevation..m.FIXED))
##creating a new elevation column so that the 360 m outlier is 460
SD_fixed_field_data_processed <-  SD_fixed_field_data_processed %>%
mutate(Elevation..m.FIXED = case_when((Elevation..m. == 360) ~ NA,
(Elevation..m. != 360) ~ Elevation..m.))
#upload ArcGIS river shapefile and filter out polygons for each population
river_LM <- st_read("./data/Shapefiles/FINAL River Shapefiles ArcGIS/LM River/LM_Rivers_Final.shp")
river_LM  <- river_LM$geometry[1]
plot(river_LM)
river_LC  <- st_read("./data/Shapefiles/FINAL River Shapefiles ArcGIS/LC River/LC_Rivers_Final.shp")
river_LC  <- river_LC$geometry[1]
plot(river_LC)
river_SD <- st_read("./data/Shapefiles/FINAL River Shapefiles ArcGIS/SD River/SD_Rivers_Final.shp")
river_SD <- river_SD$geometry[1]
plot(river_SD)
#changing the coordinate reference system of the river polygons to be equal area projection (UTM 12N), uses meters as distance measurement
river_LM_trans <- st_as_sf(st_transform(river_LM, crs = 26912))
river_LC_trans <- st_as_sf(st_transform(river_LC, crs = 26912))
river_SD_trans <- st_as_sf(st_transform(river_SD, crs = 26912))
#creating buffers around the rivers
river_buffer_LM <- st_buffer(river_LM_trans, 100) #100 m buffer
ggplot()+
geom_sf(data = river_buffer_LM)+
geom_sf(data = river_LM_trans)+
geom_sf(data = LM_fixed_field_data_processed_sf)
river_buffer_LC<- st_buffer(river_LC_trans, 100) #230 m buffer
ggplot()+
geom_sf(data = river_buffer_LC)+
geom_sf(data = river_LC_trans)+
geom_sf(data = LC_fixed_field_data_processed_sf)
river_buffer_SD<- st_buffer(river_SD_trans, 70) #70 m buffer
ggplot()+
geom_sf(data = river_buffer_SD)+
geom_sf(data = river_SD_trans)+
geom_sf(data = SD_fixed_field_data_processed_sf)
#creating a boundry box of LM with the UTM 12 N min and max lat lon values and then turning it into a simple feature geometry
LM_fixed_field_data_processed_box <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "LM") %>%
st_bbox %>%
st_as_sfc()
#creating a boundry box of LC with the UTM 12 N min and max lat lon values and then turning it into a simple feature geometry
LC_fixed_field_data_processed_box <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "LC") %>%
st_bbox %>%
st_as_sfc()
#creating a boundry box of SD with the UTM 12 N min and max lat lon values and then turning it into a simple feature geometry
SD_fixed_field_data_processed_box <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "SD") %>%
st_bbox %>%
st_as_sfc()
#creating bboxs for all of the river shapefiles for each population
LM_box <- st_bbox(river_LM_trans)
LC_box <- st_bbox(river_LC_trans)
SD_box <- st_bbox(river_SD_trans)
#Importing the cropped rasters for LM, LC, and SD
CEM_15_utm_LM <- raster(paste0("./data/15 m Elevation Raster/CEM_15_utm_LM.tif"))
CEM_15_utm_LC <- raster(paste0("./data/15 m Elevation Raster/CEM_15_utm_LC.tif"))
CEM_15_utm_SD <- raster(paste0("./data/15 m Elevation Raster/CEM_15_utm_SD.tif"))
#creating the all points raster by merging the LM, LC, and SD rasters
CEM_15_utm_all_points <- raster::merge(CEM_15_utm_LM, CEM_15_utm_LC, CEM_15_utm_SD)
ggplot()+
geom_raster(data= as.data.frame(CEM_15_utm_all_points, xy = T), aes(x=x, y=y, fill = layer))+
geom_sf(data = fixed_field_data_processed_sf_transformed)
#extracting the slope in degrees, using the queens method (neighbor = 8)
all_points_slope_raster_15 <- terra::terrain(CEM_15_utm_all_points, unit = 'degrees', neighbors = 8, 'slope')
#plot the slopes
ggplot()+
geom_raster(data= as.data.frame(all_points_slope_raster_15, xy = T), aes(x=x, y=y, fill = slope))+
geom_sf(data = fixed_field_data_processed_sf_trans_coordinates)+
scale_fill_viridis_c()
#extracting the slope in degrees, using the queens method (neighbor = 8)
LM_slope_raster_15 <- terra::terrain(CEM_15_utm_LM, unit = 'degrees', neighbors = 8, 'slope')
#plot the slopes
ggplot()+
geom_raster(data= as.data.frame(LM_slope_raster_15, xy = T), aes(x=x, y=y, fill = slope))+
geom_sf(data = LM_fixed_field_data_processed)+
scale_fill_viridis_c()
#extracting the slope in degrees, using the queens method (neighbor = 8)
LC_slope_raster_15 <- terra::terrain(CEM_15_utm_LC, unit = 'degrees', neighbors = 8, 'slope')
#plot the slopes
ggplot()+
geom_raster(data= as.data.frame(LC_slope_raster_15, xy = T), aes(x=x, y=y, fill = slope))+
geom_sf(data = LC_fixed_field_data_processed)+
scale_fill_viridis_c()
#extracting the slope in degrees, using the queens method (neighbor = 8)
SD_slope_raster_15 <- terra::terrain(CEM_15_utm_SD, unit = 'degrees', neighbors = 8, 'slope')
#plot the slopes
ggplot()+
geom_raster(data= as.data.frame(SD_slope_raster_15, xy = T), aes(x=x, y=y, fill = slope))+
geom_sf(data = SD_fixed_field_data_processed)+
scale_fill_viridis_c()
#extracting the slope in degrees, using the queens method (neighbor = 8)
all_points_aspect_raster_15 <- terra::terrain(CEM_15_utm_all_points, unit = 'degrees', neighbors = 8, 'aspect')
#plot the slopes
ggplot()+
geom_raster(data= as.data.frame(all_points_aspect_raster_15, xy = T), aes(x=x, y=y, fill = aspect))+
geom_sf(data = fixed_field_data_processed_sf_trans_coordinates)+
scale_fill_viridis_c()
#extracting the aspect in degrees, using the queens method (neighbor = 8)
LM_aspect_raster_15 <- terra::terrain(CEM_15_utm_LM, unit = 'degrees', neighbors = 8, 'aspect')
#plot the slopes
ggplot()+
geom_raster(data= as.data.frame(LM_aspect_raster_15, xy = T), aes(x=x, y=y, fill = aspect))+
geom_sf(data = LM_fixed_field_data_processed)+
scale_fill_viridis_c()
#extracting the aspect in degrees, using the queens method (neighbor = 8)
LC_aspect_raster_15 <- terra::terrain(CEM_15_utm_LC, unit = 'degrees', neighbors = 8, 'aspect')
#plot the slopes
ggplot()+
geom_raster(data= as.data.frame(LC_aspect_raster_15, xy = T), aes(x=x, y=y, fill = aspect))+
geom_sf(data = LC_fixed_field_data_processed)+
scale_fill_viridis_c()
#extracting the aspect in degrees, using the queens method (neighbor = 8)
SD_aspect_raster_15 <- terra::terrain(CEM_15_utm_SD, unit = 'degrees', neighbors = 8, 'aspect')
#plot the slopes
ggplot()+
geom_raster(data= as.data.frame(SD_aspect_raster_15, xy = T), aes(x=x, y=y, fill = aspect))+
geom_sf(data = SD_fixed_field_data_processed)+
scale_fill_viridis_c()
#all points
all_points_aspect_raster_15_data_pts <- extract(all_points_aspect_raster_15, fixed_field_data_processed_sf_trans_coordinates) #extracting aspect for each point value
#all points
all_points_aspect_raster_15_data_pts <- extract(all_points_aspect_raster_15, fixed_field_data_processed_sf_trans_coordinates) #extracting aspect for each point value
all_points_slope_raster_15_data_pts <- extract(all_points_slope_raster_15, fixed_field_data_processed_sf_trans_coordinates) #extracting slope for each point value
all_points_fixed_field_data_processed_terrain <- cbind(fixed_field_data_processed_sf_trans_coordinates, all_points_aspect_raster_15_data_pts) #bind the aspect data for each point to the LM point dataframe
all_points_fixed_field_data_processed_terrain <- cbind(all_points_fixed_field_data_processed_terrain, all_points_slope_raster_15_data_pts) #bind the slope data for each point to the LM point dataframe
LM_aspect_raster_15_data_pts <- extract(LM_aspect_raster_15, LM_fixed_field_data_processed) #extracting aspect for each point value
LM_slope_raster_15_data_pts <- extract(LM_slope_raster_15, LM_fixed_field_data_processed) #extracting slope for each point value
LM_elevation_raster_15_data_pts <- extract(CEM_15_utm_LM, LM_fixed_field_data_processed) #extracting the elevation for each point value
LM_fixed_field_data_processed_terrain <- cbind(LM_fixed_field_data_processed, LM_aspect_raster_15_data_pts) #bind the aspect data for each point to the LM point dataframe
LM_fixed_field_data_processed_terrain <- cbind(LM_fixed_field_data_processed_terrain, LM_slope_raster_15_data_pts) #bind the slope data for each point to the LM point dataframe
LM_fixed_field_data_processed_terrain <- cbind(LM_fixed_field_data_processed_terrain, LM_elevation_raster_15_data_pts) #bind the elevation data for each point to the LM point dataframe
View(LM_fixed_field_data_processed_terrain)
#LC
LC_aspect_raster_15_data_pts <- extract(LC_aspect_raster_15, LC_fixed_field_data_processed) #extracting aspect for each point value
LC_slope_raster_15_data_pts <- extract(LC_slope_raster_15, LC_fixed_field_data_processed) #extracting slope for each point value
LC_elevation_raster_15_data_pts <- extract(CEM_15_utm_LC, LC_fixed_field_data_processed) #extracting the elevation for each point value
LC_fixed_field_data_processed_terrain <- cbind(LC_fixed_field_data_processed, LC_aspect_raster_15_data_pts) #bind the aspect data for each point to the SD point dataframe
LC_fixed_field_data_processed_terrain <- cbind(LC_fixed_field_data_processed_terrain, LC_slope_raster_15_data_pts) #bind the slope data for each point to the SD point dataframe
LC_fixed_field_data_processed_terrain <- cbind(LC_fixed_field_data_processed_terrain, LC_elevation_raster_15_data_pts) #bind the elevation data for each point to the LM point dataframe
View(LC_fixed_field_data_processed_terrain)
#SD
SD_aspect_raster_15_data_pts <- extract(SD_aspect_raster_15, SD_fixed_field_data_processed) #extracting aspect for each point value
SD_slope_raster_15_data_pts <- extract(SD_slope_raster_15, SD_fixed_field_data_processed) #extracting slope for each point value
SD_elevation_raster_15_data_pts <- extract(CEM_15_utm_SD, SD_fixed_field_data_processed) #extracting the elevation for each point value
SD_fixed_field_data_processed_terrain <- cbind(SD_fixed_field_data_processed, SD_aspect_raster_15_data_pts) #bind the aspect data for each point to the SD point dataframe
SD_fixed_field_data_processed_terrain <- cbind(SD_fixed_field_data_processed_terrain, SD_slope_raster_15_data_pts) #bind the slope data for each point to the SD point dataframe
SD_fixed_field_data_processed_terrain <- cbind(SD_fixed_field_data_processed_terrain, SD_elevation_raster_15_data_pts) #bind the elevation data for each point to the LM point dataframe
#all points
all_points_fixed_field_data_processed_terrain <- all_points_fixed_field_data_processed_terrain %>%
mutate(all_points_aspect_raster_15_data_pts = case_when((all_points_aspect_raster_15_data_pts == "360") ~  0,
(all_points_aspect_raster_15_data_pts != "360")~ all_points_aspect_raster_15_data_pts))
#LM
LM_fixed_field_data_processed_terrain <- LM_fixed_field_data_processed_terrain %>%
mutate(LM_aspect_raster_15_data_pts = case_when((LM_aspect_raster_15_data_pts == "360") ~  0,
(LM_aspect_raster_15_data_pts != "360")~ LM_aspect_raster_15_data_pts))
LC_fixed_field_data_processed_terrain <- LC_fixed_field_data_processed_terrain %>%
mutate(LC_aspect_raster_15_data_pts = case_when((LC_aspect_raster_15_data_pts == "360") ~  0,
(LC_aspect_raster_15_data_pts != "360")~ LC_aspect_raster_15_data_pts))
SD_fixed_field_data_processed_terrain <- SD_fixed_field_data_processed_terrain %>%
mutate(SD_aspect_raster_15_data_pts = case_when((SD_aspect_raster_15_data_pts == "360") ~  0,
(SD_aspect_raster_15_data_pts != "360")~ SD_aspect_raster_15_data_pts))
# the directions are a range of 45 degrees
all_points_fixed_field_data_processed_terrain <- all_points_fixed_field_data_processed_terrain %>%
mutate(all_points_aspect_raster_15_data_pts_8_categorical = case_when((all_points_aspect_raster_15_data_pts > 0 & all_points_aspect_raster_15_data_pts < 22.5) ~ "N",  #north is between 337.5 and 22.5
(all_points_aspect_raster_15_data_pts >= 337.5 & all_points_aspect_raster_15_data_pts < 359.999999999999999) ~ "N", #359.99999
(all_points_aspect_raster_15_data_pts >= 22.5 & all_points_aspect_raster_15_data_pts < 67.5) ~ "NE", #northeast is between 22.5 and 67.5 degrees
(all_points_aspect_raster_15_data_pts >= 67.5 & all_points_aspect_raster_15_data_pts < 112.5) ~ "E", #east is between 67.5 and 112.5 degrees
(all_points_aspect_raster_15_data_pts >= 112.5 & all_points_aspect_raster_15_data_pts < 157.5) ~ "SE", #southeast is between 122.5 and 157.5
(all_points_aspect_raster_15_data_pts >= 157.5 & all_points_aspect_raster_15_data_pts < 202.5) ~ "S", #south is between 157.5 and 202.5
(all_points_aspect_raster_15_data_pts >= 202.5 & all_points_aspect_raster_15_data_pts < 247.5) ~ "SW", #southwest is between 202.5 and 246.5
(all_points_aspect_raster_15_data_pts >= 247.5 & all_points_aspect_raster_15_data_pts < 292.5) ~ "W", #west is between 247.5 and 292.5 degrees
(all_points_aspect_raster_15_data_pts >= 292.5 & all_points_aspect_raster_15_data_pts < 337.5) ~ "NW")) #northwest is between 292.5 and 337.5 degrees
all_points_fixed_field_data_processed_terrain$all_points_aspect_raster_15_data_pts[584]
all_points_fixed_field_data_processed_terrain$all_points_aspect_raster_15_data_pts_8_categorical[584]
# the directions are a range of 90 degrees
all_points_fixed_field_data_processed_terrain <- all_points_fixed_field_data_processed_terrain %>%
mutate(all_points_aspect_raster_15_data_pts_4_categorical = case_when((all_points_aspect_raster_15_data_pts >= 0 & all_points_aspect_raster_15_data_pts < 45) ~ "N",  #north is between 315 and 22.5
(all_points_aspect_raster_15_data_pts >= 315 & all_points_aspect_raster_15_data_pts < 359.999999999999999) ~ "N",
(all_points_aspect_raster_15_data_pts >= 22.5 & all_points_aspect_raster_15_data_pts < 135) ~ "E", #northeast is between 22.5 and 135  degrees
(all_points_aspect_raster_15_data_pts >= 135 & all_points_aspect_raster_15_data_pts < 225) ~ "S", #south is between 135 and 225 degrees
(all_points_aspect_raster_15_data_pts >= 225 & all_points_aspect_raster_15_data_pts < 315) ~ "W")) #west is between 225 and 315
# the directions are a range of 45 degrees
LM_fixed_field_data_processed_terrain <- LM_fixed_field_data_processed_terrain %>%
mutate(LM_aspect_raster_15_data_pts_8_categorical = case_when((LM_aspect_raster_15_data_pts > 0 & LM_aspect_raster_15_data_pts < 22.5) ~ "N",  #north is between 337.5 and 22.5
(LM_aspect_raster_15_data_pts >= 337.5 & LM_aspect_raster_15_data_pts < 359.999999999999999) ~ "N",
(LM_aspect_raster_15_data_pts >= 22.5 & LM_aspect_raster_15_data_pts < 67.5) ~ "NE", #northeast is between 22.5 and 67.5 degrees
(LM_aspect_raster_15_data_pts >= 67.5 & LM_aspect_raster_15_data_pts < 112.5) ~ "E", #east is between 67.5 and 112.5 degrees
(LM_aspect_raster_15_data_pts >= 112.5 & LM_aspect_raster_15_data_pts < 157.5) ~ "SE", #southeast is between 122.5 and 157.5
(LM_aspect_raster_15_data_pts >= 157.5 & LM_aspect_raster_15_data_pts < 202.5) ~ "S", #south is between 157.5 and 202.5
(LM_aspect_raster_15_data_pts >= 202.5 & LM_aspect_raster_15_data_pts < 247.5) ~ "SW", #southwest is between 202.5 and 246.5
(LM_aspect_raster_15_data_pts >= 247.5 & LM_aspect_raster_15_data_pts < 292.5) ~ "W", #west is between 247.5 and 292.5 degrees
(LM_aspect_raster_15_data_pts >= 292.5 & LM_aspect_raster_15_data_pts < 337.5) ~ "NW")) #northwest is between 292.5 and 337.5 degrees
# the directions are a range of 90 degrees
LM_fixed_field_data_processed_terrain <- LM_fixed_field_data_processed_terrain %>%
mutate(LM_aspect_raster_15_data_pts_4_categorical = case_when((LM_aspect_raster_15_data_pts >= 0 & LM_aspect_raster_15_data_pts < 45) ~ "N",  #north is between 315 and 22.5
(LM_aspect_raster_15_data_pts >= 315 & LM_aspect_raster_15_data_pts < 359.999999999999999) ~ "N",
(LM_aspect_raster_15_data_pts >= 22.5 & LM_aspect_raster_15_data_pts < 135) ~ "E", #northeast is between 22.5 and 135  degrees
(LM_aspect_raster_15_data_pts >= 135 & LM_aspect_raster_15_data_pts < 225) ~ "S", #south is between 135 and 225 degrees
(LM_aspect_raster_15_data_pts >= 225 & LM_aspect_raster_15_data_pts < 315) ~ "W")) #west is between 225 and 315
# the directions are a range of 45 degrees
LC_fixed_field_data_processed_terrain <- LC_fixed_field_data_processed_terrain %>%
mutate(LC_aspect_raster_15_data_pts_8_categorical = case_when((LC_aspect_raster_15_data_pts > 0 & LC_aspect_raster_15_data_pts < 22.5) ~ "N",  #north is between 337.5 and 22.5
(LC_aspect_raster_15_data_pts >= 337.5 & LC_aspect_raster_15_data_pts < 359.999999999999999) ~ "N",
(LC_aspect_raster_15_data_pts >= 22.5 & LC_aspect_raster_15_data_pts < 67.5) ~ "NE", #northeast is between 22.5 and 67.5 degrees
(LC_aspect_raster_15_data_pts >= 67.5 & LC_aspect_raster_15_data_pts < 112.5) ~ "E", #east is between 67.5 and 112.5 degrees
(LC_aspect_raster_15_data_pts >= 112.5 & LC_aspect_raster_15_data_pts < 157.5) ~ "SE", #southeast is between 122.5 and 157.5
(LC_aspect_raster_15_data_pts >= 157.5 & LC_aspect_raster_15_data_pts < 202.5) ~ "S", #south is between 157.5 and 202.5
(LC_aspect_raster_15_data_pts >= 202.5 & LC_aspect_raster_15_data_pts < 247.5) ~ "SW", #southwest is between 202.5 and 246.5
(LC_aspect_raster_15_data_pts >= 247.5 & LC_aspect_raster_15_data_pts < 292.5) ~ "W", #west is between 247.5 and 292.5 degrees
(LC_aspect_raster_15_data_pts >= 292.5 & LC_aspect_raster_15_data_pts < 337.5) ~ "NW")) #northwest is between 292.5 and 337.5 degrees
# the directions are a range of 90 degrees
LC_fixed_field_data_processed_terrain <- LC_fixed_field_data_processed_terrain %>%
mutate(LC_aspect_raster_15_data_pts_4_categorical = case_when((LC_aspect_raster_15_data_pts >= 0 & LC_aspect_raster_15_data_pts < 45) ~ "N",  #north is between 315 and 22.5
(LC_aspect_raster_15_data_pts >= 315 & LC_aspect_raster_15_data_pts < 359.999999999999999) ~ "N",
(LC_aspect_raster_15_data_pts >= 45 & LC_aspect_raster_15_data_pts < 135) ~ "E", #northeast is between 22.5 and 135  degrees
(LC_aspect_raster_15_data_pts >= 135 & LC_aspect_raster_15_data_pts < 225) ~ "S", #south is between 135 and 225 degrees
(LC_aspect_raster_15_data_pts >= 225 & LC_aspect_raster_15_data_pts < 315) ~ "W")) #west is between 225 and 315
# the directions are a range of 45 degrees
SD_fixed_field_data_processed_terrain <- SD_fixed_field_data_processed_terrain %>%
mutate(SD_aspect_raster_15_data_pts_8_categorical = case_when((SD_aspect_raster_15_data_pts > 0 & SD_aspect_raster_15_data_pts < 22.5) ~ "N",  #north is between 337.5 and 22.5
(SD_aspect_raster_15_data_pts >= 337.5 & SD_aspect_raster_15_data_pts < 359.999999999999999) ~ "N",
(SD_aspect_raster_15_data_pts >= 22.5 & SD_aspect_raster_15_data_pts < 67.5) ~ "NE", #northeast is between 22.5 and 67.5 degrees
(SD_aspect_raster_15_data_pts >= 67.5 & SD_aspect_raster_15_data_pts < 112.5) ~ "E", #east is between 67.5 and 112.5 degrees
(SD_aspect_raster_15_data_pts >= 112.5 & SD_aspect_raster_15_data_pts < 157.5) ~ "SE", #southeast is between 122.5 and 157.5
(SD_aspect_raster_15_data_pts >= 157.5 & SD_aspect_raster_15_data_pts < 202.5) ~ "S", #south is between 157.5 and 202.5
(SD_aspect_raster_15_data_pts >= 202.5 & SD_aspect_raster_15_data_pts < 247.5) ~ "SW", #southwest is between 202.5 and 246.5
(SD_aspect_raster_15_data_pts >= 247.5 & SD_aspect_raster_15_data_pts < 292.5) ~ "W", #west is between 247.5 and 292.5 degrees
(SD_aspect_raster_15_data_pts >= 292.5 & SD_aspect_raster_15_data_pts < 337.5) ~ "NW")) #northwest is between 292.5 and 337.5 degrees
# the directions are a range of 90 degrees
SD_fixed_field_data_processed_terrain <- SD_fixed_field_data_processed_terrain %>%
mutate(SD_aspect_raster_15_data_pts_4_categorical = case_when((SD_aspect_raster_15_data_pts >= 0 & SD_aspect_raster_15_data_pts < 45) ~ "N",  #north is between 315 and 22.5
(SD_aspect_raster_15_data_pts >= 315 & SD_aspect_raster_15_data_pts < 359.999999999999999) ~ "N",
(SD_aspect_raster_15_data_pts >= 45 & SD_aspect_raster_15_data_pts < 135) ~ "E", #northeast is between 22.5 and 135  degrees
(SD_aspect_raster_15_data_pts >= 135 & SD_aspect_raster_15_data_pts < 225) ~ "S", #south is between 135 and 225 degrees
(SD_aspect_raster_15_data_pts >= 225 & SD_aspect_raster_15_data_pts < 315) ~ "W")) #west is between 225 and 315
#histograms
ggplot(fixed_field_data_processed_sf_trans_coordinates) + # Generate the base plot
geom_histogram(aes(x = Canopy_short))+
xlab("Short Canopy Axis")+
ylab("Frequency")
all_points_fixed_field_data_processed_terrain_download <- write.csv(all_points_fixed_field_data_processed_terrain, "/Users/chewbecca/Morton Arboretum REU 2024/Untitled/QUBR_GenGeoEcoDemoCorr/data/all_points_fixed_field_data_processed_terrain.csv", row.names = F)
