mutate(dist5 = nndist(X = long, Y= lat, k = 5)) %>%
mutate(ANN = mean(c(dist1, dist2, dist3, dist4, dist5)))
View(fixed_field_data_processed_NN)
mean(c(1.374369e-05,
3.064129e-05,
8.661858e-05,
2.288619e-04,
2.312526e-04))
#add nearest neighbor column
fixed_field_data_processed_NN <- fixed_field_data_processed %>%
rowwise()%>%
mutate(dist1 = nndist(X = long, Y= lat, k = 1))%>%
mutate(dist2 = nndist(X = long, Y= lat, k = 2)) %>%
mutate(dist3 = nndist(X = long, Y= lat, k = 3)) %>%
mutate(dist4 = nndist(X = long, Y= lat, k = 4)) %>%
mutate(dist5 = nndist(X = long, Y= lat, k = 5)) %>%
mutate(ANN = mean(c(dist1, dist2, dist3, dist4, dist5)))
View(fixed_field_data_processed_NN)
#add nearest neighbor column
fixed_field_data_processed_NN <- fixed_field_data_processed %>%
mutate(dist1 = nndist(X = long, Y= lat, k = 1))%>%
mutate(dist2 = nndist(X = long, Y= lat, k = 2)) %>%
mutate(dist3 = nndist(X = long, Y= lat, k = 3)) %>%
mutate(dist4 = nndist(X = long, Y= lat, k = 4)) %>%
mutate(dist5 = nndist(X = long, Y= lat, k = 5)) %>%
rowwise()%>%
mutate(ANN = mean(c(dist1, dist2, dist3, dist4, dist5)))
View(fixed_field_data_processed_NN)
mean(c(1.374369e-05,
3.064129e-05,
8.661858e-05,
2.288619e-04,
2.312526e-04))
#add nearest neighbor column
fixed_field_data_processed_NN <- fixed_field_data_processed %>%
mutate(dist1 = nndist(X = long, Y= lat, k = 1))%>%
mutate(dist2 = nndist(X = long, Y= lat, k = 2)) %>%
mutate(dist3 = nndist(X = long, Y= lat, k = 3)) %>%
mutate(dist4 = nndist(X = long, Y= lat, k = 4)) %>%
mutate(dist5 = nndist(X = long, Y= lat, k = 5)) %>%
rowwise()%>%
mutate(ANN = mean(c(dist1, dist2, dist3, dist4, dist5)))%>%
select(!c(dist1, dist2, dist3, dist4, dist5))
View(fixed_field_data_processed_NN)
LM_fixed_field_data_processed <- fixed_field_data_processed_NN %>%
filter(Locality == "LM")
LC_fixed_field_data_processed <- fixed_field_data_processed_NN %>%
filter(Locality == "LC")
SD_fixed_field_data_processed <- fixed_field_data_processed_NN %>%
filter(Locality == "SD")
fixed_field_data_processed_NN
lm_LM_ANN <- lm(fixed_field_data_processed_NN$ANN ~ fixed_field_data_processed_NN$Canopy_short)
plot(lm_LM_ANN)
abline(lm_LM_ANN)
hist(fixed_field_data_processed_NN$Canopy_short, main = Distribution of Short Canopy Axis)
hist(fixed_field_data_processed_NN$Canopy_short, main = "Distribution of Short Canopy Axis")
hist(fixed_field_data_processed_NN$Canopy_short, main = "Distribution of Short Canopy Axis")
hist(fixed_field_data_processed_NN$Canopy_long, main = "Distribution of Long Canopy Axis")
hist(fixed_field_data_processed_NN$Crown_spread, main = "Distribution of Canopy Spread")
hist(fixed_field_data_processed_NN$Canopy_area, main = "Distribution of Canopy Area")
hist(fixed_field_data_processed_NN$DBH_ag, main = "Distribution of DBH")
plot(fixed_field_data_processed_NN$Canopy_short, fixed_field_data_processed_NN$ANN)
lm_LM_ANN <- lm(fixed_field_data_processed_NN$ANN ~ fixed_field_data_processed_NN$Canopy_short)
abline(lm_LM_ANN)
ggplot(data = fixed_field_data_processed_NN, (aes(x=Canopy_short, y=ANN))
ggplot(data = fixed_field_data_processed_NN, (aes(x=Canopy_short, y=ANN)))+
ggplot(data = fixed_field_data_processed_NN, (aes(x=Canopy_short, y=ANN)))+
geom_smooth(method='lm')
ggplot(data = fixed_field_data_processed_NN, (aes(x=Canopy_short, y=ANN)))+
geom_smooth(method='lm')+
geom_point()
ggplot(data = fixed_field_data_processed_NN, (aes(x=Canopy_short, y=ANN)))+
geom_smooth(method='lm')+
geom_point()+
xlab("Short Canopy Axis")+
yalb("ANN")
ggplot(data = fixed_field_data_processed_NN, (aes(x=Canopy_short, y=ANN)))+
geom_smooth(method='lm')+
geom_point()+
xlab("Short Canopy Axis")+
ylab("ANN")
plot(fixed_field_data_processed_NN$Canopy_short, fixed_field_data_processed_NN$ANN, xlab = "Short Canopy Axis", ylab = "ANN")
lm_LM_ANN <- lm(fixed_field_data_processed_NN$ANN ~ fixed_field_data_processed_NN$Canopy_short)
abline(lm_LM_ANN)
plot(fixed_field_data_processed_NN$Canopy_short, fixed_field_data_processed_NN$ANN, xlab = "Short Canopy Axis", ylab = "ANN")
lm_LM_ANN <- lm(fixed_field_data_processed_NN$ANN ~ fixed_field_data_processed_NN$Canopy_short)
abline(lm_LM_ANN)
plot(fixed_field_data_processed_NN$Canopy_short, fixed_field_data_processed_NN$ANN, xlab = "Short Canopy Axis", ylab = "ANN")
lm_LM_ANN <- lm(fixed_field_data_processed_NN$ANN ~ fixed_field_data_processed_NN$Canopy_short)
abline(lm_LM_ANN)
#plotting the linear model in ggplot
ggplot(data = fixed_field_data_processed_NN, (aes(x=Canopy_short, y=ANN)))+
geom_smooth(method='lm')+
geom_point()+
xlab("Short Canopy Axis")+
ylab("ANN")
#checking normality
hist(fixed_field_data_processed_NN$Canopy_short, main = "Distribution of Short Canopy Axis")
hist(fixed_field_data_processed_NN$Canopy_long, main = "Distribution of Long Canopy Axis")
hist(fixed_field_data_processed_NN$Crown_spread, main = "Distribution of Canopy Spread")
hist(fixed_field_data_processed_NN$Canopy_area, main = "Distribution of Canopy Area")
hist(fixed_field_data_processed_NN$DBH_ag, main = "Distribution of DBH") # slight tail
#plotting the linear model in ggplot for SCA, lineaerity condition is not well met
ggplot(data = fixed_field_data_processed_NN, (aes(x=Canopy_short, y=ANN)))+
geom_smooth(method='lm')+
geom_point()+
xlab("Short Canopy Axis")+
ylab("ANN")
#histograms
hist(fixed_field_data_processed_NN$Canopy_short, main = "Distribution of Short Canopy Axis")
ggplot(fixed_field_data_processed_NN) + # Generate the base plot
geom_histogram(aes(x = Canopy_short))
ggplot(fixed_field_data_processed_NN) + # Generate the base plot
geom_histogram(aes(x = Canopy_short))+
xlab("Short Canopy Axis")+
ylab("Frequency")
ggplot(fixed_field_data_processed_NN) + # Generate the base plot
geom_histogram(aes(x = DBH_ag))+
xlab("Aggregated DBH")+
ylab("Frequency")
#Summaries
# Create a df which contains the "classical" univariate dist'n stats of each of the important variables
field_data_summarized <- field_data_processed %>%
dplyr::select(DBH_ag, Canopy_short, Canopy_long, Crown_spread, Canopy_area, eccentricity, DBH_ag) %>%  # Keep only the columns we are interested in getting summary values of
summarise(across(everything(), list(mean = mean, median = median, var = var, sd = sd), na.rm=TRUE)) # Create columns which summarize the mean, median, variance, and standard deviation of each of the selected columns --> these will be used on the hisogram plots
#Summaries
# Create a df which contains the "classical" univariate dist'n stats of each of the important variables
field_data_summarized <- fixed_field_data_processed_NN %>%
dplyr::select(DBH_ag, Canopy_short, Canopy_long, Crown_spread, Canopy_area, eccentricity, DBH_ag) %>%  # Keep only the columns we are interested in getting summary values of
summarise(across(everything(), list(mean = mean, median = median, var = var, sd = sd), na.rm=TRUE)) # Create columns which summarize the mean, median, variance, and standard deviation of each of the selected columns --> these will be used on the hisogram plots
field_data_summarized
View(field_data_summarized)
#Summaries
# Create a df which contains the "classical" univariate dist'n stats of each of the important variables
field_data_summarized <- fixed_field_data_processed_NN %>%
dplyr::select(DBH_ag, Canopy_short, Canopy_long, Crown_spread, Canopy_area, eccentricity) %>%  # Keep only the columns we are interested in getting summary values of
summarise(across(everything(), list(mean = mean, median = median, var = var, sd = sd), na.rm=TRUE)) # Create columns which summarize the mean, median, variance, and standard deviation of each of the selected columns --> these will be used on the hisogram plots
View(field_data_summarized)
#Summaries
# Create a df which contains the "classical" univariate dist'n stats of each of the important variables
field_data_summarized <- fixed_field_data_processed_NN %>%
dplyr::select(DBH_ag, Canopy_short, Canopy_long, Crown_spread, Canopy_area, eccentricity, DBH_ag) %>%  # Keep only the columns we are interested in getting summary values of
summarise(across(everything(), list(mean = mean, median = median, var = var, sd = sd), na.rm=TRUE)) # Create columns which summarize the mean, median, variance, and standard deviation of each of the selected columns --> these will be used on the hisogram plots
View(field_data_summarized)
lm_LM_ANN
xlab("Short Canopy Axis")+
ylab("ANN")
#checking normality
ggplot(data = lm_LM_ANN)+
geom_histogram(residuals)+
xlab("Short Canopy Axis")+
ylab("ANN")
hist(lm_LM_ANN$residuals, nclass = 30,
+     main = "Distribution of the Residuals",
hist(lm_LM_ANN$residuals, nclass = 30,main = "Distribution of the Residuals",xlab = "Residuals")
#checking normality
ggplot(data = lm_LM_ANN)+
geom_histogram(residuals)+
xlab("Short Canopy Axis")+
ylab("ANN")
#checking normality
ggplot()+
geom_histogram(lm_LM_ANN$residuals)+
xlab("Short Canopy Axis")+
ylab("ANN")
#checking normality
ggplot(lm_LM_ANN, aes(residuals))+
geom_histogram()+
xlab("Short Canopy Axis")+
ylab("ANN")
#checking normality
ggplot(lm_LM_ANN, aes(residuals))+
geom_histogram()
lm_LM_ANN$R
lm_LM_ANN$residuals
#checking residuals#checking normality
ggplot(lm_LM_ANN, fill = residuals)+
geom_histogram()+
xlab("Short Canopy Axis")+
ylab("ANN")
#checking residuals#checking normality
ggplot(lm_LM_ANN, aes(x= lm_LM_ANN$residuals))+
geom_histogram()+
xlab("Short Canopy Axis")+
ylab("ANN")
xlab("Residuals")+
ylab("Frequency")
#checking residuals#checking normality
ggplot(lm_LM_ANN, aes(x= lm_LM_ANN$residuals))+
geom_histogram()+
labs("Distribution of Residuals for Short Canopy Axis vs. ANN")+
xlab("Residuals")+
ylab("Frequency")
hist(lm_LM_ANN$residuals, nclass = 30,main = "Distribution of the Residuals",xlab = "Residuals")
qqnorm(lm_LM_ANN$residuals)
#checking equal variance
ggplot(data = lm_LM_ANN, aes(x = fitted.values, y = residual))+
geom_plot(c(0,0))
#checking equal variance
ggplot(data = lm_LM_ANN, aes(x = fitted.values, y = residual))
#checking equal variance
ggplot(data = lm_LM_ANN, aes(x = fitted.values, y = residuals))
plot(lm_LM_ANN$residuals ~ lm_LM_ANN$fitted.values,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs. Fitted Values")
abline(0,0)
#checking equal variance
ggplot(data = lm_LM_ANN, aes(x = fitted.values, y = residuals))
#checking equal variance
ggplot(data = lm_LM_ANN)+
ggplot(aes(x = fitted.values, y = residuals))
#checking equal variance
ggplot(data = lm_LM_ANN)+
ggplot(x = fitted.values, y = residuals)
#checking equal variance
ggplot(data = lm_LM_ANN)+
ggplot(aes(x = fitted.values, y = residuals))
geom_point()
#checking equal variance
ggplot(data = lm_LM_ANN, aes(x = fitted.values, y = residuals))+
geom_point()
#checking equal variance
ggplot(data = lm_LM_ANN, aes(x = lm_LM_ANN$fitted.values, y = lm_LM_ANN$residuals))+
geom_point()
#checking equal variance
ggplot(data = lm_LM_ANN, aes(x = lm_LM_ANN$fitted.values, y = lm_LM_ANN$residuals))+
geom_point()+
geom_line(0,0)
#checking equal variance
ggplot(data = lm_LM_ANN, aes(x = lm_LM_ANN$fitted.values, y = lm_LM_ANN$residuals))+
geom_point()+
geom_line(aes(0,0))
#checking equal variance
ggplot(data = lm_LM_ANN, aes(x = lm_LM_ANN$fitted.values, y = lm_LM_ANN$residuals))+
geom_point()+
geom_plot(aes(0,0))
#checking equal variance
ggplot(data = lm_LM_ANN, aes(x = lm_LM_ANN$fitted.values, y = lm_LM_ANN$residuals))+
geom_point()+
geom_plot(0,0)
#checking equal variance
ggplot(data = lm_LM_ANN, aes(x = lm_LM_ANN$fitted.values, y = lm_LM_ANN$residuals))+
geom_point()+
geom_line(aes(0,0))
#checking equal variance
ggplot(data = lm_LM_ANN, aes(x = lm_LM_ANN$fitted.values, y = lm_LM_ANN$residuals))+
geom_point()+
geom_line(aes(x,y))
#checking equal variance
ggplot(data = lm_LM_ANN, aes(x = lm_LM_ANN$fitted.values, y = lm_LM_ANN$residuals))+
geom_point()+
geom_line(x=y)
#checking equal variance
ggplot(data = lm_LM_ANN, aes(x = lm_LM_ANN$fitted.values, y = lm_LM_ANN$residuals))+
geom_point()+
geom_abline(0,1)
geom_abline
?geom_abline
#checking equal variance
ggplot(data = lm_LM_ANN, aes(x = lm_LM_ANN$fitted.values, y = lm_LM_ANN$residuals))+
geom_point()+
geom_abline(intercept = 0, slope = 1)
plot(lm_LM_ANN$residuals ~ lm_LM_ANN$fitted.values,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs. Fitted Values")
abline(0,0)
#checking equal variance
ggplot(data = lm_LM_ANN, aes(x = lm_LM_ANN$fitted.values, y = lm_LM_ANN$residuals))+
geom_point()+
geom_abline(intercept = 0, slope = 0)
#checking equal variance
ggplot(data = lm_LM_ANN, aes(x = lm_LM_ANN$fitted.values, y = lm_LM_ANN$residuals))+
geom_point()+
geom_abline(intercept = 0, slope = 0)+
xlab("Fitted Values")+
ylab("Residuals")+
labs("Residuals vs. Fitted Values")
#checking equal variance
ggplot(data = lm_LM_ANN, aes(x = lm_LM_ANN$fitted.values, y = lm_LM_ANN$residuals))+
geom_point()+
geom_abline(intercept = 0, slope = 0)+
xlab("Fitted Values")+
ylab("Residuals")+
labs(title = "Residuals vs. Fitted Values")
#checking residuals#checking normality
ggplot(lm_LM_ANN, aes(x= lm_LM_ANN$residuals))+
geom_histogram()+
labs(title = "Distribution of Residuals for Short Canopy Axis vs. ANN")+
xlab("Residuals")+
ylab("Frequency")
#checking equal variance
ggplot(data = lm_LM_ANN, aes(x = lm_LM_ANN$fitted.values, y = lm_LM_ANN$residuals))+
geom_point()+
geom_abline(intercept = 0, slope = 0)+
xlab("Fitted Values")+
ylab("Residuals")+
labs(title = "Residuals vs. Fitted Values")
plot(lm_ANN_Canopy_short$residuals ~ lm_ANN_Canopy_short$fitted.values,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs. Fitted Values for ANN and SCA")
abline(0,0)
#plotting the linear model in ggplot for SCA, lineaerity condition is not well met
ggplot(data = fixed_field_data_processed_NN, (aes(x=Canopy_short, y=ANN)))+
geom_smooth(method='lm')+
geom_point()+
xlab("Short Canopy Axis")+
ylab("ANN")
plot(fixed_field_data_processed_NN$Canopy_short, fixed_field_data_processed_NN$ANN, xlab = "Short Canopy Axis", ylab = "ANN")
lm_ANN_Canopy_short <- lm(fixed_field_data_processed_NN$ANN ~ fixed_field_data_processed_NN$Canopy_short)
abline(lm_ANN_Canopy_short)
#checking residuals#checking normality
ggplot(lm_ANN_Canopy_short, aes(x= lm_ANN_Canopy_short$residuals))+
geom_histogram()+
labs(title = "Distribution of Residuals for Short Canopy Axis vs. ANN")+
xlab("Residuals")+
ylab("Frequency")
qqnorm(lm_ANN_Canopy_short$residuals)
#checking equal variance
ggplot(data = lm_ANN_Canopy_short, aes(x = lm_ANN_Canopy_short$fitted.values, y = lm_ANN_Canopy_short$residuals))+
geom_point()+
geom_abline(intercept = 0, slope = 0)+
xlab("Fitted Values")+
ylab("Residuals")+
labs(title = "Residuals vs. Fitted Values for ")
plot(lm_ANN_Canopy_short$residuals ~ lm_ANN_Canopy_short$fitted.values,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs. Fitted Values for ANN and SCA")
abline(0,0)
#plotting the linear model in ggplot for LCA
ggplot(data = fixed_field_data_processed_NN, (aes(x=Canopy_short, y=ANN)))+
geom_smooth(method='lm')+
geom_point()+
xlab("Short Canopy Axis")+
ylab("ANN")
plot(fixed_field_data_processed_NN$Canopy_short, fixed_field_data_processed_NN$ANN, xlab = "Short Canopy Axis", ylab = "ANN")
lm_ANN_Canopy_short <- lm(fixed_field_data_processed_NN$ANN ~ fixed_field_data_processed_NN$Canopy_short)
abline(lm_ANN_Canopy_short)
plot(lm_ANN_Canopy_short$residuals ~ lm_ANN_Canopy_short$fitted.values,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs. Fitted Values for ANN and SCA")
abline(0,0)
#checking equal variance
ggplot(data = lm_ANN_Canopy_short, aes(x = lm_ANN_Canopy_short$fitted.values, y = lm_ANN_Canopy_short$residuals))+
geom_point()+
geom_abline(intercept = 0, slope = 0)+
xlab("Fitted Values")+
ylab("Residuals")+
labs(title = "Residuals vs. Fitted Values for ANN and SCA")
plot(lm_ANN_Canopy_short$residuals ~ lm_ANN_Canopy_short$fitted.values,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs. Fitted Values for ANN and SCA")
abline(0,0)
#checking equal variance
ggplot(data = lm_ANN_Canopy_short, aes(x = lm_ANN_Canopy_short$fitted.values, y = lm_ANN_Canopy_short$residuals))+
geom_point()+
geom_abline(intercept = 0, slope = 0)+
xlab("Fitted Values")+
ylab("Residuals")+
labs(title = "Residuals vs. Fitted Values for ANN and SCA")
#checking normality of residuals
ggplot(lm_ANN_Canopy_short, aes(x= lm_ANN_Canopy_short$residuals))+
geom_histogram()+
labs(title = "Distribution of Residuals for Short Canopy Axis vs. ANN")+
xlab("Residuals")+
ylab("Frequency")
qqnorm(lm_ANN_Canopy_short$residuals)
#plotting the linear model in ggplot for LCA, lineaerity condition is not well met
ggplot(data = fixed_field_data_processed_NN, (aes(x=Canopy_long, y=ANN)))+
geom_smooth(method='lm')+
geom_point()+
xlab("Long Canopy Axis")+
ylab("ANN")
plot(fixed_field_data_processed_NN$Canopy_long, fixed_field_data_processed_NN$ANN, xlab = "Long Canopy Axis", ylab = "ANN")
lm_ANN_Canopy_long <- lm(fixed_field_data_processed_NN$ANN ~ fixed_field_data_processed_NN$Canopy_long)
abline(lm_ANN_Canopy_long)
#checking normality of residuals
ggplot(lm_ANN_Canopy_long, aes(x= lm_ANN_Canopy_long$residuals))+
geom_histogram()+
labs(title = "Distribution of Residuals for Long Canopy Axis vs. ANN")+
xlab("Residuals")+
ylab("Frequency")
qqnorm(lm_ANN_Canopy_long$residuals)
#checking equal variance
ggplot(data = lm_ANN_Canopy_long, aes(x = lm_ANN_Canopy_long$fitted.values, y = lm_ANN_Canopy_long$residuals))+
geom_point()+
geom_abline(intercept = 0, slope = 0)+
xlab("Fitted Values")+
ylab("Residuals")+
labs(title = "Residuals vs. Fitted Values for ANN and LCA")
summary(lm_ANN_Canopy_long)
slope.test(fixed_field_data_processed_NN$ANN, fixed_field_data_processed_NN$Canopy_long)
slope.test(fixed_field_data_processed_NN$ANN, fixed_field_data_processed_NN$Canopy_long,
method = 0)
slope.test(fixed_field_data_processed_NN$ANN, fixed_field_data_processed_NN$Canopy_long,
method = 0, test.value = 1)
summary(lm_ANN_Canopy_long)
summary(lm_ANN_Canopy_short)
#plotting the linear model in ggplot for SCA, lineaerity condition is not well met
ggplot(data = fixed_field_data_processed_NN, (aes(x=Canopy_short, y=ANN)))+
geom_smooth(method='lm')+
geom_point()+
xlab("Short Canopy Axis")+
ylab("ANN")
#Slope Test visible in summary of the lm
summary(lm_ANN_Canopy_short)
#Slope Test visible in summary of the lm
summary(lm_ANN_Canopy_long)
#plotting the linear model in ggplot for LCA, lineaerity condition is not well met
ggplot(data = fixed_field_data_processed_NN, (aes(x=Canopy_area, y=ANN)))+
geom_smooth(method='lm')+
geom_point()+
xlab("Canopy Area")+
ylab("ANN")
plot(fixed_field_data_processed_NN$Canopy_area, fixed_field_data_processed_NN$ANN, xlab = "Canopy Area", ylab = "ANN")
lm_ANN_Canopy_Area <- lm(fixed_field_data_processed_NN$ANN ~ fixed_field_data_processed_NN$Canopy_area)
abline(lm_ANN_Canopy_Area)
#checking normality of residuals
ggplot(lm_ANN_Canopy_Area, aes(x= lm_ANN_Canopy_Area$residuals))+
geom_histogram()+
labs(title = "Distribution of Residuals for Canopy Area vs. ANN")+
xlab("Residuals")+
ylab("Frequency")
qqnorm(lm_ANN_Canopy_Area$residuals)
#checking equal variance
ggplot(data = lm_ANN_Canopy_Area, aes(x = lm_ANN_Canopy_Area$fitted.values, y = lm_ANN_Canopy_Area$residuals))+
geom_point()+
geom_abline(intercept = 0, slope = 0)+
xlab("Fitted Values")+
ylab("Residuals")+
labs(title = "Residuals vs. Fitted Values for ANN and CA")
#Slope Test visible in summary of the lm
summary(lm_ANN_Canopy_Area)
#plotting the linear model in ggplot for CS, lineaerity condition is not well met
ggplot(data = fixed_field_data_processed_NN, (aes(x=Crown_spread, y=ANN)))+
geom_smooth(method='lm')+
geom_point()+
xlab("Crown Spread")+
ylab("ANN")
plot(fixed_field_data_processed_NN$Crown_spread, fixed_field_data_processed_NN$ANN, xlab = "Crown Spread", ylab = "ANN")
lm_ANN_Crown_Spread <- lm(fixed_field_data_processed_NN$ANN ~ fixed_field_data_processed_NN$Crown_spread)
abline(lm_ANN_Crown_Spread)
#checking normality of residuals
ggplot(lm_ANN_Crown_Spread, aes(x= lm_ANN_Crown_Spread$residuals))+
geom_histogram()+
labs(title = "Distribution of Residuals for Crown Spread vs. ANN")+
xlab("Residuals")+
ylab("Frequency")
qqnorm(lm_ANN_Crown_Spread$residuals)
#checking equal variance
ggplot(data = lm_ANN_Crown_Spread, aes(x = lm_ANN_Crown_Spread$fitted.values, y = lm_ANN_Crown_Spread$residuals))+
geom_point()+
geom_abline(intercept = 0, slope = 0)+
xlab("Fitted Values")+
ylab("Residuals")+
labs(title = "Residuals vs. Fitted Values for ANN and CS")
#Slope Test visible in summary of the lm
summary(lm_ANN_Crown_Spread)
#plotting the linear model in ggplot for DBH_ag, lineaerity condition is not well met
ggplot(data = fixed_field_data_processed_NN, (aes(x=DBH_ag, y=ANN)))+
geom_smooth(method='lm')+
geom_point()+
xlab("Crown Spread")+
ylab("ANN")
plot(fixed_field_data_processed_NN$DBH_ag, fixed_field_data_processed_NN$ANN, xlab = "Aggregated DBH", ylab = "ANN")
lm_ANN_DBH_ag <- lm(fixed_field_data_processed_NN$ANN ~ fixed_field_data_processed_NN$DBH_ag)
abline(lm_ANN_DBH_ag)
#checking normality of residuals
ggplot(lm_ANN_DBH_ag, aes(x= lm_ANN_DBH_ag$residuals))+
geom_histogram()+
labs(title = "Distribution of Residuals for Aggregated DBH vs. ANN")+
xlab("Residuals")+
ylab("Frequency")
qqnorm(lm_ANN_DBH_ag$residuals)
#checking equal variance
ggplot(data = lm_ANN_DBH_ag, aes(x = lm_ANN_DBH_ag$fitted.values, y = lm_ANN_DBH_ag$residuals))+
geom_point()+
geom_abline(intercept = 0, slope = 0)+
xlab("Fitted Values")+
ylab("Residuals")+
labs(title = "Residuals vs. Fitted Values for ANN and Aggregated DBH")
#Slope Test visible in summary of the lm
summary(lm_ANN_DBH_ag)
ggplot(river_buffer_LM)+
geom_sf()
ggplot(river_buffer_LC)+
geom_sf()
ggplot(river_buffer_SD)+
geom_sf()
#Ripley's K for LM with Buffer River 20 m
LM_win_buffer <- as.owin(river_buffer_LM)
LM_ppp_buffer <- as.ppp(st_coordinates(LM_fixed_field_data_processed_sf), W = LM_win_buffer) #creating the poisson point pattern for lm
plot(LM_ppp_buffer, pch = 16, cex = 0.5)
LM_k_buffer <- Kest(LM_ppp_buffer, correction = "Ripley")
plot(LM_k_buffer, main=NULL, las=1, legendargs=list(cex=0.8, xpd=TRUE)) #legend inside of the plot
#Ripley's K for SD with Convex Hull
SD_win_convex <- as.owin(river_SD_convex_hull)
SD_ppp <- as.ppp(st_coordinates(SD_fixed_field_data_processed_sf), W = SD_win_convex) #creating the poisson point pattern for lm
plot(SD_ppp, pch = 16, cex = 0.5)
SD_k <- Kest(SD_ppp, correction = "Ripley")
plot(SD_k, main=NULL, las=1, legendargs=list(cex=0.8, xpd=TRUE)) #legend inside of the plot
#Ripley's K for SD with Buffer River 20 m
SD_win_buffer <- as.owin(river_buffer_SD)
SD_ppp_buffer <- as.ppp(st_coordinates(SD_fixed_field_data_processed_sf), W = SD_win_buffer) #creating the poisson point pattern for lm
plot(SD_ppp_buffer, pch = 16, cex = 0.5)
SD_k_buffer <- Kest(SD_ppp_buffer, correction = "Ripley")
plot(SD_k_buffer, main=NULL, las=1, legendargs=list(cex=0.8, xpd=TRUE)) #legend inside of the plot
