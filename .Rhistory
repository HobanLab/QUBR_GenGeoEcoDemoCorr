MC_local.df <- as.data.frame(MC_local)
fixed_field_data_processed_NN_UTM$p  <- MC_local.df$`Pr(folded) Sim`
MC_local <- localmoran_perm(fixed_field_data_processed_NN_UTM$Canopy_short, lw, nsim = 9999, alternative = "greater")
moran.plot(MC_local)
#turning river polygon into multipoints and then into a raster for using them to calculate the distances
river_SD_trans_points <- st_cast(river_SD_trans, "MULTIPOINT") #turns the polyline of the river into a multipoint object
river_SD_trans_point_raster <- st_rasterize(river_SD_trans_points) #create raster of lake edge points
plot(river_SD_trans_point_raster)
river_buffer_SD_points <- st_cast(river_buffer_SD, "MULTIPOINT") #turns the polyline of the river buffer into a multipoint object
river_buffer_SD_point_raster <- st_rasterize(river_buffer_SD_points) #create raster of lake edge points
plot(river_buffer_SD_point_raster)
#making a stars object of the distances of each cell in the buffer raster from the river edge points
river_buffer_SD_point_raster[is.na(river_buffer_SD_point_raster[])] <- 0  #making sure the points that are not the river buffer have a 0 value
dist_near_river_buffer_SD <- dist_to_nearest(river_buffer_SD_point_raster, river_SD_trans_points, progress = T) #creating a raster of the distances of each cell in the buffer raster to the multipoints on the river polygon, this took an hour to run
dist_near_river_buffer_SD_inverse <- 1/dist_near_river_buffer_SD #creating the inverse of the distance raster so that the higher values are closer to the river and the values are between 0-1
plot(dist_near_river_buffer_SD_inverse)
#creating a raster with assigned values of 1 to cells within 30 m of the river edge and 1/distance to the cells outside to turn the distances into values 0-1
dist_near_river_buffer_SD_inverse <- dist_near_river_buffer_SD %>% #creating a new stars object with new defined values for distance
st_as_sf() %>% #converting the stars to a shapefile
mutate(d = case_when(d <= 60 ~ 1,
d > 1 ~ 1/d)) %>% #assigning cells less than 30 m away from rivers edge with value of 1 and taking 1/distance for all other cells
st_rasterize() #convert the shapefile into a raster
plot(dist_near_river_buffer_SD_inverse)
#assigning average nearest neighbor values for the entire population of trees
ann.p_SD <- mean(nndist(SD_ppp, k=1))
ann.p_SD
#simulation to create a list of ANN from randomly placed points
n <- 566L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(SD_fixed_field_data_processed_sf), win = river_SD_convex_hull) #river_buffer_LM  #river_LM_trans. #river_LM_convex_hull
ann.r[i] <- mean(nndist(rand.p, k=1)) #for each simulated random distribution of points it calculates the mean ANN across all of the trees
} #for the length of the number of points at LM, it assigns a random point within the convex hull window
plot(rand.p)
#creating a histogram of the ANN Simulation Results
as_tibble(ann.r) %>%  #turns the list of ann values from the simulations of random points and turns it into a tibble/dataframe
ggplot()+
geom_histogram(aes(x = value), fill = "dodgerblue1", color = "black", bins = 50) +
xlim(range(ann.p, ann.r)) + #sets the limit of the xaxis to encompass the ANN for our trees and histogram of ANNs from the simulation
geom_vline(xintercept=ann.p, col = "red") + #adds a verticle line of our tree'\s' ANN
xlab("ANN")+
theme_classic()
ggplot()+
geom_sf(data=rand.p)+
geom_points(data=SD_fixed_field_data_processed_sf)
rand.p
ggplot()+
geom_sf(data=st_as_sf(rand.p))+
geom_points(data=SD_fixed_field_data_processed_sf)
ggplot()+
geom_sf(data=st_as_sf(rand.p))+
geom_point(data=SD_fixed_field_data_processed_sf)
#adding the UTM 12 crs to rand.p
rand.p.crs <- rand.p %>%
st_as_sf()%>%
st_set_crs(26912)
#plotting the randomly generated points, tree points, and probability/distance raster
ggplot()+
geom_stars(data=river_SD_trans)+ #plotting the river edge raster
geom_sf(data=SD_fixed_field_data_processed_sf, aes(col = "red"))+ #plotting the tree points
geom_sf(data=rand.p.crs, fill = NA) #plotting the random points
#plotting the randomly generated points, tree points, and probability/distance raster
ggplot()+
geom_sf(data=river_SD_trans)+ #plotting the river edge raster
geom_sf(data=SD_fixed_field_data_processed_sf, aes(col = "red"))+ #plotting the tree points
geom_sf(data=rand.p.crs, fill = NA) #plotting the random points
#creating a histogram of the ANN Simulation Results
as_tibble(ann.r) %>%  #turns the list of ann values from the simulations of random points and turns it into a tibble/dataframe
ggplot()+
geom_histogram(aes(x = value), fill = "dodgerblue1", color = "black", bins = 50) +
xlim(range(ann.p, ann.r)) + #sets the limit of the xaxis to encompass the ANN for our trees and histogram of ANNs from the simulation
geom_vline(xintercept=ann.p, col = "red") + #adds a verticle line of our tree'\s' ANN
xlab("ANN")+
theme_classic()
#ANN analysis controlling for river
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(SD_fixed_field_data_processed_sf), f = as.im(river_SD_trans_point_raster))
ann.r[i] <- mean(nndist(rand.p, k=1)) #for each simulated random distribution of points it calculates the mean ANN across all of the trees
} #for the length of the number of points at LM, it assigns a random point on top of the river's edge while controlling for the river's edge
#ANN analysis controlling for river
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(SD_fixed_field_data_processed_sf), f = as.im(river_SD_trans_point_raster))
ann.r[i] <- mean(nndist(rand.p, k=1)) #for each simulated random distribution of points it calculates the mean ANN across all of the trees
} #for the length of the number of points at LM, it assigns a random point on top of the river's edge while controlling for the river's edge
library(tidyverse)
library(moments) # for calculating the moments of each variable
library(sf) # for plotting spatial objects
library(smatr)
library(ggpmisc)
library(PMCMRplus) # for Dunn test
library(geomtextpath) # for PCA graphing
library(spatstat) # to run the Ripley's K function: Kest
library(stars) # for sf_rasterize function
library(raster) #to use crop
library(starsExtra) #to use dist_to_nearest
library(geostatsp)
library(tmaptools)
fixed_field_data_processed <- read.csv("./analyses/fixed_field_data_processed.csv") #imports the csv created from analyzing_morpho_data_cleaned.R
#upload river shapefile and filter out polygons for each population
rivers <- st_read("./data/QUBR Rivers and Trees.kml", "Rivers", crs = 4326)
rivers_2d <- st_zm(rivers, drop = T) #we had a z dimension with max and min, so we got rid of it because it was giving us weird errors and disrupting later statistics
river_LC <- filter(rivers_2d, Name == "River LC")
river_SD <- filter(rivers_2d, Name == "River SD")
river_LM <- filter(rivers_2d, Name == "LM River")
#changing the coordinate reference system of the river polygons to be equal area projection (UTM 12N), uses meters as distance measurement
river_LM_trans <- st_transform(river_LM, crs = 26912)
river_LC_trans <- st_transform(river_LC, crs = 26912)
river_SD_trans <- st_transform(river_SD, crs = 26912)
river_buffer_LM<- st_buffer(river_LM_trans, 200) #200 m buffer
ggplot(river_buffer_LM)+
geom_sf()
river_buffer_LC<- st_buffer(river_LC_trans, 230) #230 m buffer
ggplot(river_buffer_LC)+
geom_sf()
river_buffer_SD<- st_buffer(river_SD_trans, 120) #120 m buffer
ggplot(river_buffer_SD)+
geom_sf()
LM_fixed_field_data_processed <- fixed_field_data_processed %>%
filter(Locality == "LM")
LC_fixed_field_data_processed <- fixed_field_data_processed %>%
filter(Locality == "LC")
SD_fixed_field_data_processed <- fixed_field_data_processed %>%
filter(Locality == "SD")
#ANN analysis controlling for river
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(SD_fixed_field_data_processed_sf),
f = as.im(dist_near_river_buffer_SD_inverse)) #dist_near_river_buffer_LM_inverse #forcewin = T, win=as.owin(river_LM_convex_hull)
ann.r[i] <- mean(nndist(rand.p, k=1)) #for each simulated random distribution of points it calculates the mean ANN across all of the trees
} #for the length of the number of points at LM, it assigns a random point within the distance raster while controlling for distance to the river's edge
#ANN analysis controlling for river
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(SD_fixed_field_data_processed_sf), f = as.im(river_SD_trans_point_raster))
ann.r[i] <- mean(nndist(rand.p, k=1)) #for each simulated random distribution of points it calculates the mean ANN across all of the trees
} #for the length of the number of points at LM, it assigns a random point on top of the river's edge while controlling for the river's edge
library(tidyverse)
library(moments) # for calculating the moments of each variable
library(sf) # for plotting spatial objects
library(smatr)
library(ggpmisc)
library(PMCMRplus) # for Dunn test
library(geomtextpath) # for PCA graphing
library(spatstat) # to run the Ripley's K function: Kest
library(tidyverse)
library(moments) # for calculating the moments of each variable
library(sf) # for plotting spatial objects
library(smatr)
library(ggpmisc)
library(PMCMRplus) # for Dunn test
library(geomtextpath) # for PCA graphing
library(spatstat) # to run the Ripley's K function: Kest
library(stars) # for sf_rasterize function
library(raster) #to use crop
library(starsExtra) #to use dist_to_nearest
library(geostatsp)
library(tmaptools)
fixed_field_data_processed <- read.csv("./analyses/fixed_field_data_processed.csv") #imports the csv created from analyzing_morpho_data_cleaned.R
#upload river shapefile and filter out polygons for each population
rivers <- st_read("./data/QUBR Rivers and Trees.kml", "Rivers", crs = 4326)
rivers_2d <- st_zm(rivers, drop = T) #we had a z dimension with max and min, so we got rid of it because it was giving us weird errors and disrupting later statistics
river_LC <- filter(rivers_2d, Name == "River LC")
river_SD <- filter(rivers_2d, Name == "River SD")
river_LM <- filter(rivers_2d, Name == "LM River")
#changing the coordinate reference system of the river polygons to be equal area projection (UTM 12N), uses meters as distance measurement
river_LM_trans <- st_transform(river_LM, crs = 26912)
river_LC_trans <- st_transform(river_LC, crs = 26912)
river_SD_trans <- st_transform(river_SD, crs = 26912)
river_buffer_LM<- st_buffer(river_LM_trans, 200) #200 m buffer
ggplot(river_buffer_LM)+
geom_sf()
river_buffer_LC<- st_buffer(river_LC_trans, 230) #230 m buffer
ggplot(river_buffer_LC)+
geom_sf()
river_buffer_SD<- st_buffer(river_SD_trans, 120) #120 m buffer
ggplot(river_buffer_SD)+
geom_sf()
LM_fixed_field_data_processed <- fixed_field_data_processed %>%
filter(Locality == "LM")
LC_fixed_field_data_processed <- fixed_field_data_processed %>%
filter(Locality == "LC")
SD_fixed_field_data_processed <- fixed_field_data_processed %>%
filter(Locality == "SD")
#turn the BCS polygon into a shapefile and visualize its outline
BCS_polygon <- read_sf("./data/Shapefiles/BCS_Polygon/bcs_entidad.shp")
BCS_polygon <- st_as_sf(BCS_polygon)
plot(BCS_polygon$geometry)
#creating a shapefile of all points with lat lon coordinates in WGS 1984
fixed_field_data_processed_sf <- st_as_sf(fixed_field_data_processed,
coords = c("long", "lat"), crs = 4326)
#creating a transformed shapefile with UTM 12 N an equal area projection
fixed_field_data_processed_sf_transformed <- st_transform(fixed_field_data_processed_sf, crs = 26912)
#creating BCS boundary shapefile, turning sf of all points into sfc
fixed_field_data_processed_sf <- fixed_field_data_processed_sf_transformed %>%
st_as_sfc()
#creating a boundry box with the UTM 12 N min and max lat lon values and then turning it into a simple feature geometry
fixed_field_data_processed_box <- fixed_field_data_processed_sf_transformed %>%
st_bbox %>%
st_as_sfc()
#creating LM boundary shapefile, turning sf of all points into sfc
LM_fixed_field_data_processed_sf <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "LM") %>%
st_as_sfc()
#creating a boundry box of LM with the UTM 12 N min and max lat lon values and then turning it into a simple feature geometry
LM_fixed_field_data_processed_box <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "LM") %>%
st_bbox %>%
st_as_sfc()
#finding minimum and maximum lat and long values for LC
LC_min_all_locality_long <- min(LC_fixed_field_data_processed$long)#*1.0002
LC_max_all_locality_long <- max(LC_fixed_field_data_processed$long)# - (max(LM_fixed_field_data_processed$long) *.0002)
LC_min_all_locality_lat <- min(LC_fixed_field_data_processed$lat)#*1.002
LC_max_all_locality_lat <- max(LC_fixed_field_data_processed$lat) #- (max(LM_fixed_field_data_processed$lat)*.002)
#creating LC boundary shapefile, turning sf of all points into sfc
LC_fixed_field_data_processed_sf <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "LC") %>%
st_as_sfc()
#creating a boundry box of LC with the UTM 12 N min and max lat lon values and then turning it into a simple feature geometry
LC_fixed_field_data_processed_box <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "LC") %>%
st_bbox %>%
st_as_sfc()
#creating SD boundary shapefile, turning sf of all points into sfc
SD_fixed_field_data_processed_sf <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "SD") %>%
st_as_sfc()
#creating a boundry box of SD with the UTM 12 N min and max lat lon values and then turning it into a simple feature geometry
SD_fixed_field_data_processed_box <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "SD") %>%
st_bbox %>%
st_as_sfc()
#### Creating Convex Hulls using tree points of each population ####
river_LM_convex_hull <- st_convex_hull(st_union(LM_fixed_field_data_processed_sf)) #LM_fixed_field_data_processed_sf
ggplot(river_LM_convex_hull)+
geom_sf()
river_LC_convex_hull <- st_convex_hull(st_union(LC_fixed_field_data_processed_sf)) #LM_fixed_field_data_processed_sf
ggplot(river_LC_convex_hull)+
geom_sf()
river_SD_convex_hull <- st_convex_hull(st_union(SD_fixed_field_data_processed_sf)) #LM_fixed_field_data_processed_sf
ggplot(river_SD_convex_hull)+
geom_sf()
#Ripley's K for all points
win <- as.owin(fixed_field_data_processed_box) #turning the box into a window
#assigning average nearest neighbor values for the entire population of trees
ann.p_SD <- mean(nndist(SD_ppp, k=1))
ann.p_SD
#simulation to create a list of ANN from randomly placed points
n <- 566L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(SD_fixed_field_data_processed_sf), win = river_SD_convex_hull) #river_buffer_LM  #river_LM_trans. #river_LM_convex_hull
ann.r[i] <- mean(nndist(rand.p, k=1)) #for each simulated random distribution of points it calculates the mean ANN across all of the trees
} #for the length of the number of points at LM, it assigns a random point within the convex hull window
plot(rand.p)
#adding the UTM 12 crs to rand.p
rand.p.crs <- rand.p %>%
st_as_sf()%>%
st_set_crs(26912)
#plotting the randomly generated points, tree points, and probability/distance raster
ggplot()+
geom_sf(data=river_SD_trans)+ #plotting the river edge raster
geom_sf(data=SD_fixed_field_data_processed_sf, aes(col = "red"))+ #plotting the tree points
geom_sf(data=rand.p.crs, fill = NA) #plotting the random points
#creating a histogram of the ANN Simulation Results
as_tibble(ann.r) %>%  #turns the list of ann values from the simulations of random points and turns it into a tibble/dataframe
ggplot()+
geom_histogram(aes(x = value), fill = "dodgerblue1", color = "black", bins = 50) +
xlim(range(ann.p, ann.r)) + #sets the limit of the xaxis to encompass the ANN for our trees and histogram of ANNs from the simulation
geom_vline(xintercept=ann.p, col = "red") + #adds a verticle line of our tree'\s' ANN
xlab("ANN")+
theme_classic()
#calculating pseudo p-value for
total = 0  #set empty vaue
for (i in 1:length(ann.r)){ #loop that adds 1 to the value total if the simulated ANN value is less than our average value for our trees
if (ann.r[i] < ann.p){
total = total + 1
}
} #add number of values of in the random set of ANN values that are less than our mean ANN
(total / length(ann.r)) #the proportion of random ANNs that are less than our ANN
#turning river polygon into multipoints and then into a raster for using them to calculate the distances
river_SD_trans_points <- st_cast(river_SD_trans, "MULTIPOINT") #turns the polyline of the river into a multipoint object
river_SD_trans_point_raster <- st_rasterize(river_SD_trans_points) #create raster of lake edge points
plot(river_SD_trans_point_raster)
river_buffer_SD_points <- st_cast(river_buffer_SD, "MULTIPOINT") #turns the polyline of the river buffer into a multipoint object
river_buffer_SD_point_raster <- st_rasterize(river_buffer_SD_points) #create raster of lake edge points
plot(river_buffer_SD_point_raster)
dist_near_river_buffer_SD_inverse <- 1/dist_near_river_buffer_SD #creating the inverse of the distance raster so that the higher values are closer to the river and the values are between 0-1
#making a stars object of the distances of each cell in the buffer raster from the river edge points
river_buffer_SD_point_raster[is.na(river_buffer_SD_point_raster[])] <- 0  #making sure the points that are not the river buffer have a 0 value
dist_near_river_buffer_SD <- dist_to_nearest(river_buffer_SD_point_raster, river_SD_trans_points, progress = T) #creating a raster of the distances of each cell in the buffer raster to the multipoints on the river polygon, this took an hour to run
dist_near_river_buffer_SD_inverse <- 1/dist_near_river_buffer_SD #creating the inverse of the distance raster so that the higher values are closer to the river and the values are between 0-1
plot(dist_near_river_buffer_SD_inverse)
#creating a raster with assigned values of 1 to cells within 30 m of the river edge and 1/distance to the cells outside to turn the distances into values 0-1
dist_near_river_buffer_SD_inverse <- dist_near_river_buffer_SD %>% #creating a new stars object with new defined values for distance
st_as_sf() %>% #converting the stars to a shapefile
mutate(d = case_when(d <= 60 ~ 1,
d > 1 ~ 1/d)) %>% #assigning cells less than 30 m away from rivers edge with value of 1 and taking 1/distance for all other cells
st_rasterize() #convert the shapefile into a raster
plot(dist_near_river_buffer_SD_inverse)
#ANN analysis controlling for river
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(SD_fixed_field_data_processed_sf), f = as.im(river_SD_trans_point_raster))
ann.r[i] <- mean(nndist(rand.p, k=1)) #for each simulated random distribution of points it calculates the mean ANN across all of the trees
} #for the length of the number of points at LM, it assigns a random point on top of the river's edge while controlling for the river's edge
plot(rand.p)
#adding the UTM 12 crs to rand.p
rand.p.crs <- rand.p %>%
st_as_sf()%>%
st_set_crs(26912)
#plotting the randomly generated points, tree points, and probability/distance raster
ggplot()+
geom_stars(data=river_SD_trans_point_raster)+ #plotting the river edge raster
geom_sf(data=SD_fixed_field_data_processed_sf, aes(col = "red"))+ #plotting the tree points
geom_sf(data=rand.p.crs, fill = NA) #plotting the random points
#graphing the histogram of simulated ANN values and the mean ANN from our trees
as_tibble(ann.r) %>% #turning the ann.r vector as a tibble
ggplot()+
geom_histogram(aes(x = value), fill = "dodgerblue1", color = "black", bins = 50) +
xlim(range(ann.p, ann.r)) + #setting the range of the graph to include both the simulated ANN and our tree's mean ANN
geom_vline(xintercept=ann.p, col = "red") + #plotting our tree's mean ANN
xlab("ANN") +
theme_classic()
#ANN analysis controlling for river
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(SD_fixed_field_data_processed_sf),
f = as.im(dist_near_river_buffer_SD_inverse)) #dist_near_river_buffer_LM_inverse #forcewin = T, win=as.owin(river_LM_convex_hull)
ann.r[i] <- mean(nndist(rand.p, k=1)) #for each simulated random distribution of points it calculates the mean ANN across all of the trees
} #for the length of the number of points at LM, it assigns a random point within the distance raster while controlling for distance to the river's edge
plot(rand.p)
#adding the UTM 12 crs to rand.p
rand.p.crs <- rand.p %>%
st_as_sf()%>%
st_set_crs(26912)
#plotting the randomly generated points, tree points, and probability/distance raster
ggplot()+
geom_stars(data=dist_near_river_buffer_SD_inverse)+ #plotting the distance inverse raster
geom_sf(data=SD_fixed_field_data_processed_sf, aes(col = "red"))+ #plotting the tree points
geom_sf(data=rand.p.crs, fill = NA) #plotting the random points
#graphing the histogram of simulated ANN values and the mean ANN from our trees
as_tibble(ann.r) %>% #turning the ann.r vector as a tibble
ggplot()+
geom_histogram(aes(x = value), fill = "dodgerblue1", color = "black", bins = 50) +
xlim(range(ann.p, ann.r)) + #setting the range of the graph to include both the simulated ANN and our tree's mean ANN
geom_vline(xintercept=ann.p, col = "red") + #plotting our tree's mean ANN
xlab("ANN") +
theme_classic()
#ANN analysis controlling for river
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(SD_fixed_field_data_processed_sf), f = as.im(st_rasterize(river_SD_trans))) #assigns a random point for the number of trees in SD favoring placements in the river raster
ann.r[i] <- mean(nndist(rand.p, k=1)) #for each simulated random distribution of points it calculates the mean ANN across all of the trees
} #for the length of the number of points at LM, it assigns a random point within the raster while controlling for the river
plot(rand.p)
#adding the UTM 12 crs to rand.p
rand.p.crs <- rand.p %>%
st_as_sf()%>%
st_set_crs(26912)
#plotting the randomly generated points, tree points, and river raster
ggplot()+
geom_stars(data=st_rasterize(river_SD_trans))+ #plotting the river raster
geom_sf(data=SD_fixed_field_data_processed_sf, aes(col = "red"))+ #plotting the tree points
geom_sf(data=rand.p.crs, fill = NA) #plotting the random points
#graphing the histogram of simulated ANN values and the mean ANN from our trees
as_tibble(ann.r) %>% #turning the ann.r vector as a tibble
ggplot()+
geom_histogram(aes(x = value), fill = "dodgerblue1", color = "black", bins = 50) +
xlim(range(ann.p, ann.r)) + #setting the range of the graph to include both the simulated ANN and our tree's mean ANN
geom_vline(xintercept=ann.p, col = "red") + #plotting our tree's mean ANN
xlab("ANN") +
theme_classic()
#turning river polygon into multipoints and then into a raster for using them to calculate the distances
river_LM_trans_points <- st_cast(river_LM_trans, "MULTIPOINT") #turns the polyline of the river into a multipoint object
river_LM_trans_point_raster <- st_rasterize(river_LM_trans_points) #create raster of lake edge points
plot(river_LM_trans_point_raster)
river_buffer_LM_points <- st_cast(river_buffer_LM, "MULTIPOINT") #turns the polyline of the river buffer into a multipoint object
river_buffer_LM_point_raster <- st_rasterize(river_buffer_LM_points) #create raster of lake edge points
plot(river_buffer_LM_point_raster)
#making a stars object of the distances of each cell in the buffer raster from the river edge points
river_buffer_LM_point_raster[is.na(river_buffer_LM_point_raster[])] <- 0  #making sure the points that are not the river buffer have a 0 value
dist_near_river_buffer_LM <- dist_to_nearest(river_buffer_LM_point_raster, river_LM_trans_points, progress = T) #creating a raster of the distances of each cell in the buffer raster to the multipoints on the river polygon, this took an hour to run
dist_near_river_buffer_LM_inverse <- 1/dist_near_river_buffer_LM #creating the inverse of the distance raster so that the higher values are closer to the river and the values are between 0-1
plot(dist_near_river_buffer_LM_inverse)
#creating a raster with assigned values of 1 to cells within 30 m of the river edge and 1/distance to the cells outside to turn the distances into values 0-1
dist_near_river_buffer_LM_inverse <- dist_near_river_buffer_LM %>% #creating a new stars object with new defined values for distance
st_as_sf() %>% #converting the stars to a shapefile
mutate(d = case_when(d <= 30 ~ 1,
d > 1 ~ 1/d)) %>% #assigning cells less than 30 m away from rivers edge with value of 1 and taking 1/distance for all other cells
st_rasterize() #convert the shapefile into a raster
plot(dist_near_river_buffer_LM_inverse)
#ANN analysis controlling for river
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(LM_fixed_field_data_processed_sf), f = as.im(river_LM_trans_point_raster))
ann.r[i] <- mean(nndist(rand.p, k=1)) #for each simulated random distribution of points it calculates the mean ANN across all of the trees
} #for the length of the number of points at LM, it assigns a random point on top of the river's edge while controlling for the river's edge
plot(rand.p)
#adding the UTM 12 crs to rand.p
rand.p.crs <- rand.p %>%
st_as_sf()%>%
st_set_crs(26912)
#plotting the randomly generated points, tree points, and probability/distance raster
ggplot()+
geom_stars(data=river_LM_trans_point_raster)+ #plotting the river edge raster
geom_sf(data=LM_fixed_field_data_processed_sf, aes(col = "red"))+ #plotting the tree points
geom_sf(data=rand.p.crs, fill = NA) #plotting the random points
#graphing the histogram of simulated ANN values and the mean ANN from our trees
as_tibble(ann.r) %>% #turning the ann.r vector as a tibble
ggplot()+
geom_histogram(aes(x = value), fill = "dodgerblue1", color = "black", bins = 50) +
xlim(range(ann.p, ann.r)) + #setting the range of the graph to include both the simulated ANN and our tree's mean ANN
geom_vline(xintercept=ann.p, col = "red") + #plotting our tree's mean ANN
xlab("ANN") +
theme_classic()
#graphing the histogram of simulated ANN values and the mean ANN from our trees
as_tibble(ann.r) %>% #turning the ann.r vector as a tibble
ggplot()+
geom_histogram(aes(x = value), fill = "dodgerblue1", color = "black", bins = 50) +
xlim(range(ann.p, ann.r)) + #setting the range of the graph to include both the simulated ANN and our tree's mean ANN
geom_vline(xintercept=ann.p, col = "red") + #plotting our tree's mean ANN
xlab("ANN") +
theme_classic()
#ANN analysis controlling for river
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(LM_fixed_field_data_processed_sf), f = as.im(st_rasterize(river_LM_trans))) #dist_near_river_buffer_LM_inverse
ann.r[i] <- mean(nndist(rand.p, k=1)) #for each simulated random distribution of points it calculates the mean ANN across all of the trees
} #for the length of the number of points at LM, it assigns a random point within the raster while controlling for the river
plot(rand.p)
#adding the UTM 12 crs to rand.p
rand.p.crs <- rand.p %>%
st_as_sf()%>%
st_set_crs(26912)
#plotting the randomly generated points, tree points, and river raster
ggplot()+
geom_stars(data=st_rasterize(river_LM_trans))+ #plotting the river raster
geom_sf(data=LM_fixed_field_data_processed_sf, aes(col = "red"))+ #plotting the tree points
geom_sf(data=rand.p.crs, fill = NA) #plotting the random points
#graphing the histogram of simulated ANN values and the mean ANN from our trees
as_tibble(ann.r) %>% #turning the ann.r vector as a tibble
ggplot()+
geom_histogram(aes(x = value), fill = "dodgerblue1", color = "black", bins = 50) +
xlim(range(ann.p, ann.r)) + #setting the range of the graph to include both the simulated ANN and our tree's mean ANN
geom_vline(xintercept=ann.p, col = "red") + #plotting our tree's mean ANN
xlab("ANN") +
theme_classic()
#creating the image of the distance to river stars
dist_near_river_buffer_LM_inverse_im <- as.im(dist_near_river_buffer_LM_inverse)
#Alternative hypothesis, seeing if the distance to the river's edge influences the tree point placement
PPM1 <- ppm(Q = as.ppp(LM_fixed_field_data_processed_sf) ~ dist_near_river_buffer_LM_inverse_im) #as.im(dist_near_river_buffer_LM_inverse))
PPM1
#null hypothesis, no change in the trend of the points
PPM0 <- ppm(as.ppp(LM_fixed_field_data_processed_sf) ~ 1)
PPM0
#using a likelihood ratio test to compare the alternative and null models
anova(PPM0, PPM1, test="LRT")
#plotting the alternative model
plot(effectfun(PPM1, "dist_near_river_buffer_LM_inverse_im", se.fit = TRUE), main = "Distance to River of Las Matancitas",
ylab = "Quercus brandegeei Trees", xlab = "Distance to River", legend = FALSE)
ggplot()+
geom_function(PPM1)
ggplot()+
geom_function(data=PPM1)
PPM1
ggplot()+
geom_function(data=as.dataframe(PPM1))
as.dataframe
ggplot()+
geom_function(data=as.data.frame(PPM1))
ggplot()+
stat_function(data=as.data.frame(PPM1))
ggplot()+
stat_function(data=PPM1)
ggplot()+
stat_function(PPM1)
ggplot()+
stat_function(fun=PPM1)
ggplot()+
stat_function(fun=ppm(Q = as.ppp(LM_fixed_field_data_processed_sf) ~ dist_near_river_buffer_LM_inverse_im))
plot.plotppm(PPM1)
ggplot()+
stat_function(fun=effectfun(PPM1))
ggplot()+
stat_function(effectfun(PPM1))
ggplot()+
geom_function(fun=effectfun(PPM1))
ggplot()+
geom_function(effectfun(PPM1))
ggplot()+
geom_function(data=effectfun(PPM1))
effectfun(PPM1)
ggplot()+
geom_function(data=PPM1)
PPM1
#plotting the alternative model
plot(effectfun(PPM1, "dist_near_river_buffer_LM_inverse_im", se.fit = TRUE), main = "Distance to River of Las Matancitas",
ylab = "Quercus brandegeei Trees", xlab = "Distance to River", legend = FALSE)
#plotting the alternative model
plot(effectfun(PPM1, "dist_near_river_buffer_LM_inverse_im", se.fit = TRUE), main = "Distance to River of Las Matancitas",
ylab = "Quercus brandegeei Trees", xlab = "Distance to River", legend = FALSE)
