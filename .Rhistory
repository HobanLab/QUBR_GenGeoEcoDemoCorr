geom_sf(data = fixed_field_data_processed_sf, aes(color = Locality)) +
coord_sf(xlim = c(LM_min_all_locality_long, LM_max_all_locality_long),
ylim = c(LM_min_all_locality_lat, LM_max_all_locality_lat))+
theme_classic()
#creating LM boundary shapefile
LM_fixed_field_data_processed_sf <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "LM") %>%
st_as_sfc()
LM_fixed_field_data_processed_box <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "LM") %>%
st_bbox %>%
st_as_sfc()
#finding minimum and maximum lat and long values for LC
LC_min_all_locality_long <- min(LC_fixed_field_data_processed$long)#*1.0002
LC_max_all_locality_long <- max(LC_fixed_field_data_processed$long)# - (max(LM_fixed_field_data_processed$long) *.0002)
LC_min_all_locality_lat <- min(LC_fixed_field_data_processed$lat)#*1.002
LC_max_all_locality_lat <- max(LC_fixed_field_data_processed$lat) #- (max(LM_fixed_field_data_processed$lat)*.002)
#plotting the BCS LC polygon with the tree points
ggplot(data = BCS_polygon) +
geom_sf() +
geom_sf(data = fixed_field_data_processed_sf, aes(color = Locality)) +
coord_sf(xlim = c(LC_min_all_locality_long, LC_max_all_locality_long),
ylim = c(LC_min_all_locality_lat, LC_max_all_locality_lat))+
theme_classic()
#creating LC boundary shapefile
LC_fixed_field_data_processed_sf <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "LC") %>%
st_as_sfc()
LC_fixed_field_data_processed_box <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "LC") %>%
st_bbox %>%
st_as_sfc()
#finding minimum and maximum lat and long values for SD
SD_min_all_locality_long <- min(SD_fixed_field_data_processed$long)#*1.0002
SD_max_all_locality_long <- max(SD_fixed_field_data_processed$long)# - (max(LM_fixed_field_data_processed$long) *.0002)
SD_min_all_locality_lat <- min(SD_fixed_field_data_processed$lat)#*1.002
SD_max_all_locality_lat <- max(SD_fixed_field_data_processed$lat) #- (max(LM_fixed_field_data_processed$lat)*.002)
#plotting the BCS SD polygon with the tree points
ggplot(data = BCS_polygon) +
geom_sf() +
geom_sf(data = fixed_field_data_processed_sf, aes(color = Locality)) +
coord_sf(xlim = c(SD_min_all_locality_long, SD_max_all_locality_long),
ylim = c(SD_min_all_locality_lat, SD_max_all_locality_lat))+
theme_classic()
#creating SD boundary shapefile
SD_fixed_field_data_processed_sf <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "SD") %>%
st_as_sfc()
SD_fixed_field_data_processed_box <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "SD") %>%
st_bbox %>%
st_as_sfc()
#### Creating Convex Hulls ####
river_LM_convex_hull <- st_convex_hull(st_union(LM_fixed_field_data_processed_sf)) #LM_fixed_field_data_processed_sf
ggplot(river_LM_convex_hull)+
geom_sf()
river_LC_convex_hull <- st_convex_hull(st_union(LC_fixed_field_data_processed_sf)) #LM_fixed_field_data_processed_sf
ggplot(river_LC_convex_hull)+
geom_sf()
river_SD_convex_hull <- st_convex_hull(st_union(SD_fixed_field_data_processed_sf)) #LM_fixed_field_data_processed_sf
ggplot(river_SD_convex_hull)+
geom_sf()
#Ripley's K for all points
win <- as.owin(fixed_field_data_processed_box)
ppp <- as.ppp(st_coordinates(fixed_field_data_processed_sf), W = win) #creating the poisson point pattern for lm
plot(ppp, pch = 16, cex = 0.5)
K <- Kest(ppp, correction = "Ripley")
plot(K, main=NULL, las=1, legendargs=list(cex=0.8, xpd=TRUE)) #legend inside of the plot
#Ripley's K for LM
LM_win <- as.owin(LM_fixed_field_data_processed_box)
LM_ppp <- as.ppp(st_coordinates(LM_fixed_field_data_processed_sf), W = LM_win) #creating the poisson point pattern for lm
plot(LM_ppp, pch = 16, cex = 0.5)
LM_k <- Kest(LM_ppp, correction = "Ripley")
plot(LM_k, main=NULL, las=1, legendargs=list(cex=0.8, xpd=TRUE)) #legend inside of the plot
#Ripley's K for LM with Convex Hull
LM_win_convex <- as.owin(river_LM_convex_hull)
LM_ppp_convex <- as.ppp(st_coordinates(LM_fixed_field_data_processed_sf), W = LM_win_convex) #creating the poisson point pattern for lm
plot(LM_ppp_convex, pch = 16, cex = 0.5)
LM_k_convex <- Kest(LM_ppp_convex, correction = "Ripley")
plot(LM_k_convex, main=NULL, las=1, legendargs=list(cex=0.8, xpd=TRUE)) #legend inside of the plot
#Ripley's K for LM with Buffer River 20 m
LM_win_buffer <- as.owin(river_buffer_LM)
LM_ppp_buffer <- as.ppp(st_coordinates(LM_fixed_field_data_processed_sf), W = LM_win_buffer) #creating the poisson point pattern for lm
plot(LM_ppp_buffer, pch = 16, cex = 0.5)
LM_k_buffer <- Kest(LM_ppp_buffer, correction = "Ripley")
plot(LM_k_buffer, main=NULL, las=1, legendargs=list(cex=0.8, xpd=TRUE)) #legend inside of the plot
#Ripley's K for LC
LC_win <- as.owin(LC_fixed_field_data_processed_box)
LC_ppp <- as.ppp(st_coordinates(LC_fixed_field_data_processed_sf), W = LC_win) #creating the poisson point pattern for lm
plot(LC_ppp, pch = 16, cex = 0.5)
LC_k <- Kest(LC_ppp, correction = "Ripley")
plot(LC_k, main=NULL, las=1, legendargs=list(cex=0.8, xpd=TRUE)) #legend inside of the plot
#Ripley's K for LC with Convex Hull
LC_win_convex <- as.owin(river_LC_convex_hull)
LC_ppp <- as.ppp(st_coordinates(LC_fixed_field_data_processed_sf), W = LC_win_convex) #creating the poisson point pattern for lm
plot(LC_ppp, pch = 16, cex = 0.5)
LC_k <- Kest(LC_ppp, correction = "Ripley")
plot(LC_k, main=NULL, las=1, legendargs=list(cex=0.8, xpd=TRUE)) #legend inside of the plot
#Ripley's K for LC with Buffer River 20 m
LC_win_buffer <- as.owin(river_buffer_LC)
LC_ppp_buffer <- as.ppp(st_coordinates(LC_fixed_field_data_processed_sf), W = LC_win_buffer) #creating the poisson point pattern for lm
plot(LC_ppp_buffer, pch = 16, cex = 0.5)
LC_k_buffer <- Kest(LC_ppp_buffer, correction = "Ripley")
plot(LC_k_buffer, main=NULL, las=1, legendargs=list(cex=0.8, xpd=TRUE)) #legend inside of the plot
#Ripley's K for SD
SD_win <- as.owin(SD_fixed_field_data_processed_box)
SD_ppp <- as.ppp(st_coordinates(SD_fixed_field_data_processed_sf), W = SD_win) #creating the poisson point pattern for lm
plot(SD_ppp, pch = 16, cex = 0.5)
SD_k <- Kest(LC_ppp, correction = "Ripley")
plot(SD_k, main=NULL, las=1, legendargs=list(cex=0.8, xpd=TRUE)) #legend inside of the plot
#Ripley's K for SD with Convex Hull
SD_win_convex <- as.owin(river_SD_convex_hull)
SD_ppp <- as.ppp(st_coordinates(SD_fixed_field_data_processed_sf), W = SD_win_convex) #creating the poisson point pattern for lm
plot(SD_ppp, pch = 16, cex = 0.5)
SD_k <- Kest(SD_ppp, correction = "Ripley")
plot(SD_k, main=NULL, las=1, legendargs=list(cex=0.8, xpd=TRUE)) #legend inside of the plot
#Ripley's K for SD with Buffer River 20 m
SD_win_buffer <- as.owin(river_buffer_SD)
SD_ppp_buffer <- as.ppp(st_coordinates(SD_fixed_field_data_processed_sf), W = SD_win_buffer) #creating the poisson point pattern for lm
plot(SD_ppp_buffer, pch = 16, cex = 0.5)
SD_k_buffer <- Kest(SD_ppp_buffer, correction = "Ripley")
plot(SD_k_buffer, main=NULL, las=1, legendargs=list(cex=0.8, xpd=TRUE)) #legend inside of the plot
#test for LM
ann.p <- mean(nndist(LM_ppp, k=1))
ann.p
LM_ppp
LM_ppp
SD_fixed_field_data_processed_sf
length(LM_fixed_field_data_processed_sf)
ggplot()+
geom_sf(rand.p)+
geom_sf(river_LM_convex_hull)
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(LM_fixed_field_data_processed_sf), win = river_LM_convex_hull)
ann.r[i] <- mean(nndist(rand.p, k=1))
} #for the length of the number of points at LM, it assigns a random point within the convex hull window
ggplot()+
geom_sf(rand.p)+
geom_sf(river_LM_convex_hull)
ggplot()+
geom_sf(rand.p)+
geom_sf(river_LM_convex_hull)
ggplot()+
geom_sf(rand.p, aes(pch=16))+
geom_sf(river_LM_convex_hull)
ggplot()+
geom_sf(river_LM_convex_hull, aes(rand.p))
ggplot(river_LM_convex_hull, fill = rand.p)+
geom_sf()
ggplot()+
geom_sf(river_LM_convex_hull)+
geom_point(rand.p)
ggplot()+
geom_sf(river_LM_convex_hull, fill = LM_fixed_field_data_processed_sf)+
geom_point(rand.p)
rand.p
ggplot()+
geom_sf(river_LM_convex_hull, fill = )+
geom_point(rand.p, aes(x=rand.p$x, y= rand.p$y))
rand.p$y
rand.p$x
ggplot()+
geom_sf(river_LM_convex_hull)+
geom_point(rand.p, aes(x=rand.p$x, y = rand.p$y))
river_LM_convex_hull
ggplot(river_LM_convex_hull)+
geom_sf()+
geom_point(rand.p, aes(x=rand.p$x, y = rand.p$y))
ggplot()+
geom_sf(river_LM_convex_hull)+
geom_point(rand.p, aes(x=rand.p$x, y = rand.p$y))
rlang::last_trace()
ggplot()+
geom_sf(river_LM_convex_hull, aes(fill = "blue"))+
geom_point(rand.p, aes(x=rand.p$x, y = rand.p$y))
ggplot()+
geom_polygon(river_LM_convex_hull)+
geom_point(rand.p, aes(x=rand.p$x, y = rand.p$y))
river_LM_convex_hull
plot(rand.p)
ggplot()+
geom_point(rand.p, aes(x=rand.p$x, y = rand.p$y))
ggplot()+
geom_sf(rand.p, aes(x=rand.p$x, y = rand.p$y))
ggplot()+
geom_polygon(rand.p, aes(x=rand.p$x, y = rand.p$y))
ggplot()+
geom_polygon(rand.p, aes(x=rand.p$x, y = rand.p$y, fill = "blue"))
rlang::last_trace()
ggplot()+
aes(rand.p, aes(x=rand.p$x, y = rand.p$y, fill = "blue"))
aes(rand.p, aes(x=rand.p$x, y = rand.p$y)
plot(rand.p)
plot(rand.p)
hist(ann.r, main = NULL, las=1, breaks = 40, col = "light blue", xlim = range(ann.p, ann.r))
abline(v=ann.p, col = "red")
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(LM_fixed_field_data_processed_sf), win = river_LM_convex_hull)
ann.r[i] <- mean(nndist(rand.p, k=1))
} #for the length of the number of points at LM, it assigns a random point within the convex hull window
plot(rand.p)
hist(ann.r, main = NULL, las=1, breaks = 40, col = "light blue", xlim = range(ann.p, ann.r))
abline(v=ann.p, col = "red")
river_LM
plot(river_LM)
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(LM_fixed_field_data_processed_sf), win = river_LM)
ann.r[i] <- mean(nndist(rand.p, k=1))
} #for the length of the number of points at LM, it assigns a random point within the convex hull window
plot(rand.p)
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(LM_fixed_field_data_processed_sf), win = river_LM)
ann.r[i] <- mean(nndist(rand.p, k=1))
} #for the length of the number of points at LM, it assigns a random point within the convex hull window
plot(rand.p)
river_LM_trans
plot(river_LM_trans)
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(LM_fixed_field_data_processed_sf), win = river_LM_trans)
ann.r[i] <- mean(nndist(rand.p, k=1))
} #for the length of the number of points at LM, it assigns a random point within the convex hull window
plot(rand.p)
hist(ann.r, main = NULL, las=1, breaks = 40, col = "light blue", xlim = range(ann.p, ann.r))
abline(v=ann.p, col = "red")
ann.r
total = 0
total = 0
for (i in 1:length(ann.r)){
if (i > ann.p){
total += 1
total = 0
for (i in 1:length(ann.r)){
if (i > ann.p){
total =+ 1
}
}
total / length(ann.r)
(total / length(ann.r)) *100
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(LM_fixed_field_data_processed_sf), win = river_LM_trans)
ann.r[i] <- mean(nndist(rand.p, k=1))
} #for the length of the number of points at LM, it assigns a random point within the convex hull window
plot(rand.p)
hist(ann.r, main = NULL, las=1, breaks = 40, col = "light blue", xlim = range(ann.p, ann.r))
abline(v=ann.p, col = "red")
#calculating p-value for
total = 0
for (i in 1:length(ann.r)){
if (i > ann.p){
total =+ 1
}
}
(total / length(ann.r)) *100
ann.p
#calculating pseudo p-value for
total = 0  #set empty vaue
for (i in 1:length(ann.r)){
if (i < ann.p){
total =+ 1
}
} #add number of values of in the random set of ANN values that are
(total / length(ann.r)) *100
N.greater <- sum(ann.r > ann.p)
p <- min(N.greater + 1, n + 1 - N.greater) / (n +1)
p
#calculating pseudo p-value for
total = 0  #set empty vaue
for (i in 1:length(ann.r)){
if (i < ann.p){
total =+ 1
}
} #add number of values of in the random set of ANN values that are
total
length(ann.r)
ann.r
i in 1:length(ann.r)
1:length(ann.r)
#calculating pseudo p-value for
total = 0  #set empty vaue
for (i in 1:length(ann.r)){
if (ann.r[i] < ann.p){
total =+ 1
}
} #add number of values of in the random set of ANN values that are
(total / length(ann.r)) *100
ann.r[i]
ann.p
total = 0  #set empty vaue
for (i in 1:length(ann.r)){
if (ann.r[i] < ann.p){
total =+ 1
}
} #
total
#calculating pseudo p-value for
total = 0  #set empty vaue
for (i in 1:length(ann.r)){
if (ann.r[i] < ann.p){
total = total + 1
}
} #add number of values of in the random set of ANN values that are
total
(total / length(ann.r)) *100
(total / length(ann.r))
#to calculate 1 sided pseudo p-value
N.greater <- sum(ann.r > ann.p)
p <- min(N.greater + 1, n + 1 - N.greater) / (n +1)
p
N.greater + 1
n + 1 - N.greater
n +1
N.greater <- sum(ann.r > ann.p)
p <- min(N.greater, n - N.greater) / (n)
p
st_cast(river_LC_trans, "MULTIPOINT")
river_LC_trans_points <- st_cast(river_LC_trans, "MULTIPOINT")
river_LM_trans <- st_transform(river_LM, crs = 26912) #equal area projection, uses meters as distance measurement
river_LC_trans <- st_transform(river_LC, crs = 26912)
river_SD_trans <- st_transform(river_SD, crs = 26912)
river_LM_trans_points <- st_cast(river_LM_trans, "MULTIPOINT")
ggplot()+
geom_sf(river_LM_trans_points)
ggplot()+
geom_point(river_LM_trans_points)
plot(river_LM_trans_points)
Window(rand.p) <- river_LM_trans
#ANN analysis controlling for river
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(LM_fixed_field_data_processed_sf), f = river_LM_trans_points)
ann.r[i] <- mean(nndist(rand.p, k=1))
} #for the length of the number of points at LM, it assigns a random point within the convex hull window
plot(rand.p)
Window(rand.p) <- river_LM_trans
river_LM_trans_points
r <- raster(1)
r <- rasterize(river_LM_trans_points, r)
st_rasterize(river_LM_trans_points)
library(stars)
library(stars)
st_rasterize(river_LM_trans_points)
ggplot()+
geom_raster(river_LM_trans_points)
ggplot(river_LM_trans_points, aes())+
geom_raster()
ggplot(river_LM_trans_points)+
geom_raster()
#ANN analysis controlling for river
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(LM_fixed_field_data_processed_sf), f = river_LM_trans_points)
ann.r[i] <- mean(nndist(rand.p, k=1))
} #for the length of the number of points at LM, it assigns a random point within the convex hull window
river_LM_trans_points
river_LM_trans_point_raster <- st_rasterize(river_LM_trans_points)
#ANN analysis controlling for river
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(LM_fixed_field_data_processed_sf), f = river_LM_trans_point_raster)
ann.r[i] <- mean(nndist(rand.p, k=1))
} #for the length of the number of points at LM, it assigns a random point within the convex hull window
typeof(river_LM_trans_point_raster)
class(river_LM_trans_point_raster)
ggplot(river_LM_trans_points, aes(x=x, y=y))+
geom_raster()
river_LM_trans_points
river_LM_trans_point_raster <- st_rasterize(river_LM_trans_points)
ggplot(river_LM_trans_point_raster, aes(x=, y=y))+
geom_raster()
river_LM_trans_point_raster
ggplot()+
geom_raster(river_LM_trans_point_raster)
ggplot()+
geom_raster(river_LM_trans_point_raster, aes(x=x, y=y))
plot(river_LM_trans_point_raster)
#ANN analysis controlling for river
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(LM_fixed_field_data_processed_sf), f = river_LM_trans_point_raster)
ann.r[i] <- mean(nndist(rand.p, k=1))
} #for the length of the number of points at LM, it assigns a random point within the convex hull window
as.im(river_LM_trans_point_raster)
#ANN analysis controlling for river
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(LM_fixed_field_data_processed_sf), f = as.im(river_LM_trans_point_raster))
ann.r[i] <- mean(nndist(rand.p, k=1))
} #for the length of the number of points at LM, it assigns a random point within the convex hull window
plot(rand.p)
hist(ann.r, main = NULL, las=1, breaks = 40, col = "light blue", xlim = range(ann.p, ann.r))
abline(v=ann.p, col = "red")
Window(rand.p) <- river_LC_trans
Window(rand.p) <- Window(river_LC_trans)
Window(rand.p) <- river_LC_trans
Window(rand.p) <- as.Owin(river_LC_trans)
Window(rand.p) <- as.owin(river_LC_trans)
plot(rand.p)
r <- raster(1)
river_LM_trans_point_raster <- st_rasterize(river_LM_trans_points)
as.im(river_LM_trans_point_raster)
plot(river_LM_trans_point_raster)
plot(as.im(river_LM_trans_point_raster))
#ANN analysis controlling for river
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(LM_fixed_field_data_processed_sf), f = as.im(river_LM_trans_point_raster))
ann.r[i] <- mean(nndist(rand.p, k=1))
} #for the length of the number of points at LM, it assigns a random point within the convex hull window
plot(rand.p)
#ANN analysis controlling for river
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(LM_fixed_field_data_processed_sf), win = river_LM_convex_hull,
f = as.im(river_LM_trans_point_raster))
ann.r[i] <- mean(nndist(rand.p, k=1))
} #for the length of the number of points at LM, it assigns a random point within the convex hull window
plot(rand.p)
Window(rand.p) <- as.owin(river_LM_trans)
plot(rand.p)
plot(LM_fixed_field_data_processed)
plot(rand.p)
ggplot()+
geom_sf(LM_fixed_field_data_processed)+
geom_sf(river_LM_trans)
ggplot()+
geom_sf(LM_fixed_field_data_processed)+
geom_sf(river_LM_trans)
rlang::last_trace()
LM_fixed_field_data_processed
ggplot()+
geom_point(LM_fixed_field_data_processed_sf)+
geom_sf(river_LM_trans)
ggplot()+
geom_sf(LM_fixed_field_data_processed_sf)+
geom_sf(river_LM_trans)
ggplot(river_LM_trans)+
geom_sf(LM_fixed_field_data_processed_sf)+
geom_sf(river_LM_trans)
river_LM_trans
plot(LM_fixed_field_data_processed_sf)
#ANN analysis controlling for river
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(LM_fixed_field_data_processed_sf), win = river_LM_convex_hull,
f = as.im(river_LM_trans_point_raster))
ann.r[i] <- mean(nndist(rand.p, k=1))
} #for the length of the number of points at LM, it assigns a random point within the convex hull window
plot(rand.p)
Window(rand.p) <- as.owin(river_LM_trans)
plot(rand.p)
hist(ann.r, main = NULL, las=1, breaks = 40, col = "light blue", xlim = range(ann.p, ann.r))
abline(v=ann.p, col = "red")
#calculating pseudo p-value for
total = 0  #set empty vaue
for (i in 1:length(ann.r)){
if (ann.r[i] < ann.p){
total = total + 1
}
} #add number of values of in the random set of ANN values that are less than our mean ANN
(total / length(ann.r)) #the proportion of random ANNs that are less than our ANN
PPM1 <- ppm(LM_fixed_field_data_processed_sf ~ as.im(river_LM_trans_point_raster))
PPM1 <- ppm(LM_fixed_field_data_processed_sf ~ river_LM_trans_point_raster)
LM_fixed_field_data_processed_sf
PPM1 <- ppm(LM_fixed_field_data_processed_sf ~ river_LM_trans_point_raster)
plot(LM_fixed_field_data_processed_sf)
PPM1 <- ppm(LM_fixed_field_data_processed_sf ~ river_LM_trans_point_raster)
PPM1 <- ppm(Q= LM_fixed_field_data_processed_sf, trend = river_LM_trans_point_raster)
PPM1 <- ppm(LM_fixed_field_data_processed_sf, trend = river_LM_trans_point_raster)
PPM1 <- ppm(Q= LM_fixed_field_data_processed_sf, trend = river_LM_trans_point_raster)
LM_fixed_field_data_processed_sf
PPM1 <- ppm(Q= as.ppp(LM_fixed_field_data_processed_sf), trend = river_LM_trans_point_raster)
PPM1 <- ppm(as.ppp(LM_fixed_field_data_processed_sf) ~river_LM_trans_point_raster)
PPM1 <- ppm(as.ppp(LM_fixed_field_data_processed_sf) ~ as.im(river_LM_trans_point_raster))
PPM1 <- ppm(as.ppp(LM_fixed_field_data_processed_sf) ~ as.im(river_LM_trans_point))
PPM1 <- ppm(as.ppp(LM_fixed_field_data_processed_sf) ~ river_LM_trans_point)
river_LM_trans_point
PPM1 <- ppm(as.ppp(LM_fixed_field_data_processed_sf) ~ river_LM_trans_points)
PPM1 <- ppm(as.ppp(LM_fixed_field_data_processed_sf) ~ as.im(river_LM_trans_points))
PPM1 <- ppm(as.ppp(LM_fixed_field_data_processed_sf) ~ log(river_LM_trans_points))
#test for LM
ann.p <- mean(nndist(LM_ppp, k=1))
ann.p
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(LM_fixed_field_data_processed_sf), win = river_LM_convex_hull) #river_LM_trans
ann.r[i] <- mean(nndist(rand.p, k=1))
} #for the length of the number of points at LM, it assigns a random point within the convex hull window
plot(rand.p)
hist(ann.r, main = NULL, las=1, breaks = 40, col = "light blue", xlim = range(ann.p, ann.r))
abline(v=ann.p, col = "red")
PPM1 <- ppm(as.ppp(LM_fixed_field_data_processed_sf) ~ log(river_LM_trans_points))
