geom_smooth(method='lm')+
geom_point()+
labs(title = "San Dionisio SCA vs. Distance from River") +
xlab("Distance (m)")+
ylab("Short Canopy Axis (m)") +
theme_bw() +
theme(axis.text = element_text(size = 2))
#plotting the linear model in ggplot for SCA
ggplot(data = SD_fixed_field_data_processed_distance_sca_no_outliers, (aes(x=d, y=Canopy_short_sqrt)))+
geom_smooth(method='lm')+
geom_point()+
labs(title = "San Dionisio SCA vs. Distance from River") +
xlab("Distance (m)")+
ylab("Short Canopy Axis (m)") +
theme_bw() +
theme(axis.text = element_text(size = 10))
#plotting the linear model in ggplot for SCA
ggplot(data = SD_fixed_field_data_processed_distance_sca_no_outliers, (aes(x=d, y=Canopy_short_sqrt)))+
geom_smooth(method='lm')+
geom_point()+
labs(title = "San Dionisio SCA vs. Distance from River") +
xlab("Distance (m)")+
ylab("Short Canopy Axis (m)") +
theme_bw() +
theme(axis.text = element_text(size = 15))
#plotting the linear model in ggplot for SCA
ggplot(data = SD_fixed_field_data_processed_distance_sca_no_outliers, (aes(x=d, y=Canopy_short_sqrt)))+
geom_smooth(method='lm')+
geom_point()+
labs(title = "San Dionisio SCA vs. Distance from River") +
xlab("Distance (m)")+
ylab("Short Canopy Axis (m)") +
theme_bw() +
theme(axis.text = element_text(size = 12))
#plotting the linear model in ggplot for SCA
ggplot(data = SD_fixed_field_data_processed_distance_sca_no_outliers, (aes(x=d, y=Canopy_short_sqrt)))+
geom_smooth(method='lm')+
geom_point()+
labs(title = "San Dionisio SCA vs. Distance from River") +
xlab("Distance (m)")+
ylab("Short Canopy Axis (m)") +
theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 15))
#plotting the linear model in ggplot for SCA
ggplot(data = SD_fixed_field_data_processed_distance_sca_no_outliers, (aes(x=d, y=Canopy_short_sqrt)))+
geom_smooth(method='lm')+
geom_point()+
labs(title = "San Dionisio SCA vs. Distance from River") +
xlab("Distance (m)")+
ylab("Short Canopy Axis (m)") +
theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 15),
title = element_test(size = 18))
#plotting the linear model in ggplot for SCA
ggplot(data = SD_fixed_field_data_processed_distance_sca_no_outliers, (aes(x=d, y=Canopy_short_sqrt)))+
geom_smooth(method='lm')+
geom_point()+
labs(title = "San Dionisio SCA vs. Distance from River") +
xlab("Distance (m)")+
ylab("Short Canopy Axis (m)") +
theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 15),
title = element_text(size = 18))
#plotting the linear model in ggplot for SCA
ggplot(data = SD_fixed_field_data_processed_distance_sca_no_outliers, (aes(x=d, y=Canopy_short_sqrt)))+
geom_smooth(method='lm')+
geom_point()+
labs(title = "San Dionisio SCA vs. Distance from River") +
xlab("Distance (m)")+
ylab("sqrt(Short Canopy Axis) (m)") +
theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 15),
title = element_text(size = 18))
#Slope Test visible in summary of the lm
summary(SD_slr_dist_sca)
#plotting the linear model in ggplot for SCA
ggplot(data = SD_fixed_field_data_processed_distance, (aes(x=d, y=Canopy_long)))+
geom_smooth(method='lm')+
geom_point()+
xlab("Inverse Distance (m)")+
ylab("Long Canopy Axis (m)")
#creating the linear regression
SD_slr_dist_lca  <- lm(SD_fixed_field_data_processed_distance$Canopy_long ~ SD_fixed_field_data_processed_distance$d)
#logged transformations
SD_slr_dist_lca  <- lm(SD_fixed_field_data_processed_distance$Canopy_long_lg ~ SD_fixed_field_data_processed_distance$d)
#square root transformations
SD_slr_dist_lca  <- lm(SD_fixed_field_data_processed_distance$Canopy_long_sqrt ~ SD_fixed_field_data_processed_distance$d)
#inverse transformations
SD_slr_dist_lca  <- lm(SD_fixed_field_data_processed_distance$Canopy_long_inv ~ SD_fixed_field_data_processed_distance$d)
#checking normality of residuals with a histogram and qqnorm plot
ggplot(SD_slr_dist_lca, aes(x= SD_slr_dist_lca$residuals))+
geom_histogram()+
labs(title = "Distribution of Residuals for Long Canopy Axis vs. Inverse Distance")+
xlab("Residuals")+
ylab("Frequency")
#qqnorm plot
ggplot(SD_slr_dist_lca, aes(sample = SD_slr_dist_lca$residuals))+
geom_qq()
#shaprio wilk test
shapiro.test(SD_slr_dist_lca$residuals) #significantly not normal, except when outliers are removed
#checking equal variance
ggplot(data = SD_slr_dist_lca, aes(x = SD_slr_dist_lca$fitted.values, y = SD_slr_dist_lca$residuals))+
geom_point()+
geom_abline(intercept = 0, slope = 0)+
xlab("Fitted Values")+
ylab("Residuals")+
labs(title = "Residuals vs. Fitted Values for LCA and Distance")
#Slope Test visible in summary of the lm
summary(SD_slr_dist_lca)
#Cook's D
SD_slr_CA <- lm(Canopy_area ~ d, data = SD_fixed_field_data_processed_distance)
SD_slr_CA_cooks <- cooks.distance(SD_slr_CA) #calculating the cook.s D for each point
plot(SD_slr_CA_cooks, type = 'h') #checking to see which cook's D are unsually high
influential <- SD_slr_CA_cooks[(SD_slr_CA_cooks > (2 * mean(SD_slr_CA_cooks, na.rm = TRUE)))] #remove points with cooks D that are bigger than 4 times the mean cook's D
influential
influential_SD_slr_CA <- as.numeric(names(influential))
#removing outliers based on which points were deemed influential
SD_fixed_field_data_processed_distance_ca_no_outliers <- SD_fixed_field_data_processed_distance[-influential_SD_slr_CA,]
#plotting the linear model in ggplot for SCA
ggplot(data = SD_fixed_field_data_processed_distance, (aes(x=d, y=Canopy_area)))+
geom_smooth(method='lm')+
geom_point()+
xlab("Inverse Distance (m)")+
ylab("Canopy Area")
#creating the linear regression
SD_slr_dist_ca  <- lm(SD_fixed_field_data_processed_distance$Canopy_area ~ SD_fixed_field_data_processed_distance$d)
#logged transformations
SD_slr_dist_ca  <- lm(SD_fixed_field_data_processed_distance$Canopy_area_lg ~ SD_fixed_field_data_processed_distance$d)
#square root transformations
SD_slr_dist_ca  <- lm(SD_fixed_field_data_processed_distance$Canopy_area_sqrt ~ SD_fixed_field_data_processed_distance$d)
#inverse transformations
SD_slr_dist_ca  <- lm(SD_fixed_field_data_processed_distance$Canopy_area_inv ~ SD_fixed_field_data_processed_distance$d)
#logged transformations
SD_slr_dist_ca  <- lm(SD_fixed_field_data_processed_distance_ca_no_outliers$Canopy_area_lg ~ SD_fixed_field_data_processed_distance_ca_no_outliers$d)
#square root transformations
SD_slr_dist_ca  <- lm(SD_fixed_field_data_processed_distance_ca_no_outliers$Canopy_area_sqrt ~ SD_fixed_field_data_processed_distance_ca_no_outliers$d)
#inverse transformations
SD_slr_dist_ca  <- lm(SD_fixed_field_data_processed_distance_ca_no_outliers$Canopy_area_inv ~ SD_fixed_field_data_processed_distance_ca_no_outliers$d)
#checking normality of residuals with a histogram and qqnorm plot
ggplot(SD_slr_dist_ca, aes(x= SD_slr_dist_ca$residuals))+
geom_histogram()+
labs(title = "Distribution of Residuals for Canopy Area vs. Inverse Distance")+
xlab("Residuals")+
ylab("Frequency")
#qqnorm plot
ggplot(SD_slr_dist_ca, aes(sample = SD_slr_dist_ca$residuals))+
geom_qq()
#shaprio wilk test
shapiro.test(SD_slr_dist_ca$residuals) #significantly not normal, except when outliers are removed
#checking equal variance
ggplot(data = SD_slr_dist_ca, aes(x = SD_slr_dist_ca$fitted.values, y = SD_slr_dist_ca$residuals))+
geom_point()+
geom_abline(intercept = 0, slope = 0)+
xlab("Fitted Values")+
ylab("Residuals")+
labs(title = "Residuals vs. Fitted Values for CA and Inverse Distance")
#Slope Test visible in summary of the lm
summary(SD_slr_dist_ca)
#Cook's D
SD_slr_CS <- lm(Canopy_area ~ d, data = SD_fixed_field_data_processed_distance)
SD_slr_CS_cooks <- cooks.distance(SD_slr_CS) #calculating the cook.s D for each point
plot(SD_slr_CS_cooks, type = 'h') #checking to see which cook's D are unsually high
influential <- SD_slr_CS_cooks[(SD_slr_CS_cooks > (3 * mean(SD_slr_CS_cooks, na.rm = TRUE)))] #remove points with cooks D that are bigger than 4 times the mean cook's D
influential
#Slope Test visible in summary of the lm
summary(SD_slr_dist_dbh)
#square root transformations
SD_slr_dist_sca  <- lm(SD_fixed_field_data_processed_distance_sca_no_outliers$Canopy_short_sqrt ~ SD_fixed_field_data_processed_distance_sca_no_outliers$d)
#plotting the linear model in ggplot for SCA
ggplot(data = SD_fixed_field_data_processed_distance_sca_no_outliers, (aes(x=d, y=Canopy_short_sqrt)))+
geom_smooth(method='lm')+
geom_point()+
labs(title = "San Dionisio SCA vs. Distance from River") +
xlab("Distance (m)")+
ylab("sqrt(Short Canopy Axis) (m)") +
theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 15),
title = element_text(size = 18))
#checking normality of residuals with a histogram and qqnorm plot
ggplot(SD_slr_dist_sca, aes(x= SD_slr_dist_sca$residuals))+
geom_histogram()+
labs(title = "Distribution of Residuals for Short Canopy Axis vs. Inverse Distance")+
xlab("Residuals")+
ylab("Frequency")
#qqnorm plot
ggplot(SD_slr_dist_sca, aes(sample = SD_slr_dist_sca$residuals))+
geom_qq()
#shaprio wilk test
shapiro.test(SD_slr_dist_sca$residuals) #significantly not normal, except when outliers are removed
#checking normality of residuals with a histogram and qqnorm plot
ggplot(SD_slr_dist_sca, aes(x= SD_slr_dist_sca$residuals))+
geom_histogram()+
labs(title = "Distribution of Residuals for Short Canopy Axis vs. Inverse Distance")+
xlab("Residuals")+
ylab("Frequency")
#qqnorm plot
ggplot(SD_slr_dist_sca, aes(sample = SD_slr_dist_sca$residuals))+
geom_qq()
#shaprio wilk test
shapiro.test(SD_slr_dist_sca$residuals) #significantly not normal, except when outliers are removed
#checking equal variance
ggplot(data = SD_slr_dist_sca, aes(x = SD_slr_dist_sca$fitted.values, y = SD_slr_dist_sca$residuals))+
geom_point()+
geom_abline(intercept = 0, slope = 0)+
xlab("Fitted Values")+
ylab("Residuals")+
labs(title = "Residuals vs. Fitted Values for SCA and Inverse Distance")
#Slope Test visible in summary of the lm
summary(SD_slr_dist_sca)
#checking normality of residuals with a histogram and qqnorm plot
ggplot(SD_slr_dist_sca, aes(x= SD_slr_dist_sca$residuals))+
geom_histogram()+
labs(title = "Distribution of Residuals for Short Canopy Axis vs. Inverse Distance")+
xlab("Residuals")+
ylab("Frequency")
#checking normality of residuals with a histogram and qqnorm plot
ggplot(SD_slr_dist_sca, aes(x= SD_slr_dist_sca$residuals))+
geom_histogram()+
labs(title = "Distribution of Residuals for Short Canopy Axis vs. Distance")+
xlab("Residuals")+
ylab("Frequency")
#checking equal variance
ggplot(data = SD_slr_dist_sca, aes(x = SD_slr_dist_sca$fitted.values, y = SD_slr_dist_sca$residuals))+
geom_point()+
geom_abline(intercept = 0, slope = 0)+
xlab("Fitted Values")+
ylab("Residuals")+
labs(title = "Residuals vs. Fitted Values for SCA and Inverse Distance")
plot(rand.p)
#adding the UTM 12 crs to rand.p
rand.p.crs <- rand.p %>%
st_as_sf()%>%
st_set_crs(26912)
#plotting the randomly generated points, tree points, and probability/distance raster
ggplot()+
geom_stars(data=river_SD_trans_point_raster)+ #plotting the river edge raster
geom_sf(data=SD_fixed_field_data_processed_sf, aes(col = "red"))+ #plotting the tree points
geom_sf(data=rand.p.crs, fill = NA) #plotting the random points
#graphing the histogram of simulated ANN values and the mean ANN from our trees
as_tibble(ann.r) %>% #turning the ann.r vector as a tibble
ggplot()+
geom_histogram(aes(x = value), fill = "dodgerblue1", color = "black", bins = 50) +
xlim(range(ann.p_SD, ann.r)) + #setting the range of the graph to include both the simulated ANN and our tree's mean ANN
geom_vline(xintercept=ann.p_SD, col = "red") + #plotting our tree's mean ANN
xlab("ANN") +
theme_classic()
#calculating pseudo p-value for
total = 0  #set empty vaue
for (i in 1:length(ann.r)){
if (ann.r[i] < ann.p_SD){
total = total + 1
}
} #add number of values of in the random set of ANN values that are less than our mean ANN
(total / length(ann.r)) #the proportion of random ANNs that are less than our ANN
#ANN analysis controlling for river
n <- 599L #defines the number of simulations
ann.r <- vector(length = n) #creates the empty object that we can store ANN values in
for (i in 1:n){
rand.p <- rpoint(n=length(SD_fixed_field_data_processed_sf),
f = as.im(dist_near_river_buffer_SD_inverse)) #dist_near_river_buffer_LM_inverse #forcewin = T, win=as.owin(river_LM_convex_hull)
ann.r[i] <- mean(nndist(rand.p, k=1)) #for each simulated random distribution of points it calculates the mean ANN across all of the trees
} #for the length of the number of points at LM, it assigns a random point within the distance raster while controlling for distance to the river's edge
plot(rand.p)
#adding the UTM 12 crs to rand.p
rand.p.crs <- rand.p %>%
st_as_sf()%>%
st_set_crs(26912)
#plotting the randomly generated points, tree points, and probability/distance raster
ggplot()+
geom_stars(data=dist_near_river_buffer_SD_inverse)+ #plotting the distance inverse raster
geom_sf(data=SD_fixed_field_data_processed_sf, aes(col = "red"))+ #plotting the tree points
geom_sf(data=rand.p.crs, fill = NA)+ #plotting the random points
labs(color = "Trees", fill = "Inverse Distance (m)")
#graphing the histogram of simulated ANN values and the mean ANN from our trees
as_tibble(ann.r) %>% #turning the ann.r vector as a tibble
ggplot()+
geom_histogram(aes(x = value), fill = "dodgerblue1", color = "black", bins = 50) +
xlim(range(ann.p_SD, ann.r)) + #setting the range of the graph to include both the simulated ANN and our tree's mean ANN
geom_vline(xintercept=ann.p_SD, col = "red") + #plotting our tree's mean ANN
xlab("ANN") +
theme_classic()
#calculating pseudo p-value for
total = 0  #set empty vaue
for (i in 1:length(ann.r)){
if (ann.r[i] < ann.p){
total = total + 1
}
} #add number of values of in the random set of ANN values that are less than our mean ANN
#plotting the randomly generated points, tree points, and river raster
ggplot()+
geom_stars(data=st_rasterize(river_SD_trans))+ #plotting the river raster
geom_sf(data=SD_fixed_field_data_processed_sf, aes(col = "red"))+ #plotting the tree points
geom_sf(data=rand.p.crs, fill = NA) #plotting the random points
as_tibble(ann.r) %>% #turning the ann.r vector as a tibble
ggplot()+
geom_histogram(aes(x = value), fill = "skyblue", color = "black", bins = 50) +
xlim(range(ann.p_SD, ann.r)) + #setting the range of the graph to include both the simulated ANN and our tree's mean ANN
geom_vline(xintercept=ann.p_SD, col = "red", size = 1.2) + #plotting our tree's mean ANN
xlab("Average Nearest Neighbor (ANN)") +
theme_classic()+
theme(axis.text=element_text(size=15),  axis.title.x =element_text(size= 15),
axis.title.y =element_text(size= 15))
#plotting the randomly generated points, tree points, and river raster
ggplot()+
geom_stars(data=st_rasterize(river_SD_trans))+ #plotting the river raster
geom_sf(data=SD_fixed_field_data_processed_sf, aes(col = "red"))+ #plotting the tree points
geom_sf(data=rand.p.crs, fill = NA) #plotting the random points
#plotting the randomly generated points, tree points, and river raster
ggplot()+
geom_stars(data=st_rasterize(river_SD_trans))+ #plotting the river raster
geom_sf(data=SD_fixed_field_data_processed_sf, aes(col = "red"))+ #plotting the tree points
geom_sf(data=rand.p.crs, fill = NA) #plotting the random points
as_tibble(ann.r) %>% #turning the ann.r vector as a tibble
ggplot()+
geom_histogram(aes(x = value), fill = "skyblue", color = "black", bins = 50) +
xlim(range(ann.p_SD, ann.r)) + #setting the range of the graph to include both the simulated ANN and our tree's mean ANN
geom_vline(xintercept=ann.p_SD, col = "red", size = 1.2) + #plotting our tree's mean ANN
xlab("Average Nearest Neighbor (ANN)") +
theme_classic()+
theme(axis.text=element_text(size=15),  axis.title.x =element_text(size= 15),
axis.title.y =element_text(size= 15))
#calculating pseudo p-value for
total = 0  #set empty vaue
#plotting the randomly generated points, tree points, and river raster
ggplot()+
geom_stars(data=st_rasterize(river_SD_trans))+ #plotting the river raster
geom_sf(data=SD_fixed_field_data_processed_sf, aes(col = "red"))+ #plotting the tree points
geom_sf(data=rand.p.crs, fill = NA) #plotting the random points
as_tibble(ann.r) %>% #turning the ann.r vector as a tibble
ggplot()+
geom_histogram(aes(x = value), fill = "skyblue", color = "black", bins = 50) +
xlim(range(ann.p_SD, ann.r)) + #setting the range of the graph to include both the simulated ANN and our tree's mean ANN
geom_vline(xintercept=ann.p_SD, col = "red", size = 1.2) + #plotting our tree's mean ANN
xlab("Average Nearest Neighbor (ANN)") +
theme_classic()+
theme(axis.text=element_text(size=15),  axis.title.x =element_text(size= 15),
axis.title.y =element_text(size= 15))
#calculating pseudo p-value for
total = 0  #set empty vaue
for (i in 1:length(ann.r)){
if (ann.r[i] < ann.p){
total = total + 1
}
} #add number of values of in the random set of ANN values that are less than our mean ANN
#plotting the randomly generated points, tree points, and river raster
ggplot()+
geom_stars(data=st_rasterize(river_SD_trans))+ #plotting the river raster
geom_sf(data=SD_fixed_field_data_processed_sf, aes(col = "red"))+ #plotting the tree points
geom_sf(data=rand.p.crs, fill = NA) #plotting the random points
#graphing the histogram of simulated ANN values and the mean ANN from our trees
as_tibble(ann.r) %>% #turning the ann.r vector as a tibble
ggplot()+
geom_histogram(aes(x = value), fill = "dodgerblue1", color = "black", bins = 50) +
xlim(range(ann.p_SD, ann.r)) + #setting the range of the graph to include both the simulated ANN and our tree's mean ANN
geom_vline(xintercept=ann.p_SD, col = "red") + #plotting our tree's mean ANN
xlab("ANN") +
theme_classic()
#calculating pseudo p-value for
total = 0  #set empty vaue
for (i in 1:length(ann.r)){
if (ann.r[i] < ann.p){
total = total + 1
}
} #add number of values of in the random set of ANN values that are less than our mean ANN
(total / length(ann.r)) #the proportion of random ANNs that are less than our ANN
#plotting the randomly generated points, tree points, and probability/distance raster
ggplot()+
geom_stars(data=dist_near_river_buffer_SD_inverse)+ #plotting the distance inverse raster
geom_sf(data=SD_fixed_field_data_processed_sf, aes(col = "red"))+ #plotting the tree points
geom_sf(data=rand.p.crs, fill = NA)+ #plotting the random points
labs(color = "Trees", fill = "Inverse Distance (m)")
ann.r[i] <- mean(nndist(rand.p, k=1)) #for each simulated random distribution of points it calculates the mean ANN across all of the trees
for (i in 1:n){
rand.p <- rpoint(n=length(SD_fixed_field_data_processed_sf), f = as.im(st_rasterize(river_SD_trans))) #assigns a random point for the number of trees in SD favoring placements in the river raster
ann.r[i] <- mean(nndist(rand.p, k=1)) #for each simulated random distribution of points it calculates the mean ANN across all of the trees
} #for the length of the number of points at LM, it assigns a random point within the raster while controlling for the river
plot(rand.p)
#adding the UTM 12 crs to rand.p
rand.p.crs <- rand.p %>%
st_as_sf()%>%
st_set_crs(26912)
#plotting the randomly generated points, tree points, and river raster
ggplot()+
geom_stars(data=st_rasterize(river_SD_trans))+ #plotting the river raster
geom_sf(data=SD_fixed_field_data_processed_sf, aes(col = "red"))+ #plotting the tree points
geom_sf(data=rand.p.crs, fill = NA) #plotting the random points
as_tibble(ann.r) %>% #turning the ann.r vector as a tibble
ggplot()+
geom_histogram(aes(x = value), fill = "skyblue", color = "black", bins = 50) +
xlim(range(ann.p_SD, ann.r)) + #setting the range of the graph to include both the simulated ANN and our tree's mean ANN
geom_vline(xintercept=ann.p_SD, col = "red", size = 1.2) + #plotting our tree's mean ANN
xlab("Average Nearest Neighbor (ANN)") +
theme_classic()+
theme(axis.text=element_text(size=15),  axis.title.x =element_text(size= 15),
axis.title.y =element_text(size= 15))
#plotting the randomly generated points, tree points, and river raster
ggplot()+
geom_stars(data=st_rasterize(river_SD_trans))+ #plotting the river raster
geom_sf(data=SD_fixed_field_data_processed_sf, aes(col = "red"))+ #plotting the tree points
geom_sf(data=rand.p.crs, fill = NA) #plotting the random points
#plotting the randomly generated points, tree points, and river raster
ggplot()+
geom_stars(data=st_rasterize(river_SD_trans))+ #plotting the river raster
geom_sf(data=SD_fixed_field_data_processed_sf, aes(col = "red"))+ #plotting the tree points
geom_sf(data=rand.p.crs, fill = NA) #plotting the random points
MC.SD.crown.spread
#plot of simulated Moran's I values against our value
plot(MC.SD.crown.spread, main="", las=1, xlab = "Crown Spread", cex.lab = 1.5, col = "red" )
lines(MC.SD.crown.spread$statistic, col = "red")
MC.SD.crown.spread$p.value #extracting the pvalue
MC.SD.crown.spread$statistic
#computing the Global Moran's I statistic
Moran.I(SD_fixed_field_data_processed$Canopy_area, SD.tree.dist.inv)
#creating lags, which computes the average neighboring short canopy axis for each tree
SD_fixed_field_data_processed$lag.canopy.area <- lag.listw(lw.dist.SD, SD_fixed_field_data_processed$Canopy_area)
# Create a regression model
M.SD.canopy.area <- lm(lag.canopy.area ~ Canopy_area, SD_fixed_field_data_processed)
# Plot the lagged variable vs. the variable
ggplot(data=SD_fixed_field_data_processed, aes(x=Canopy_area, y=lag.canopy.area))+
geom_point()+
geom_smooth(method = lm, col="blue")+
xlab("Canopy Area")+
ylab("Lagged Canopy Area")
#computing the Moran's I statistic
moran(SD_fixed_field_data_processed$Canopy_area, listw = lw.dist.SD, n = length(lw.dist.SD$neighbours), S0 = Szero(lw.dist.SD))
##Ii is local moran statistic, E.Ii is expected local moran statistic, Vari.Ii is variance of local moran statistic, Z. Ii standard deviation of local moran statistic
#plotting the local moran's I values vs. the expected
ggplot(data=MC_local.SD.crown.spread.df)+
geom_point(aes(x=Ii, y=E.Ii), size = 0.01)+
xlab("Local Moran's I Statistic for Crown Spread")+
ylab("Expected Moran's I Statistic for Crown Spread")+
theme_gray()
#calculating the p-values for each individual tree Moran's I, observed vs. expected
SD_fixed_field_data_processed$p.crown.spread  <- MC_local.SD.crown.spread.df$`Pr(folded) Sim`
# Plot the lagged variable vs. the variable
ggplot(data=SD_fixed_field_data_processed, aes(x=Crown_spread, y=lag.crown.spread))+
geom_point()+
geom_smooth(method = lm, col="blue")+
xlab("Crown Spread")+
ylab("Lagged Crown Spread")+
theme(text = element_text(size = 20))
#computing the Moran's I statistic
moran(SD_fixed_field_data_processed$Crown_spread, listw = lw.dist.SD, n = length(lw.dist.SD$neighbours), S0 = Szero(lw.dist.SD))
#assessing statistical significance with a Monte-Carlo simulation
MC.SD.crown.spread <- moran.mc(SD_fixed_field_data_processed$Crown_spread, lw.dist.SD, nsim = 999)
MC.SD.crown.spread
#plot of simulated Moran's I values against our value
plot(MC.SD.crown.spread, main="", las=1, xlab = "Crown Spread", cex.lab = 1.5, col = "red" )
lines(MC.SD.crown.spread$statistic, col = "red")
MC.SD.crown.spread$p.value #extracting the pvalue
MC.SD.crown.spread$statistic
# Plot the lagged variable vs. the variable
ggplot(data=SD_fixed_field_data_processed, aes(x=Crown_spread, y=lag.crown.spread))+
geom_point()+
geom_smooth(method = lm, col="blue")+
xlab("Crown Spread")+
ylab("Lagged Crown Spread")+
theme(text = element_text(size = 20))
#computing the Moran's I statistic
moran(SD_fixed_field_data_processed$Crown_spread, listw = lw.dist.SD, n = length(lw.dist.SD$neighbours), S0 = Szero(lw.dist.SD))
#assessing statistical significance with a Monte-Carlo simulation
MC.SD.crown.spread <- moran.mc(SD_fixed_field_data_processed$Crown_spread, lw.dist.SD, nsim = 999)
MC.SD.crown.spread
#plot of simulated Moran's I values against our value
plot(MC.SD.crown.spread, main="", las=1, xlab = "Crown Spread", cex.lab = 1.5, col = "red" )
lag.crown.spread
SD_fixed_field_data_processed$lag.crown.spread <- lag.listw(lw.dist.SD, SD_fixed_field_data_processed$Crown_spread)
SD_fixed_field_data_processed$lag.crown.spread
# Create a regression model
M.SD.crown.spread <- lm(lag.crown.spread ~ Crown_spread, SD_fixed_field_data_processed)
# Plot the lagged variable vs. the variable
ggplot(data=SD_fixed_field_data_processed, aes(x=Crown_spread, y=lag.crown.spread))+
geom_point()+
geom_smooth(method = lm, col="blue")+
xlab("Crown Spread")+
ylab("Lagged Crown Spread")+
theme(text = element_text(size = 20))
LM.tree.coord.matrix <- as.matrix(cbind(LM_fixed_field_data_processed$X.1,
LM_fixed_field_data_processed$Y))
#creates nearest neighbor knn using a matrix of the tree coordinates within a specific radius of each tree
knn.dist.LM <- dnearneigh(LM.tree.coord.matrix, d1 = 0, d2 = (40*mean(LM_fixed_field_data_processed$DBH_ag)))
#inverse distance weighting with raw distance-based weights without applying any normalisation
lw.dist.LM <- nb2listwdist(knn.dist.LM, fixed_field_data_processed_NN_UTM, type="idw", style="raw",
alpha = 1, dmax = NULL, longlat = NULL, zero.policy=T) # had to set zero.policy to true because of empty neighbor sets
View(lw.dist.LM)
#checks the neighbor weights for the first tree
lw.dist.LM$weights[4]
#creating lags, which computes the average neighboring short canopy axis for each tree
LM_fixed_field_data_processed$lag.canopy.short <- lag.listw(lw.dist.LM, LM_fixed_field_data_processed$Canopy_short)
# Create a regression model
M.LM <- lm(lag.canopy.short ~ Canopy_short, LM_fixed_field_data_processed)
# Plot the lagged variable vs. the variable
ggplot(data=LM_fixed_field_data_processed, aes(x=Canopy_short, y=lag.canopy.short))+
geom_point()+
geom_smooth(method = lm, col="blue")+
xlab("Short Canopy Axis")+
ylab("Lagged Short Canopy Axis")
#computing the Moran's I statistic
moran(LM_fixed_field_data_processed$Canopy_short, listw = lw.dist.LM, n = length(lw.dist.LM$neighbours), S0 = Szero(lw.dist.LM))
View(sum(lw.dist.LM$weights))
by(lw.dist.LM$weights[4])
#assessing statistical significance with a Monte-Carlo simulation
MC.LM.canopy.short <- moran.mc(LM_fixed_field_data_processed$Canopy_short, lw.dist.LM, nsim = 999)
MC.LM.canopy.short
#plot of simulated Moran's I values against our value
plot(MC.LM.canopy.short, main="", las=1, xlab = "Short Canopy Axis")
MC.LM.canopy.short$p.value #extracting the pvalue
