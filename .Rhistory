slope_test_summary <- summary(chosen_model)
#Storing the slope test t-value from the summary of the linear model
slope_test_t_value <- slope_test_summary$coefficients["d", "t value"]
#Storing the slope test p-value from the summary of the linear model
slope_test_p_value <- slope_test_summary$coefficients["d", "Pr(>|t|)"]
print(paste("Slope Test Results:",
"t =", slope_test_t_value,
"p =", slope_test_p_value))
print(slope_test_summary)
#returns the name of the model that performed the best, normality results, equal variance results, and the slope test results
return(list("chosen_model" = chosen_model, #returning the chosen model
"shapiro_wilk" = shapiro_wilk, #returning the Shapiro-Wilks Test for normal residual results
"breusch_pagan_test" = breusch_pagan_test,#returning the Breusch-Pagan Test for equal variance of residuals results
"slope_test_summary" = slope_test_summary, #returning the linear regression slope test results
"slope_test_t_value" = slope_test_t_value, #returning the linear regression slope test results t-value
"slope_test_p_value" = slope_test_p_value, #returning the linear regression slope test results p-value
"chosen_model_statement" = chosen_model_statement, #returning a statement of which model was chosen
"lack_conditions_statement" = lack_conditions_statement)) #returning a statement if none of the models met the conditions
}
#running the simple linear regression function
simple_linear_regressions_LM_SCA <- simple_linear_regressions("LM", "SCA")
simple_linear_regressions_LM_SCA
#running the simple linear regression function
simple_linear_regressions_LM_CA <- simple_linear_regressions("LM", "CA")
simple_linear_regressions_LM_CA
library(tidyverse)
library(moments) # for calculating the moments of each variable
library(sf) # for plotting spatial objects
library(smatr)
library(ggpmisc)
library(PMCMRplus) # for Dunn test
library(geomtextpath) # for PCA graphing
library(spatstat) # to run the Ripley's K function: Kest
library(stars) # for sf_rasterize function
library(raster) #to use crop
library(starsExtra) #to use dist_to_nearest
library(geostatsp) # To successfully use as.im
library(tmaptools)
# loading in the processed tree data
source("./analyses/Data_Processing_Script.R")
# loading in the processed tree data
source("./analyses/Data_Processing_Script.R")
fixed_field_data_processed_source_source <- read.csv("./analyses/fixed_field_data_processed.csv") #imports the csv created from analyzing_morpho_data_cleaned.R
fixed_field_data_processed_source <- fixed_field_data_processed_source %>%
mutate(X = row_number())
#creating a point shapefile of all points with lat lon coordinates and other attributes in WGS 1984
#sf objects are dataframes with rows representing simple features with attributes and a simple feature geometry list-column (sfc)
fixed_field_data_processed_source_sf <- st_as_sf(fixed_field_data_processed_source,
coords = c("long", "lat"), crs = 4326)
#creating a transformed point shapefile with UTM 12 N an equal area projection
fixed_field_data_processed_source_sf_transformed_source <- st_transform(fixed_field_data_processed_source_sf, crs = 26912)
LM_fixed_field_data_processed_source_sf_source <- fixed_field_data_processed_source_sf_transformed_source %>%
filter(Locality == "LM") %>%
st_as_sf()
LC_fixed_field_data_processed_source_sf_source <- fixed_field_data_processed_source_sf_transformed_source %>%
filter(Locality == "LC") %>%
st_as_sf()
SD_fixed_field_data_processed_source_sf_source <- fixed_field_data_processed_source_sf_transformed_source %>%
filter(Locality == "SD") %>%
st_as_sf()
fixed_field_data_processed_source_sf_trans_coords_source <- st_coordinates(fixed_field_data_processed_source_sf_transformed_source) #creates a dataframe with separate x and y columns from the UTM 12N transformation
fixed_field_data_processed_source_sf_trans_coordinates_source <- fixed_field_data_processed_source_sf_transformed_source %>%
cbind(fixed_field_data_processed_source_sf_trans_coords_source) #combines the x and y coordinate data frame with the transformed sf dataframe
#creating columns with transformations: logged all of the size/shape variables
fixed_field_data_processed_source_sf_trans_coordinates_source <- fixed_field_data_processed_source_sf_trans_coordinates_source %>%
mutate(Canopy_short_lg = log(Canopy_short))%>%
mutate(Canopy_long_lg = log(Canopy_long))%>%
mutate(Canopy_area_lg = log(Canopy_area))%>%
mutate(Crown_spread_lg = log(Crown_spread))%>%
mutate(DBH_ag_lg = log(DBH_ag))
#creating columns with transformations: square root all of the size/shape variables
fixed_field_data_processed_source_sf_trans_coordinates_source <- fixed_field_data_processed_source_sf_trans_coordinates_source %>%
mutate(Canopy_short_sqrt = sqrt(Canopy_short))%>%
mutate(Canopy_long_sqrt = sqrt(Canopy_long))%>%
mutate(Canopy_area_sqrt = sqrt(Canopy_area))%>%
mutate(Crown_spread_sqrt = sqrt(Crown_spread))%>%
mutate(DBH_ag_sqrt = sqrt(DBH_ag))
#setting elevation as a numeric value
fixed_field_data_processed_source_sf_trans_coordinates_source <- fixed_field_data_processed_source_sf_trans_coordinates_source %>%
mutate(Elevation..m. = as.numeric(Elevation..m.))
LM_fixed_field_data_processed_source_source <- fixed_field_data_processed_source_sf_trans_coordinates_source %>%
filter(Locality == "LM")
LC_fixed_field_data_processed_source_source <- fixed_field_data_processed_source_sf_trans_coordinates_source %>%
filter(Locality == "LC")
SD_fixed_field_data_processed_source_source <- fixed_field_data_processed_source_sf_trans_coordinates_source %>%
filter(Locality == "SD")
#creating a new column in the whole dataset to get rid of 360 m outlier and turn the values in feet into meter
fixed_field_data_processed_source_sf_trans_coordinates_source <-  fixed_field_data_processed_source_sf_trans_coordinates_source %>%
mutate(Elevation..m.FIXED = case_when((Elevation..m. < 700 & Elevation..m. != 360) ~ Elevation..m.,
(Elevation..m. == 360) ~ NA,
(Elevation..m. > 700) ~ Elevation..m.*0.3048))  #because LM and LC do not have a 360 elevation and SD and LC do have values above 700, this should not effect them
#creating a new elevation column so the values that were mistakenly put in feet are in meters
LM_fixed_field_data_processed_source <-  LM_fixed_field_data_processed_source %>%
mutate(Elevation..m. = as.numeric(Elevation..m.)) %>%
mutate(Elevation..m.FIXED = case_when((Elevation..m. > 700) ~ Elevation..m.*0.3048,
(Elevation..m. < 700) ~ Elevation..m.))
#creating a new elevation column so LC, LM, and SD all have this same column, makes it easier for combining the population data frames
LC_fixed_field_data_processed_source <-  LC_fixed_field_data_processed_source %>%
mutate(Elevation..m.FIXED = case_when((Elevation..m. > 700) ~ Elevation..m.*0.3048,
(Elevation..m. < 700) ~ Elevation..m.))
#plotting all of the tree points by elevation (m) to check the range of values
ggplot()+
geom_sf(data = fixed_field_data_processed_source_sf_trans_coordinates_source, aes(color = Elevation..m.FIXED))
#creating a new elevation column so that a 360 m outlier is 460
SD_fixed_field_data_processed_source <-  SD_fixed_field_data_processed_source %>%
mutate(Elevation..m.FIXED = case_when((Elevation..m. == 360) ~ NA,
(Elevation..m. != 360) ~ Elevation..m.))
#Las Matancitas (LM)
river_LM_source <- st_read("./data/Shapefiles/FINAL River Shapefiles ArcGIS/LM River/LM_Rivers_Final.shp")
river_LM_source  <- river_LM_source$geometry[1]
plot(river_LM)
#La Cobriza (LC)
river_LC_source  <- st_read("./data/Shapefiles/FINAL River Shapefiles ArcGIS/LC River/LC_Rivers_Final.shp")
river_LC_source  <- river_LC_source$geometry[1]
plot(river_LC)
#San Dionisio (SD)
river_SD_source <- st_read("./data/Shapefiles/FINAL River Shapefiles ArcGIS/SD River/SD_Rivers_Final.shp")
river_SD_source <- river_SD_source$geometry[1]
plot(river_SD)
#changing the coordinate reference system of the river polygons to be equal area projection (UTM 12N), uses meters as distance measurement
#uses meters as distance measurement
river_LM_trans_source <- st_transform(river_LM_source, crs = 26912)
river_LC_trans_source <- st_transform(river_LC_source, crs = 26912)
river_SD_trans_source <- st_transform(river_SD_source, crs = 26912)
#turning the Baja California Sur polygon into a shapefile, to be able to visualize the point locations
BCS_polygon_source <- read_sf("./data/Shapefiles/BCS_Shapefile/bcs_entidad.shp")
BCS_polygon_source <- st_as_sf(BCS_polygon_source) #ensures foreign will be an sf object (in this case a multipolygon)
#LM
river_buffer_LM_source <- st_buffer(river_LM_trans_source, 100) #100 m buffer
ggplot()+  #plotting the river shapefile, the buffer, and the tree points
geom_sf(data = river_buffer_LM)+
geom_sf(data = river_LM_trans)+
geom_sf(data = LM_fixed_field_data_processed_source_sf)
#LC
river_buffer_LC_source <- st_buffer(river_LC_trans_source, 100) #230 m buffer
ggplot()+ #plotting the river shapefile, the buffer, and the tree points
geom_sf(data = river_buffer_LC)+
geom_sf(data = river_LC_trans)+
geom_sf(data = LC_fixed_field_data_processed_source_sf)
#SD
river_buffer_SD_source <- st_buffer(river_SD_trans_source, 70) #70 m buffer
ggplot()+ #plotting the river shapefile, the buffer, and the tree points
geom_sf(data = river_buffer_SD)+
geom_sf(data = river_SD_trans)+
geom_sf(data = SD_fixed_field_data_processed_source_sf)
#LM
river_buffer_LM_source <- st_buffer(river_LM_trans_source, 100) #100 m buffer
ggplot()+  #plotting the river shapefile, the buffer, and the tree points
geom_sf(data = river_buffer_LM)+
geom_sf(data = river_LM_trans)+
geom_sf(data = LM_fixed_field_data_processed_source_sf)
#LM
river_buffer_LM_source <- st_buffer(river_LM_trans_source, 100) #100 m buffer
ggplot()+  #plotting the river shapefile, the buffer, and the tree points
geom_sf(data = river_buffer_LM)+
geom_sf(data = river_LM_trans)+
geom_sf(data = LM_fixed_field_data_processed_source_sf_source)
#LC
river_buffer_LC_source <- st_buffer(river_LC_trans_source, 100) #230 m buffer
ggplot()+ #plotting the river shapefile, the buffer, and the tree points
geom_sf(data = river_buffer_LC)+
geom_sf(data = river_LC_trans)+
geom_sf(data = LC_fixed_field_data_processed_source_sf_source)
ggplot()+  #plotting the river shapefile, the buffer, and the tree points
geom_sf(data = river_buffer_LM)+
geom_sf(data = river_LM_trans)+
geom_sf(data = LM_fixed_field_data_processed_source_sf_source)
fixed_field_data_processed_source_source <- read.csv("./analyses/fixed_field_data_processed.csv") #imports the csv created from analyzing_morpho_data_cleaned.R
fixed_field_data_processed_source <- fixed_field_data_processed_source %>%
mutate(X = row_number())
#creating a point shapefile of all points with lat lon coordinates and other attributes in WGS 1984
#sf objects are dataframes with rows representing simple features with attributes and a simple feature geometry list-column (sfc)
fixed_field_data_processed_source_sf <- st_as_sf(fixed_field_data_processed_source,
coords = c("long", "lat"), crs = 4326)
#creating a transformed point shapefile with UTM 12 N an equal area projection
fixed_field_data_processed_source_sf_transformed_source <- st_transform(fixed_field_data_processed_source_sf, crs = 26912)
fixed_field_data_processed_source_source <- read.csv("./analyses/fixed_field_data_processed.csv") #imports the csv created from analyzing_morpho_data_cleaned.R
fixed_field_data_processed_source <- read.csv("./analyses/fixed_field_data_processed.csv") #imports the csv created from analyzing_morpho_data_cleaned.R
fixed_field_data_processed_source <- fixed_field_data_processed_source %>%
mutate(X = row_number())
#creating a point shapefile of all points with lat lon coordinates and other attributes in WGS 1984
#sf objects are dataframes with rows representing simple features with attributes and a simple feature geometry list-column (sfc)
fixed_field_data_processed_source_sf <- st_as_sf(fixed_field_data_processed_source,
coords = c("long", "lat"), crs = 4326)
#creating a transformed point shapefile with UTM 12 N an equal area projection
fixed_field_data_processed_source_sf_transformed_source <- st_transform(fixed_field_data_processed_source_sf, crs = 26912)
LM_fixed_field_data_processed_source_sf_source <- fixed_field_data_processed_source_sf_transformed_source %>%
filter(Locality == "LM") %>%
st_as_sf()
LC_fixed_field_data_processed_source_sf_source <- fixed_field_data_processed_source_sf_transformed_source %>%
filter(Locality == "LC") %>%
st_as_sf()
SD_fixed_field_data_processed_source_sf_source <- fixed_field_data_processed_source_sf_transformed_source %>%
filter(Locality == "SD") %>%
st_as_sf()
fixed_field_data_processed_source_sf_trans_coords_source <- st_coordinates(fixed_field_data_processed_source_sf_transformed_source) #creates a dataframe with separate x and y columns from the UTM 12N transformation
fixed_field_data_processed_source_sf_trans_coordinates_source <- fixed_field_data_processed_source_sf_transformed_source %>%
cbind(fixed_field_data_processed_source_sf_trans_coords_source) #combines the x and y coordinate data frame with the transformed sf dataframe
#creating columns with transformations: logged all of the size/shape variables
fixed_field_data_processed_source_sf_trans_coordinates_source <- fixed_field_data_processed_source_sf_trans_coordinates_source %>%
mutate(Canopy_short_lg = log(Canopy_short))%>%
mutate(Canopy_long_lg = log(Canopy_long))%>%
mutate(Canopy_area_lg = log(Canopy_area))%>%
mutate(Crown_spread_lg = log(Crown_spread))%>%
mutate(DBH_ag_lg = log(DBH_ag))
#creating columns with transformations: square root all of the size/shape variables
fixed_field_data_processed_source_sf_trans_coordinates_source <- fixed_field_data_processed_source_sf_trans_coordinates_source %>%
mutate(Canopy_short_sqrt = sqrt(Canopy_short))%>%
mutate(Canopy_long_sqrt = sqrt(Canopy_long))%>%
mutate(Canopy_area_sqrt = sqrt(Canopy_area))%>%
mutate(Crown_spread_sqrt = sqrt(Crown_spread))%>%
mutate(DBH_ag_sqrt = sqrt(DBH_ag))
#setting elevation as a numeric value
fixed_field_data_processed_source_sf_trans_coordinates_source <- fixed_field_data_processed_source_sf_trans_coordinates_source %>%
mutate(Elevation..m. = as.numeric(Elevation..m.))
LM_fixed_field_data_processed_source_source <- fixed_field_data_processed_source_sf_trans_coordinates_source %>%
filter(Locality == "LM")
LC_fixed_field_data_processed_source_source <- fixed_field_data_processed_source_sf_trans_coordinates_source %>%
filter(Locality == "LC")
SD_fixed_field_data_processed_source_source <- fixed_field_data_processed_source_sf_trans_coordinates_source %>%
filter(Locality == "SD")
#creating a new column in the whole dataset to get rid of 360 m outlier and turn the values in feet into meter
fixed_field_data_processed_source_sf_trans_coordinates_source <-  fixed_field_data_processed_source_sf_trans_coordinates_source %>%
mutate(Elevation..m.FIXED = case_when((Elevation..m. < 700 & Elevation..m. != 360) ~ Elevation..m.,
(Elevation..m. == 360) ~ NA,
(Elevation..m. > 700) ~ Elevation..m.*0.3048))  #because LM and LC do not have a 360 elevation and SD and LC do have values above 700, this should not effect them
#creating a new elevation column so the values that were mistakenly put in feet are in meters
LM_fixed_field_data_processed_source <-  LM_fixed_field_data_processed_source %>%
mutate(Elevation..m. = as.numeric(Elevation..m.)) %>%
mutate(Elevation..m.FIXED = case_when((Elevation..m. > 700) ~ Elevation..m.*0.3048,
(Elevation..m. < 700) ~ Elevation..m.))
#creating a new elevation column so LC, LM, and SD all have this same column, makes it easier for combining the population data frames
LC_fixed_field_data_processed_source <-  LC_fixed_field_data_processed_source %>%
mutate(Elevation..m.FIXED = case_when((Elevation..m. > 700) ~ Elevation..m.*0.3048,
(Elevation..m. < 700) ~ Elevation..m.))
#creating a new elevation column so the values that were mistakenly put in feet are in meters
LM_fixed_field_data_processed_source <-  LM_fixed_field_data_processed_source %>%
mutate(Elevation..m. = as.numeric(Elevation..m.)) %>%
mutate(Elevation..m.FIXED = case_when((Elevation..m. > 700) ~ Elevation..m.*0.3048,
(Elevation..m. < 700) ~ Elevation..m.))
#creating a new column in the whole dataset to get rid of 360 m outlier and turn the values in feet into meter
fixed_field_data_processed_source_sf_trans_coordinates_source <-  fixed_field_data_processed_source_sf_trans_coordinates_source %>%
mutate(Elevation..m.FIXED = case_when((Elevation..m. < 700 & Elevation..m. != 360) ~ Elevation..m.,
(Elevation..m. == 360) ~ NA,
(Elevation..m. > 700) ~ Elevation..m.*0.3048))  #because LM and LC do not have a 360 elevation and SD and LC do have values above 700, this should not effect them
#creating a new elevation column so the values that were mistakenly put in feet are in meters
LM_fixed_field_data_processed_source_source <-  LM_fixed_field_data_processed_source_source %>%
mutate(Elevation..m. = as.numeric(Elevation..m.)) %>%
mutate(Elevation..m.FIXED = case_when((Elevation..m. > 700) ~ Elevation..m.*0.3048,
(Elevation..m. < 700) ~ Elevation..m.))
#creating a new elevation column so LC, LM, and SD all have this same column, makes it easier for combining the population data frames
LC_fixed_field_data_processed_source_source <-  LC_fixed_field_data_processed_source_source %>%
mutate(Elevation..m.FIXED = case_when((Elevation..m. > 700) ~ Elevation..m.*0.3048,
(Elevation..m. < 700) ~ Elevation..m.))
#plotting all of the tree points by elevation (m) to check the range of values
ggplot()+
geom_sf(data = fixed_field_data_processed_source_sf_trans_coordinates_source, aes(color = Elevation..m.FIXED))
#creating a new elevation column so that a 360 m outlier is 460
SD_fixed_field_data_processed_source <-  SD_fixed_field_data_processed_source %>%
mutate(Elevation..m.FIXED = case_when((Elevation..m. == 360) ~ NA,
(Elevation..m. != 360) ~ Elevation..m.))
#Las Matancitas (LM)
river_LM_source <- st_read("./data/Shapefiles/FINAL River Shapefiles ArcGIS/LM River/LM_Rivers_Final.shp")
river_LM_source  <- river_LM_source$geometry[1]
plot(river_LM)
#La Cobriza (LC)
river_LC_source  <- st_read("./data/Shapefiles/FINAL River Shapefiles ArcGIS/LC River/LC_Rivers_Final.shp")
river_LC_source  <- river_LC_source$geometry[1]
plot(river_LC)
#San Dionisio (SD)
river_SD_source <- st_read("./data/Shapefiles/FINAL River Shapefiles ArcGIS/SD River/SD_Rivers_Final.shp")
river_SD_source <- river_SD_source$geometry[1]
plot(river_SD)
#changing the coordinate reference system of the river polygons to be equal area projection (UTM 12N), uses meters as distance measurement
#uses meters as distance measurement
river_LM_trans_source <- st_transform(river_LM_source, crs = 26912)
river_LC_trans_source <- st_transform(river_LC_source, crs = 26912)
river_SD_trans_source <- st_transform(river_SD_source, crs = 26912)
#turning the Baja California Sur polygon into a shapefile, to be able to visualize the point locations
BCS_polygon_source <- read_sf("./data/Shapefiles/BCS_Shapefile/bcs_entidad.shp")
BCS_polygon_source <- st_as_sf(BCS_polygon_source) #ensures foreign will be an sf object (in this case a multipolygon)
#LM
river_buffer_LM_source <- st_buffer(river_LM_trans_source, 100) #100 m buffer
ggplot()+  #plotting the river shapefile, the buffer, and the tree points
geom_sf(data = river_buffer_LM)+
geom_sf(data = river_LM_trans)+
geom_sf(data = LM_fixed_field_data_processed_source_sf_source)
#LC
river_buffer_LC_source <- st_buffer(river_LC_trans_source, 100) #230 m buffer
ggplot()+ #plotting the river shapefile, the buffer, and the tree points
geom_sf(data = river_buffer_LC)+
geom_sf(data = river_LC_trans)+
geom_sf(data = LC_fixed_field_data_processed_source_sf_source)
#SD
river_buffer_SD_source <- st_buffer(river_SD_trans_source, 70) #70 m buffer
ggplot()+ #plotting the river shapefile, the buffer, and the tree points
geom_sf(data = river_buffer_SD)+
geom_sf(data = river_SD_trans)+
geom_sf(data = SD_fixed_field_data_processed_source_sf_source)
#creating a boundary box for LM with the UTM 12 N min and max lat lon values and then turning it into a simple feature geometry
LM_fixed_field_data_processed_source_box <- fixed_field_data_processed_source_sf_transformed_source %>%
filter(Locality == "LM") %>%
st_bbox %>%
st_as_sfc()
#creating a boundary box for LC with the UTM 12 N min and max lat lon values and then turning it into a simple feature geometry
LC_fixed_field_data_processed_source_box <- fixed_field_data_processed_source_sf_transformed_source %>%
filter(Locality == "LC") %>%
st_bbox %>%
st_as_sfc()
#creating a boundary box for SD with the UTM 12 N min and max lat lon values and then turning it into a simple feature geometry
SD_fixed_field_data_processed_source_box <- fixed_field_data_processed_source_sf_transformed_source %>%
filter(Locality == "SD") %>%
st_bbox %>%
st_as_sfc()
#creating bounding boxes for all of the river shapefiles for each population
LM_box <- st_bbox(river_LM_trans)
LC_box <- st_bbox(river_LC_trans)
SD_box <- st_bbox(river_SD_trans)
#Importing the cropped rasters for LM, LC, and SD and setting the crs to the same as the points
CEM_15_utm_LM <- raster(paste0("./data/15 m Elevation Raster/CEM_15_utm_LM.tif"))
terra::crs(CEM_15_utm_LM) <- CRS("+init=epsg:26912")
CEM_15_utm_LC <- raster(paste0("./data/15 m Elevation Raster/CEM_15_utm_LC.tif"))
terra::crs(CEM_15_utm_LC) <- CRS("+init=epsg:26912")
CEM_15_utm_SD <- raster(paste0("./data/15 m Elevation Raster/CEM_15_utm_SD.tif"))
terra::crs(CEM_15_utm_SD) <- CRS("+init=epsg:26912")
#creating the all points raster by merging the LM, LC, and SD rasters
CEM_15_utm_all_points <- raster::merge(CEM_15_utm_LM, CEM_15_utm_LC, CEM_15_utm_SD)
#plotting all of the elevation rasters and tree points
ggplot()+
geom_raster(data= as.data.frame(CEM_15_utm_all_points, xy = T), aes(x=x, y=y, fill = layer))+
geom_sf(data = fixed_field_data_processed_source_sf_transformed_source)
#extracting the slope in degrees, using the queens method (neighbor = 8)
all_points_slope_raster_15 <- terra::terrain(CEM_15_utm_all_points, unit = 'degrees', neighbors = 8, 'slope')
#plot of the slopes
ggplot()+
geom_raster(data= as.data.frame(all_points_slope_raster_15, xy = T), aes(x=x, y=y, fill = slope))+
geom_sf(data = fixed_field_data_processed_source_sf_trans_coordinates_source)+
scale_fill_viridis_c()
#extracting the slope in degrees, using the queens method (neighbor = 8)
LM_slope_raster_15 <- terra::terrain(CEM_15_utm_LM, unit = 'degrees', neighbors = 8, 'slope')
#plot of the slopes
ggplot()+
geom_raster(data= as.data.frame(LM_slope_raster_15, xy = T), aes(x=x, y=y, fill = slope))+
geom_sf(data = LM_fixed_field_data_processed_source)+
scale_fill_viridis_c()
gc()
#plot of the slopes
ggplot()+
geom_raster(data= as.data.frame(LM_slope_raster_15, xy = T), aes(x=x, y=y, fill = slope))+
geom_sf(data = LM_fixed_field_data_processed_source_source)+
scale_fill_viridis_c()
#plot of the slopes
ggplot()+
geom_raster(data= as.data.frame(LC_slope_raster_15, xy = T), aes(x=x, y=y, fill = slope))+
geom_sf(data = LC_fixed_field_data_processed_source_source)+
scale_fill_viridis_c()
#plot of the slopes
ggplot()+
geom_raster(data= as.data.frame(SD_slope_raster_15, xy = T), aes(x=x, y=y, fill = slope))+
geom_sf(data = SD_fixed_field_data_processed_source_source)+
scale_fill_viridis_c()
#extracting the slope in degrees, using the queens method (neighbor = 8)
all_points_aspect_raster_15 <- terra::terrain(CEM_15_utm_all_points, unit = 'degrees', neighbors = 8, 'aspect')
#plot the slopes
ggplot()+
geom_raster(data= as.data.frame(all_points_aspect_raster_15, xy = T), aes(x=x, y=y, fill = aspect))+
geom_sf(data = fixed_field_data_processed_source_sf_trans_coordinates_source)+
scale_fill_viridis_c()
#extracting the aspect in degrees, using the queens method (neighbor = 8)
LM_aspect_raster_15 <- terra::terrain(CEM_15_utm_LM, unit = 'degrees', neighbors = 8, 'aspect')
#plot of the slopes
ggplot()+
geom_raster(data= as.data.frame(LM_aspect_raster_15, xy = T), aes(x=x, y=y, fill = aspect))+
geom_sf(data = LM_fixed_field_data_processed_source)+
scale_fill_viridis_c()
#extracting the aspect in degrees, using the queens method (neighbor = 8)
LC_aspect_raster_15 <- terra::terrain(CEM_15_utm_LC, unit = 'degrees', neighbors = 8, 'aspect')
#plot of the slopes
ggplot()+
geom_raster(data= as.data.frame(LC_aspect_raster_15, xy = T), aes(x=x, y=y, fill = aspect))+
geom_sf(data = LC_fixed_field_data_processed_source)+
scale_fill_viridis_c()
#plot of the slopes
ggplot()+
geom_raster(data= as.data.frame(LC_aspect_raster_15, xy = T), aes(x=x, y=y, fill = aspect))+
geom_sf(data = LC_fixed_field_data_processed_source_source)+
scale_fill_viridis_c()
#extracting the aspect in degrees, using the queens method (neighbor = 8)
SD_aspect_raster_15 <- terra::terrain(CEM_15_utm_SD, unit = 'degrees', neighbors = 8, 'aspect')
#plot of the slopes
ggplot()+
geom_raster(data= as.data.frame(SD_aspect_raster_15, xy = T), aes(x=x, y=y, fill = aspect))+
geom_sf(data = SD_fixed_field_data_processed_source_source)+
scale_fill_viridis_c()
all_points_aspect_raster_15_data_pts <- extract(all_points_aspect_raster_15, fixed_field_data_processed_source_sf_trans_coordinates_source) #extracting aspect for each point value
all_points_slope_raster_15_data_pts <- extract(all_points_slope_raster_15, fixed_field_data_processed_source_sf_trans_coordinates_source) #extracting slope for each point value
all_points_fixed_field_data_processed_source_terrain <- cbind(fixed_field_data_processed_source_sf_trans_coordinates_source, all_points_aspect_raster_15_data_pts) #bind the aspect data for each point to the all point dataframe
all_points_fixed_field_data_processed_source_terrain <- cbind(all_points_fixed_field_data_processed_source_terrain, all_points_slope_raster_15_data_pts) #bind the slope data for each point to the all point dataframe
LM_aspect_raster_15_data_pts <- extract(LM_aspect_raster_15, LM_fixed_field_data_processed_source) #extracting aspect for each point value
LM_slope_raster_15_data_pts <- extract(LM_slope_raster_15, LM_fixed_field_data_processed_source) #extracting slope for each point value
LM_aspect_raster_15_data_pts <- extract(LM_aspect_raster_15, LM_fixed_field_data_processed_source_source) #extracting aspect for each point value
LM_slope_raster_15_data_pts <- extract(LM_slope_raster_15, LM_fixed_field_data_processed_source_source) #extracting slope for each point value
LM_elevation_raster_15_data_pts <- extract(CEM_15_utm_LM, LM_fixed_field_data_processed_source_source) #extracting the elevation for each point value
LM_fixed_field_data_processed_source_terrain <- cbind(LM_fixed_field_data_processed_source_source, LM_aspect_raster_15_data_pts) #bind the aspect data for each point to the LM point dataframe
LM_fixed_field_data_processed_source_terrain <- cbind(LM_fixed_field_data_processed_source_terrain, LM_slope_raster_15_data_pts) #bind the slope data for each point to the LM point dataframe
LM_fixed_field_data_processed_source_terrain <- cbind(LM_fixed_field_data_processed_source_terrain, LM_elevation_raster_15_data_pts) #bind the elevation data for each point to the LM point dataframe
LC_aspect_raster_15_data_pts <- extract(LC_aspect_raster_15, LC_fixed_field_data_processed_source_source) #extracting aspect for each point value
LC_slope_raster_15_data_pts <- extract(LC_slope_raster_15, LC_fixed_field_data_processed_source_source) #extracting slope for each point value
LC_elevation_raster_15_data_pts <- extract(CEM_15_utm_LC, LC_fixed_field_data_processed_source_source) #extracting the elevation for each point value
LC_fixed_field_data_processed_source_terrain <- cbind(LC_fixed_field_data_processed_source_source, LC_aspect_raster_15_data_pts) #bind the aspect data for each point to the LC point dataframe
LC_fixed_field_data_processed_source_terrain <- cbind(LC_fixed_field_data_processed_source_terrain, LC_slope_raster_15_data_pts) #bind the slope data for each point to the LC point dataframe
LC_fixed_field_data_processed_source_terrain <- cbind(LC_fixed_field_data_processed_source_terrain, LC_elevation_raster_15_data_pts) #bind the elevation data for each point to the LC point dataframe
SD_aspect_raster_15_data_pts <- extract(SD_aspect_raster_15, SD_fixed_field_data_processed_source_source) #extracting aspect for each point value
SD_slope_raster_15_data_pts <- extract(SD_slope_raster_15, SD_fixed_field_data_processed_source_source) #extracting slope for each point value
SD_elevation_raster_15_data_pts <- extract(CEM_15_utm_SD, SD_fixed_field_data_processed_source_source) #extracting the elevation for each point value
SD_fixed_field_data_processed_source_terrain <- cbind(SD_fixed_field_data_processed_source_source, SD_aspect_raster_15_data_pts) #bind the aspect data for each point to the SD point dataframe
SD_fixed_field_data_processed_source_terrain <- cbind(SD_fixed_field_data_processed_source_terrain, SD_slope_raster_15_data_pts) #bind the slope data for each point to the SD point dataframe
SD_fixed_field_data_processed_source_terrain <- cbind(SD_fixed_field_data_processed_source_terrain, SD_elevation_raster_15_data_pts) #bind the elevation data for each point to the SD point dataframe
#all points
all_points_fixed_field_data_processed_source_terrain <- all_points_fixed_field_data_processed_source_terrain %>%
mutate(all_points_aspect_raster_15_data_pts = case_when((all_points_aspect_raster_15_data_pts == "360") ~  0,
(all_points_aspect_raster_15_data_pts != "360")~ all_points_aspect_raster_15_data_pts))
#LM
LM_fixed_field_data_processed_source_terrain <- LM_fixed_field_data_processed_source_terrain %>%
mutate(LM_aspect_raster_15_data_pts = case_when((LM_aspect_raster_15_data_pts == "360") ~  0,
(LM_aspect_raster_15_data_pts != "360")~ LM_aspect_raster_15_data_pts))
LC_fixed_field_data_processed_source_terrain <- LC_fixed_field_data_processed_source_terrain %>%
mutate(LC_aspect_raster_15_data_pts = case_when((LC_aspect_raster_15_data_pts == "360") ~  0,
(LC_aspect_raster_15_data_pts != "360")~ LC_aspect_raster_15_data_pts))
SD_fixed_field_data_processed_source_terrain <- SD_fixed_field_data_processed_source_terrain %>%
mutate(SD_aspect_raster_15_data_pts = case_when((SD_aspect_raster_15_data_pts == "360") ~  0,
(SD_aspect_raster_15_data_pts != "360")~ SD_aspect_raster_15_data_pts))
# the directions are by a range of 45 degrees
all_points_fixed_field_data_processed_source_terrain <- all_points_fixed_field_data_processed_source_terrain %>%
mutate(all_points_aspect_raster_15_data_pts_8_categorical = case_when((all_points_aspect_raster_15_data_pts > 0 & all_points_aspect_raster_15_data_pts < 22.5) ~ "N",  #north is between 337.5 and 22.5
(all_points_aspect_raster_15_data_pts >= 337.5 & all_points_aspect_raster_15_data_pts < 359.999999999999999) ~ "N", #359.99999
(all_points_aspect_raster_15_data_pts >= 22.5 & all_points_aspect_raster_15_data_pts < 67.5) ~ "NE", #northeast is between 22.5 and 67.5 degrees
(all_points_aspect_raster_15_data_pts >= 67.5 & all_points_aspect_raster_15_data_pts < 112.5) ~ "E", #east is between 67.5 and 112.5 degrees
(all_points_aspect_raster_15_data_pts >= 112.5 & all_points_aspect_raster_15_data_pts < 157.5) ~ "SE", #southeast is between 122.5 and 157.5
(all_points_aspect_raster_15_data_pts >= 157.5 & all_points_aspect_raster_15_data_pts < 202.5) ~ "S", #south is between 157.5 and 202.5
(all_points_aspect_raster_15_data_pts >= 202.5 & all_points_aspect_raster_15_data_pts < 247.5) ~ "SW", #southwest is between 202.5 and 246.5
(all_points_aspect_raster_15_data_pts >= 247.5 & all_points_aspect_raster_15_data_pts < 292.5) ~ "W", #west is between 247.5 and 292.5 degrees
(all_points_aspect_raster_15_data_pts >= 292.5 & all_points_aspect_raster_15_data_pts < 337.5) ~ "NW")) #northwest is between 292.5 and 337.5 degrees
# the directions are by a range of 90 degrees
all_points_fixed_field_data_processed_source_terrain <- all_points_fixed_field_data_processed_source_terrain %>%
mutate(all_points_aspect_raster_15_data_pts_4_categorical = case_when((all_points_aspect_raster_15_data_pts >= 0 & all_points_aspect_raster_15_data_pts < 45) ~ "N",  #north is between 315 and 22.5
(all_points_aspect_raster_15_data_pts >= 315 & all_points_aspect_raster_15_data_pts < 359.999999999999999) ~ "N",
(all_points_aspect_raster_15_data_pts >= 22.5 & all_points_aspect_raster_15_data_pts < 135) ~ "E", #northeast is between 22.5 and 135  degrees
(all_points_aspect_raster_15_data_pts >= 135 & all_points_aspect_raster_15_data_pts < 225) ~ "S", #south is between 135 and 225 degrees
(all_points_aspect_raster_15_data_pts >= 225 & all_points_aspect_raster_15_data_pts < 315) ~ "W")) #west is between 225 and 315
# the directions are by a range of 45 degrees
LM_fixed_field_data_processed_source_terrain <- LM_fixed_field_data_processed_source_terrain %>%
mutate(LM_aspect_raster_15_data_pts_8_categorical = case_when((LM_aspect_raster_15_data_pts > 0 & LM_aspect_raster_15_data_pts < 22.5) ~ "N",  #north is between 337.5 and 22.5
(LM_aspect_raster_15_data_pts >= 337.5 & LM_aspect_raster_15_data_pts < 359.999999999999999) ~ "N",
(LM_aspect_raster_15_data_pts >= 22.5 & LM_aspect_raster_15_data_pts < 67.5) ~ "NE", #northeast is between 22.5 and 67.5 degrees
(LM_aspect_raster_15_data_pts >= 67.5 & LM_aspect_raster_15_data_pts < 112.5) ~ "E", #east is between 67.5 and 112.5 degrees
(LM_aspect_raster_15_data_pts >= 112.5 & LM_aspect_raster_15_data_pts < 157.5) ~ "SE", #southeast is between 122.5 and 157.5
(LM_aspect_raster_15_data_pts >= 157.5 & LM_aspect_raster_15_data_pts < 202.5) ~ "S", #south is between 157.5 and 202.5
(LM_aspect_raster_15_data_pts >= 202.5 & LM_aspect_raster_15_data_pts < 247.5) ~ "SW", #southwest is between 202.5 and 246.5
(LM_aspect_raster_15_data_pts >= 247.5 & LM_aspect_raster_15_data_pts < 292.5) ~ "W", #west is between 247.5 and 292.5 degrees
(LM_aspect_raster_15_data_pts >= 292.5 & LM_aspect_raster_15_data_pts < 337.5) ~ "NW")) #northwest is between 292.5 and 337.5 degrees
# the directions are by a range of 90 degrees
LM_fixed_field_data_processed_source_terrain <- LM_fixed_field_data_processed_source_terrain %>%
mutate(LM_aspect_raster_15_data_pts_4_categorical = case_when((LM_aspect_raster_15_data_pts >= 0 & LM_aspect_raster_15_data_pts < 45) ~ "N",  #north is between 315 and 22.5
(LM_aspect_raster_15_data_pts >= 315 & LM_aspect_raster_15_data_pts < 359.999999999999999) ~ "N",
(LM_aspect_raster_15_data_pts >= 22.5 & LM_aspect_raster_15_data_pts < 135) ~ "E", #northeast is between 22.5 and 135  degrees
(LM_aspect_raster_15_data_pts >= 135 & LM_aspect_raster_15_data_pts < 225) ~ "S", #south is between 135 and 225 degrees
(LM_aspect_raster_15_data_pts >= 225 & LM_aspect_raster_15_data_pts < 315) ~ "W")) #west is between 225 and 315
# the directions are by a range of 45 degrees
LC_fixed_field_data_processed_source_terrain <- LC_fixed_field_data_processed_source_terrain %>%
mutate(LC_aspect_raster_15_data_pts_8_categorical = case_when((LC_aspect_raster_15_data_pts > 0 & LC_aspect_raster_15_data_pts < 22.5) ~ "N",  #north is between 337.5 and 22.5
(LC_aspect_raster_15_data_pts >= 337.5 & LC_aspect_raster_15_data_pts < 359.999999999999999) ~ "N",
(LC_aspect_raster_15_data_pts >= 22.5 & LC_aspect_raster_15_data_pts < 67.5) ~ "NE", #northeast is between 22.5 and 67.5 degrees
(LC_aspect_raster_15_data_pts >= 67.5 & LC_aspect_raster_15_data_pts < 112.5) ~ "E", #east is between 67.5 and 112.5 degrees
(LC_aspect_raster_15_data_pts >= 112.5 & LC_aspect_raster_15_data_pts < 157.5) ~ "SE", #southeast is between 122.5 and 157.5
(LC_aspect_raster_15_data_pts >= 157.5 & LC_aspect_raster_15_data_pts < 202.5) ~ "S", #south is between 157.5 and 202.5
(LC_aspect_raster_15_data_pts >= 202.5 & LC_aspect_raster_15_data_pts < 247.5) ~ "SW", #southwest is between 202.5 and 246.5
(LC_aspect_raster_15_data_pts >= 247.5 & LC_aspect_raster_15_data_pts < 292.5) ~ "W", #west is between 247.5 and 292.5 degrees
(LC_aspect_raster_15_data_pts >= 292.5 & LC_aspect_raster_15_data_pts < 337.5) ~ "NW")) #northwest is between 292.5 and 337.5 degrees
# the directions are by a range of 90 degrees
LC_fixed_field_data_processed_source_terrain <- LC_fixed_field_data_processed_source_terrain %>%
mutate(LC_aspect_raster_15_data_pts_4_categorical = case_when((LC_aspect_raster_15_data_pts >= 0 & LC_aspect_raster_15_data_pts < 45) ~ "N",  #north is between 315 and 22.5
(LC_aspect_raster_15_data_pts >= 315 & LC_aspect_raster_15_data_pts < 359.999999999999999) ~ "N",
(LC_aspect_raster_15_data_pts >= 45 & LC_aspect_raster_15_data_pts < 135) ~ "E", #northeast is between 22.5 and 135  degrees
(LC_aspect_raster_15_data_pts >= 135 & LC_aspect_raster_15_data_pts < 225) ~ "S", #south is between 135 and 225 degrees
(LC_aspect_raster_15_data_pts >= 225 & LC_aspect_raster_15_data_pts < 315) ~ "W")) #west is between 225 and 315
# the directions are by a range of 45 degrees
SD_fixed_field_data_processed_source_terrain <- SD_fixed_field_data_processed_source_terrain %>%
mutate(SD_aspect_raster_15_data_pts_8_categorical = case_when((SD_aspect_raster_15_data_pts > 0 & SD_aspect_raster_15_data_pts < 22.5) ~ "N",  #north is between 337.5 and 22.5
(SD_aspect_raster_15_data_pts >= 337.5 & SD_aspect_raster_15_data_pts < 359.999999999999999) ~ "N",
(SD_aspect_raster_15_data_pts >= 22.5 & SD_aspect_raster_15_data_pts < 67.5) ~ "NE", #northeast is between 22.5 and 67.5 degrees
(SD_aspect_raster_15_data_pts >= 67.5 & SD_aspect_raster_15_data_pts < 112.5) ~ "E", #east is between 67.5 and 112.5 degrees
(SD_aspect_raster_15_data_pts >= 112.5 & SD_aspect_raster_15_data_pts < 157.5) ~ "SE", #southeast is between 122.5 and 157.5
(SD_aspect_raster_15_data_pts >= 157.5 & SD_aspect_raster_15_data_pts < 202.5) ~ "S", #south is between 157.5 and 202.5
(SD_aspect_raster_15_data_pts >= 202.5 & SD_aspect_raster_15_data_pts < 247.5) ~ "SW", #southwest is between 202.5 and 246.5
(SD_aspect_raster_15_data_pts >= 247.5 & SD_aspect_raster_15_data_pts < 292.5) ~ "W", #west is between 247.5 and 292.5 degrees
(SD_aspect_raster_15_data_pts >= 292.5 & SD_aspect_raster_15_data_pts < 337.5) ~ "NW")) #northwest is between 292.5 and 337.5 degrees
# the directions are by a range of 90 degrees
SD_fixed_field_data_processed_source_terrain <- SD_fixed_field_data_processed_source_terrain %>%
mutate(SD_aspect_raster_15_data_pts_4_categorical = case_when((SD_aspect_raster_15_data_pts >= 0 & SD_aspect_raster_15_data_pts < 45) ~ "N",  #north is between 315 and 22.5
(SD_aspect_raster_15_data_pts >= 315 & SD_aspect_raster_15_data_pts < 359.999999999999999) ~ "N",
(SD_aspect_raster_15_data_pts >= 45 & SD_aspect_raster_15_data_pts < 135) ~ "E", #northeast is between 22.5 and 135  degrees
(SD_aspect_raster_15_data_pts >= 135 & SD_aspect_raster_15_data_pts < 225) ~ "S", #south is between 135 and 225 degrees
(SD_aspect_raster_15_data_pts >= 225 & SD_aspect_raster_15_data_pts < 315) ~ "W")) #west is between 225 and 315
#LM
LM_fixed_field_data_processed_source_terrain_dist <- cbind(LM_fixed_field_data_processed_source_terrain, LM_fixed_field_data_processed_source_distance)
#LC
LC_fixed_field_data_processed_source_terrain_dist <- cbind(LC_fixed_field_data_processed_source_terrain, LC_fixed_field_data_processed_source_distance)
#generating a distance to river raster with the distances of each cell in the buffer raster from the river edge points, whereby the river raster cells are set to a distance of 0 m
river_buffer_LM_point_raster[is.na(river_buffer_LM_point_raster[])] <- 0  #making sure the cell that are not the river buffer linestring raster have a 0 value
dist_near_river_buffer_LM <- dist_to_nearest(river_buffer_LM_point_raster, river_LM_trans_points, progress = T) #creating a raster of the distances of each cell in the buffer raster to the linestring object of the river polygon, this can take a while to run
plot(dist_near_river_buffer_LM) #plotting the distance to river raster
