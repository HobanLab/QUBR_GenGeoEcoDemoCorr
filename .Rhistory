MC.SD.dbh.ag <- moran.mc(SD_fixed_field_data_processed$DBH_ag, lw.SD, nsim = 999)
MC.SD.dbh.ag
#plot of simulated Moran's I values against our value
plot(MC.SD.dbh.ag, main="", las=1, xlab = "DBH")
MC.SD.dbh.ag$p.value #extracting the pvalue
#using the weighted neighbors to simulate size values
MC_local.SD.dbh.ag <- localmoran_perm(SD_fixed_field_data_processed$DBH_ag, lw.SD, nsim = 9999, alternative = "greater")
MC_local.SD.dbh.ag.df <- as.data.frame(MC_local.SD.dbh.ag)
##Ii is local moran statistic, E.Ii is expected local moran statistic, Vari.Ii is variance of local moran statistic, Z. Ii standard deviation of local moran statistic
#plotting the local moran's I values vs. the expected
ggplot(data=MC_local.SD.dbh.ag.df)+
geom_point(aes(x=Ii, y=E.Ii), size = 0.01)+
xlab("Local Moran's I Statistic for DBH")+
ylab("Expected Moran's I Statistic for DBH")+
theme_gray()
#caSDulating the p-values for each individual tree Moran's I, observed vs. expected
SD_fixed_field_data_processed$p.dbh.ag <- MC_local.SD.dbh.ag.df$`Pr(folded) Sim`
#adjusting the p-vlaues to take into account multiple tests
SD_fixed_field_data_processed$p.dbh.ag.adjusted <- p.adjust(SD_fixed_field_data_processed$p.dbh.ag,
method = "fdr", n=length(SD_fixed_field_data_processed$p.dbh.ag))
#representing the p-values of the points on a map
SD_box <- st_bbox(river_SD_trans)
SD_fixed_field_data_processed <- SD_fixed_field_data_processed %>%
mutate(pval_sig = p.dbh.ag.adjusted <= .05)
ggplot() +
geom_sf(data =river_SD_trans) +
geom_sf(data =SD_fixed_field_data_processed, aes(color = p.dbh.ag.adjusted)) +
geom_sf(data = SD_fixed_field_data_processed %>% filter(pval_sig == T), color = "red") +
coord_sf(xlim = c(SD_box[1], SD_box[3]), ylim = c(SD_box[2], SD_box[4]))+
labs(color = "Adjusted P Value for CA")
#computing the Global Moran's I statistic
Moran.I(SD_fixed_field_data_processed$Canopy_area, SD.tree.dist.inv)
#creating lags, which computes the average neighboring short canopy axis for each tree
SD_fixed_field_data_processed$lag.canopy.area <- lag.listw(lw.SD, SD_fixed_field_data_processed$Canopy_area)
# Create a regression model
M.SD.canopy.area <- lm(lag.canopy.area ~ Canopy_area, SD_fixed_field_data_processed)
# Plot the lagged variable vs. the variable
ggplot(data=SD_fixed_field_data_processed, aes(x=Canopy_area, y=lag.canopy.area))+
geom_point()+
geom_smooth(method = lm, col="blue")+
xlab("Canopy Area")+
ylab("Lagged Canopy Area")
#computing the Moran's I statistic
moran(SD_fixed_field_data_processed$Canopy_area, listw = lw.SD, n = length(nb.SD), S0 = Szero(lw.SD))
#assessing statistical significance with a Monte-Carlo simulation
MC.SD.canopy.area <- moran.mc(SD_fixed_field_data_processed$Canopy_area, lw.SD, nsim = 999)
MC.SD.canopy.area
#plot of simulated Moran's I values against our value
plot(MC.SD.canopy.area, main="", las=1, xlab = "Canopy Area")
MC.SD.canopy.area$p.value #extracting the pvalue
library(tidyverse)
library(moments) # for calculating the moments of each variable
library(sf) # for plotting spatial objects
library(smatr)
library(ggpmisc)
library(PMCMRplus) # for Dunn test
library(geomtextpath) # for PCA graphing
library(spatstat) # to run the nndist function
library(spdep) # to use morna's I functions like lag.listw
library(ape) # for computing the Moran's I stat
library(raster) #to use point distance
library(igraph) #to use create the overlaps between the buffers, find adjacencies, and find largest number of cliques
fixed_field_data_processed <- read.csv("./analyses/fixed_field_data_processed.csv") #imports the csv created from analyzing_morpho_data_cleaned.R
#transforming the data into shapefiles with either WGS84
fixed_field_data_processed_sf <- st_as_sf(fixed_field_data_processed,
coords = c("long", "lat"), crs = 4326)
#transforming the shapefile of trees from WGS84 into equal area projection UTM 12N
fixed_field_data_processed_sf_transformed <- st_transform(fixed_field_data_processed_sf, crs = 26912) # this in UTM 12 N an equal area projection
LM_fixed_field_data_processed_sf <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "LM") %>%
st_as_sfc()
LC_fixed_field_data_processed_sf <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "LC") %>%
st_as_sfc()
SD_fixed_field_data_processed_sf <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "SD") %>%
st_as_sfc()
#create dataframe with X and Y UTM coordinates
fixed_field_data_processed_sf_trans_coords <- st_coordinates(fixed_field_data_processed_sf_transformed) #creates a dataframe with seperate x and y columns from the UTM 12N transformation
fixed_field_data_processed_sf_trans_coordinates <- fixed_field_data_processed_sf_transformed %>%
cbind(fixed_field_data_processed_sf_trans_coords) #combines the x and y coordinate data frame with the transformed sf dataframe
#add average nearest neighbor for each individual column
fixed_field_data_processed_NN_UTM <- fixed_field_data_processed_sf_trans_coordinates %>%  #creates a dataframe with the ANN of the closest 5 individual trees for each individual
mutate(dist1 = nndist(X = X.1, Y= Y, k = 1))%>% #creates column for the distances of each tree to their 1st nearest neighbor
mutate(dist2 = nndist(X = X.1, Y= Y, k = 2)) %>% #creates column for the distances of each tree to their 2nd nearest neighbor
mutate(dist3 = nndist(X = X.1, Y= Y, k = 3)) %>% #creates column for the distances of each tree to their 3rd nearest neighbor
mutate(dist4 = nndist(X = X.1, Y= Y, k = 4)) %>% #creates column for the distances of each tree to their 4th nearest neighbor
mutate(dist5 = nndist(X = X.1, Y= Y, k = 5)) %>% #creates column for the distances of each tree to their 5th nearest neighbor
rowwise()%>% #so that in the next part we take the averages across rows
mutate(ANN = mean(c(dist1, dist2, dist3, dist4, dist5))) # %>% #creates a column of the average distances (1-5) of each individual
LM_fixed_field_data_processed <- fixed_field_data_processed_NN_UTM %>%
filter(Locality == "LM")
LC_fixed_field_data_processed <- fixed_field_data_processed_NN_UTM %>%
filter(Locality == "LC")
SD_fixed_field_data_processed <- fixed_field_data_processed_NN_UTM %>%
filter(Locality == "SD")
LM_tree_grid <- st_make_grid(cellsize = (((40*mean(LM_fixed_field_data_processed$DBH_ag))*2)*2))
LM_tree_grid <- st_make_grid(LM_fixed_field_data_processed_sf, cellsize = (((40*mean(LM_fixed_field_data_processed$DBH_ag))*2)*2))
plot(LM_tree_grid)
ggplot()+
geom_sf(data=LM_fixed_field_data_processed_sf)+
geom_sf(data=LM_tree_grid)
ggplot()+
geom_sf(data=LM_tree_grid)+
geom_sf(data=LM_fixed_field_data_processed_sf)
LM_tree_grid
st_within(LM_fixed_field_data_processed_sf, LM_tree_grid)
LM_tree_grid_points_within <- st_within(LM_fixed_field_data_processed_sf, LM_tree_grid)
LM_tree_grid_points_within
View(LM_tree_grid_points_within)
plot(LM_tree_grid_points_within)
plot(st_as_sf(LM_tree_grid_points_within))
length(LM_tree_grid)
LM_tree_grid_points_within <- st_within(LM_fixed_field_data_processed_sf, LM_tree_grid[1])
selected_tree <- sample(LM_tree_grid_points_within, replace = F)
selected_tree
View(selected_tree)
LM_tree_grid_points_within <- st_within(LM_fixed_field_data_processed_sf, LM_tree_grid[1])
selected_tree <- sample(LM_tree_grid_points_within, size = 1, replace = F)
View(selected_tree)
LM_tree_grid_points_within <- st_within(LM_fixed_field_data_processed_sf, LM_tree_grid[1])
selected_tree <- sample(LM_tree_grid_points_within, size = 1, replace = F)
View(selected_tree)
LM_tree_grid[1]
LM_tree_grid_points_within <- st_within(LM_fixed_field_data_processed_sf, LM_tree_grid[2])
selected_tree <- sample(LM_tree_grid_points_within, size = 1, replace = F)
View(selected_tree)
LM_tree_grid_points_within <- st_within(LM_fixed_field_data_processed_sf, LM_tree_grid[30])
selected_tree <- sample(LM_tree_grid_points_within, size = 1, replace = F)
View(selected_tree)
LM_tree_grid_points_within <- st_within(LM_fixed_field_data_processed_sf, LM_tree_grid[15])
selected_tree <- sample(LM_tree_grid_points_within, size = 1, replace = F)
View(selected_tree)
LM_tree_grid_points_within <- st_within(LM_fixed_field_data_processed_sf, LM_tree_grid[14])
selected_tree <- sample(LM_tree_grid_points_within, size = 1, replace = F)
View(selected_tree)
LM_tree_grid_points_within <- st_within(LM_fixed_field_data_processed_sf, LM_tree_grid[13])
selected_tree <- sample(LM_tree_grid_points_within, size = 1, replace = F)
View(selected_tree)
length(LM_tree_grid_points_within)
selected_tree <- sample(LM_tree_grid_points_within, n = length(LM_tree_grid_points_within), size = 1, replace = F)
LM_tree_grid
LM_tree_grid_points_within
View(LM_tree_grid_points_within)
LM_tree_grid_points_within <- st_within(LM_tree_grid[1], LM_fixed_field_data_processed_sf)
View(LM_tree_grid_points_within)
LM_tree_grid_points_within <- st_within(LM_tree_grid, LM_fixed_field_data_processed_sf)
View(LM_tree_grid_points_within)
LM_tree_grid_points_within <- st_within(LM_tree_grid, LM_fixed_field_data_processed_sf, sparse = T)
View(LM_tree_grid_points_within)
LM_tree_grid_points_within <- st_within(LM_tree_grid, LM_fixed_field_data_processed_sf, sparse = F)
LM_tree_grid_points_within <- st_within(LM_tree_grid[1], LM_fixed_field_data_processed_sf, sparse = F)
View(LM_tree_grid_points_within)
LM_tree_grid_points_within <- st_within(LM_tree_grid[15], LM_fixed_field_data_processed_sf, sparse = F)
View(LM_tree_grid_points_within)
LM_tree_grid_points_within <- st_within(LM_fixed_field_data_processed_sf, LM_tree_grid[15], sparse = F)
View(LM_tree_grid_points_within)
LM_tree_grid_points_within <- st_within(LM_fixed_field_data_processed_sf, LM_tree_grid[25], sparse = F)
View(LM_tree_grid_points_within)
LM_tree_grid_points_within <- st_within(LM_fixed_field_data_processed_sf, LM_tree_grid[35], sparse = F)
View(LM_tree_grid_points_within)
LM_tree_grid_points_within <- st_within(LM_fixed_field_data_processed_sf, LM_tree_grid[17], sparse = F)
View(LM_tree_grid_points_within)
LM_tree_grid_points_within <- st_within(LM_fixed_field_data_processed_sf, LM_tree_grid[9], sparse = F)
View(LM_tree_grid_points_within)
LM_tree_grid_points_within <- st_within(LM_fixed_field_data_processed_sf, LM_tree_grid[6], sparse = F)
View(LM_tree_grid_points_within)
LM_tree_grid_points_within <- st_within(LM_fixed_field_data_processed_sf, LM_tree_grid[163], sparse = F)
View(LM_tree_grid_points_within)
library(tidyverse)
library(moments) # for calculating the moments of each variable
library(sf) # for plotting spatial objects
library(smatr)
library(ggpmisc)
library(PMCMRplus) # for Dunn test
library(geomtextpath) # for PCA graphing
library(spatstat) # to run the nndist function
library(raster)
library(tidyverse)
library(moments) # for calculating the moments of each variable
library(sf) # for plotting spatial objects
library(smatr)
library(ggpmisc)
library(PMCMRplus) # for Dunn test
library(geomtextpath) # for PCA graphing
library(spatstat) # to run the nndist function
library(spdep) # to use morna's I functions like lag.listw
library(ape) # for computing the Moran's I stat
library(raster) #to use point distance
library(nlme) # linear mixed effect models
library(MuMIn) #to be able to use model.sel for fitting linear models with spatial autocorrelation
`%notin%` <- Negate(`%in%`) # Make a function that is the opposite of the %in% function
fixed_field_data_processed <- read.csv("./analyses/fixed_field_data_processed.csv") #imports the csv created from analyzing_morpho_data_cleaned.R
#transforming the data into shapefiles with either WGS84
fixed_field_data_processed_sf <- st_as_sf(fixed_field_data_processed,
coords = c("long", "lat"), crs = 4326)
#transforming the shapefile of trees from WGS84 into equal area projection UTM 12N
fixed_field_data_processed_sf_transformed <- st_transform(fixed_field_data_processed_sf, crs = 26912) # this in UTM 12 N an equal area projection
LM_fixed_field_data_processed_sf <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "LM") %>%
st_as_sf()
LC_fixed_field_data_processed_sf <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "LC") %>%
st_as_sf()
SD_fixed_field_data_processed_sf <- fixed_field_data_processed_sf_transformed %>%
filter(Locality == "SD") %>%
st_as_sf()
#create dataframe with X and Y UTM coordinates
fixed_field_data_processed_sf_trans_coords <- st_coordinates(fixed_field_data_processed_sf_transformed) #creates a dataframe with seperate x and y columns from the UTM 12N transformation
fixed_field_data_processed_sf_trans_coordinates <- fixed_field_data_processed_sf_transformed %>%
cbind(fixed_field_data_processed_sf_trans_coords) #combines the x and y coordinate data frame with the transformed sf dataframe
#add average nearest neighbor for each individual column
fixed_field_data_processed_NN_UTM <- fixed_field_data_processed_sf_trans_coordinates %>%  #creates a dataframe with the ANN of the closest 5 individual trees for each individual
mutate(dist1 = nndist(X = X.1, Y= Y, k = 1))%>% #creates column for the distances of each tree to their 1st nearest neighbor
mutate(dist2 = nndist(X = X.1, Y= Y, k = 2)) %>% #creates column for the distances of each tree to their 2nd nearest neighbor
mutate(dist3 = nndist(X = X.1, Y= Y, k = 3)) %>% #creates column for the distances of each tree to their 3rd nearest neighbor
mutate(dist4 = nndist(X = X.1, Y= Y, k = 4)) %>% #creates column for the distances of each tree to their 4th nearest neighbor
mutate(dist5 = nndist(X = X.1, Y= Y, k = 5)) %>% #creates column for the distances of each tree to their 5th nearest neighbor
rowwise()%>% #so that in the next part we take the averages across rows
mutate(ANN = mean(c(dist1, dist2, dist3, dist4, dist5))) # %>% #creates a column of the average distances (1-5) of each individual
LM_fixed_field_data_processed <- fixed_field_data_processed_NN_UTM %>%
filter(Locality == "LM")
LC_fixed_field_data_processed <- fixed_field_data_processed_NN_UTM %>%
filter(Locality == "LC")
SD_fixed_field_data_processed <- fixed_field_data_processed_NN_UTM %>%
filter(Locality == "SD")
#upload river shapefile and filter out polygons for each population
rivers <- st_read("./data/QUBR Rivers and Trees.kml", "Rivers", crs = 4326)
rivers_2d <- st_zm(rivers, drop = T) #we had a z dimension with max and min, so we got rid of it because it was giving us weird errors and disrupting later statistics
river_LC <- filter(rivers_2d, Name == "River LC")
river_SD <- filter(rivers_2d, Name == "River SD")
river_LM <- filter(rivers_2d, Name == "LM River")
#changing the coordinate reference system of the river polygons to be equal area projection (UTM 12N), uses meters as distance measurement
river_LM_trans <- st_transform(river_LM, crs = 26912)
river_LC_trans <- st_transform(river_LC, crs = 26912)
river_SD_trans <- st_transform(river_SD, crs = 26912)
#histograms
ggplot(fixed_field_data_processed_NN_UTM) + # Generate the base plot
geom_histogram(aes(x = Canopy_short))+
xlab("Short Canopy Axis")+
ylab("Frequency")
ggplot(fixed_field_data_processed_NN_UTM) + # Generate the base plot
geom_histogram(aes(x = Canopy_long))+
xlab("Long Canopy Axis")+
ylab("Frequency")
ggplot(fixed_field_data_processed_NN_UTM) + # Generate the base plot
geom_histogram(aes(x = Crown_spread))+
xlab("Canopy Spread")+
ylab("Frequency")
#creating a matrix of distances between trees where the higher values are at the top
tree.dist <- as.matrix(dist(cbind(fixed_field_data_processed_NN_UTM$X.1,
fixed_field_data_processed_NN_UTM$Y))) #making a matrix of the distances between trees
tree.dist.inv <- 1/tree.dist #makes it so closer trees are higher in the matrix
diag(tree.dist.inv) <- 0 #makes so trees have a 0 distance with themselves
tree.dist.inv[is.infinite(tree.dist.inv)] <- 0 # solves problem presented by duplicated GPS points for trees that were very close to one another
g <- graph_from_adjacency_matrix(tree.dist.inv)
plot(g)
library(igraph)
tree.dist
g <- graph_from_adjacency_matrix(tree.dist.inv)
plot(g)
#creating x and y columns of the UTM 12N
LM_fixed_field_data_all_focal_trees$X.1 <- st_coordinates(LM_fixed_field_data_all_focal_trees)[,1]
LM_fixed_field_data_all_focal_trees$Y <- st_coordinates(LM_fixed_field_data_all_focal_trees)[,2]
#model without spatial autocorrelation
LM_glm_focal_SCA <- lme(Canopy_short ~ sum_SCA_over_distance,
data = LM_fixed_field_data_all_focal_trees,
random = ~1 | X.1, Y, #| side, # random effect of neighborhood area (e.g., north side)
method = "ML") #ML is maximum log-likelihood
#creating a grid over the points with a 10 m edge buffer
LM_box <- st_bbox(LM_fixed_field_data_processed_sf)
#creating a cropped bbox
LM_box_sf <- LM_box %>% #turning the bbox into polygon
st_as_sfc()
LM_box_spatial <- as(LM_box_sf, 'Spatial') #turning the polygon into a spatial polygon to be able to use raster::crop
LM_box_spatial_cropped <- raster::crop(LM_box_spatial, extent((LM_box[1]+20), (LM_box[3]-20), (LM_box[2]+20), (LM_box[4]-20))) #cropping the xmin, xmax, ymin, and ymax by 20 m inside
LM_box_sf_cropped <-  LM_box_spatial_cropped %>% #turning the spatial polygon into a polygon
st_as_sfc()
#cropping the points by the cropped box
LM_fixed_field_data_processed_sf_cropped<- st_crop(LM_fixed_field_data_processed_sf, LM_box_sf_cropped)
#Creating a grid over the cropped tree points
LM_tree_grid_cropped <- st_make_grid(LM_fixed_field_data_processed_sf_cropped, cellsize = (((40*mean(LM_fixed_field_data_processed$DBH_ag))*2)*2))
#plotting the original box, cropped box, original tree points, and cropped tree points
ggplot()+
geom_sf(data=LM_box_sf)+ #old box
geom_sf(data=LM_box_sf_cropped)+ #cropped box
geom_sf(data=LM_fixed_field_data_processed_sf)+ #original points
geom_sf(data=LM_fixed_field_data_processed_sf_cropped, color = "red") #old points
#selecting a focal point from each grid cell with trees within them
LM_list_grids_and_points <- st_contains(LM_tree_grid_cropped, LM_fixed_field_data_processed_sf, sparse =T) #make sure row number in the data frame of grid cells corresponds to the order of what is in the points dataframe within st_contains
set.seed(25) #setting the seed
LM_list_grids_and_focal_trees <- lapply(LM_list_grids_and_points, function(cell){ #iterates over the list of each grid cell with what row of points is within that grid cell made by st_contains
if(length(cell) > 1){ #for each grid cell, if there is more than one tree in each cell
focal_pt <- sample(cell, size = 1, replace = F) #randomly select a row from the row of trees within that polygon
}
else if(length(cell) == 1) { #for each grid cell, if there is exactly one tree in each cell
focal_pt <- cell #set the focal point to be the tree that is within the cell
} else { # if there are no trees
focal_pt <- NA # set the focal tree point to be NA
}
return(focal_pt)
})
#creating a dataframe of all of the focal trees with their row number in the overall tree point dataframe and in which grid cell they are in
LM_list_grids_and_focal_trees_df <- as.data.frame(unlist(LM_list_grids_and_focal_trees)) #unlists the list of grid cells and what focal trees were within them and turns it into a dataframe
colnames(LM_list_grids_and_focal_trees_df) <- c("tree_row_num") #changes the column name
LM_list_grids_and_focal_trees_fixed <- LM_list_grids_and_focal_trees_df %>% #filters out grid cells that do not have trees within them
mutate(cell_num = row_number()) %>% #assigns the cell number to each row/tree
filter(!is.na(tree_row_num)) #filters out the grids without trees inside of them
#filtering out point data to be just the focal points
LM_fixed_field_data_processed_focal <- LM_fixed_field_data_processed_sf %>%
filter(X %in% LM_list_grids_and_focal_trees_fixed$tree_row_num)  #creating a dataframe with row numbers that match between the overall tree points dataframe and the focal tree points dataframe
#creating the buffer around the focal points
LM_focal_tree_buffers <-st_buffer(LM_fixed_field_data_processed_focal$geometry, 40*mean(LM_fixed_field_data_processed_focal$DBH_ag))
#graphing the selected focal trees, the buffers, the grid
ggplot()+
geom_sf(data = LM_tree_grid_cropped)+
geom_sf(data=LM_focal_tree_buffers, color = "blue") +
geom_sf(data= LM_fixed_field_data_processed_focal, aes(color = X))
#create a tibble with the the number of trees within the buffers that contain trees
LM_tree_buffers_points_within_0 <- st_contains(LM_focal_tree_buffers, LM_fixed_field_data_processed_sf, sparse =F) %>%
rowSums() %>% #find how many trees are within each grid
as_tibble() %>%
mutate(row = row_number()) %>% #assign a new column with row numbers
filter(value > 0) #filter out any buffers with only the focal tree
#filter out the buffers to only have the buffers that contain trees
LM_tree_buffer_inside_0 <- LM_focal_tree_buffers %>%
st_as_sf() %>%
mutate(row = row_number()) %>% #create a column with row numbers
filter(row %in% LM_tree_buffers_points_within_0$row) #only keep polygons that match the row number of the grid cells with trees within them
#Checking that row number in focal dataset is the same as the buffer dataset
LM_fixed_field_data_processed_focal_row <- LM_fixed_field_data_processed_focal %>%
as.data.frame() %>%
mutate(row = as.factor(row_number())) %>%
st_as_sf()
LM_tree_buffer_inside_0 <- mutate(LM_tree_buffer_inside_0, row = as.factor(row)) #making sure the buffers have the same row number as the focal data
#plotting the grid, the buffers with and without neighbors, and the focal trees, to see if the row numbers for the buffers match the row numbers for the focal tree points
ggplot()+
geom_sf(data = LM_tree_grid_cropped) +
geom_sf(data=LM_tree_buffer_inside_0, aes(color = row))+
geom_sf(data=LM_fixed_field_data_processed_focal_row, aes(color = row))
#create a tibble with the the number of trees within the buffers that contain trees
LM_tree_buffers_points_within <- st_contains(LM_focal_tree_buffers, LM_fixed_field_data_processed_sf, sparse =F) %>%
rowSums() %>% #find how many trees are within each grid
as_tibble() %>%
mutate(row = row_number()) %>% #assign a new column with row numbers
filter(value > 1) #filter out any buffers with only the focal tree
#filter out the buffers to only have the buffers that contain trees
LM_tree_buffer_inside <- LM_focal_tree_buffers %>%
st_as_sf() %>%
mutate(row = row_number()) %>% #create a column with row numbers
filter(row %in% LM_tree_buffers_points_within$row) #only keep buffers that match the row number of the buffers cells with trees within them
View(LM_tree_buffer_inside)
#plotting the points with buffers with neighbors in it and without neighbors, "isolated focal trees"
ggplot()+
geom_sf(data = LM_focal_tree_buffers)+
geom_sf(data = LM_fixed_field_data_processed_sf)+
geom_sf(data = LM_fixed_field_data_processed_focal, color = 'blue')
#Checking that row number in focal dataset is the same as the buffer dataset
LM_fixed_field_data_processed_focal_row <- LM_fixed_field_data_processed_focal %>%
as.data.frame() %>%
mutate(row = as.factor(row_number())) %>%
st_as_sf()
LM_tree_buffer_inside <- mutate(LM_tree_buffer_inside, row = as.factor(row)) #making sure the buffers have the same row number as the isoalted focal data
#plotting the grid, the buffers with and without neighbors, and the focal trees, to see if the row numbers for the buffers match the row numbers for the focal tree points
ggplot()+
geom_sf(data = LM_tree_grid_cropped) +
geom_sf(data=LM_tree_buffer_inside, aes(color = row))+
geom_sf(data=LM_fixed_field_data_processed_focal_row, aes(color = row))
LM_fixed_field_data_all_focal_trees <- tibble()#creating the empty tibble
#calculating the distances of each tree within the buffer to the focal tree and the competition metric values
for (i in 1:nrow(LM_fixed_field_data_processed_focal)){ #for the length of the buffers with trees inside of them #LM_fixed_field_data_processed_focal_row
row_num = i
LM_tree_buffer_inside_df <- as.data.frame(LM_tree_buffer_inside_0) #uses data of non-isolated and isolated focal trees
LM_tree_buffer_inside_df_i <- LM_tree_buffer_inside_df %>%
filter(row == row_num) #isolate a row of the buffer dataframe
LM_tree_buffer_inside_sf_i <- st_as_sf(LM_tree_buffer_inside_df_i) #set the row as a simple feature
all_pts_buffer <- st_contains(LM_tree_buffer_inside_sf_i, LM_fixed_field_data_processed_sf, sparse = F) #assign true or falses to the trees based on whether they are within that polygon
possible_pts_buffer <- which(all_pts_buffer == T) #keep only the rows of trees that are within the polygon
LM_fixed_field_data_processed_trees <- LM_fixed_field_data_processed %>%
filter(X %in% possible_pts_buffer) #filtering to the data to only be the trees within the buffer
correct_focal <- LM_list_grids_and_focal_trees_fixed[i,]
LM_fixed_field_data_focal_tree <- LM_fixed_field_data_processed_focal %>%
filter(X %in% correct_focal$tree_row_num) #create a dataframe with only the focal tree
LM_fixed_field_data_neighbor_trees <- LM_fixed_field_data_processed_trees %>%
filter(X %notin% LM_fixed_field_data_focal_tree$X)
if(nrow(LM_fixed_field_data_neighbor_trees) == 0){
sum_SCA_over_distance = 0 #create a new variable for short canopy axis over distance to focal tree set to 0
sum_LCA_over_distance = 0 #create a new variable for long canopy axis over distance to focal tree set to 0
sum_CA_over_distance = 0 #create a new variable for canopy area over distance to focal tree set to 0
sum_CS_over_distance = 0 #create a new variable for crown spread over distance to focal tree set to 0
sum_DBH_over_distance = 0 #create a new variable for DBH over distance to focal tree set to 0
} else{
LM_fixed_field_data_neighbor_trees <-  LM_fixed_field_data_neighbor_trees %>% #create a dataframe with only the neighbors of the focal tree
mutate(focal_distance = as.numeric(st_distance(geometry,  LM_fixed_field_data_focal_tree$geometry, by_element = T))) %>% #calculate the distance between the focal tree and each tree that neighbors it
mutate(focal_distance = case_when(focal_distance == 0 ~ 0.0000016,
focal_distance != 0 ~ focal_distance)) %>% #replace values of 0 (if the coords are the same for multiple trees) with a value an order of magnitude smaller than the smallest distance in our dataset
mutate(SCA_over_distance = Canopy_short/focal_distance) %>% #creating a column with the short canopy axis size value divided by the tree's distance from the focal tree
mutate(LCA_over_distance = Canopy_long/focal_distance) %>%
mutate(CA_over_distance = Canopy_area/focal_distance) %>%
mutate(CS_over_distance = Crown_spread/focal_distance) %>%
mutate(DBH_over_distance = DBH_ag/focal_distance)
sum_SCA_over_distance = 0 #create a new variable for short canopy axis over distance to focal tree set to 0
sum_LCA_over_distance = 0 #create a new variable for long canopy axis over distance to focal tree set to 0
sum_CA_over_distance = 0 #create a new variable for canopy area over distance to focal tree set to 0
sum_CS_over_distance = 0 #create a new variable for crown spread over distance to focal tree set to 0
sum_DBH_over_distance = 0 #create a new variable for DBH over distance to focal tree set to 0
for (y in 1:nrow(LM_fixed_field_data_neighbor_trees)){ #adding the size values of each neighbor to a sum total of the neighbors size values
sum_SCA_over_distance = sum_SCA_over_distance + LM_fixed_field_data_neighbor_trees$SCA_over_distance[y] #summing the SCA of each neighbor
sum_LCA_over_distance = sum_LCA_over_distance + LM_fixed_field_data_neighbor_trees$LCA_over_distance[y] #summing the LCA of each neighbor
sum_CA_over_distance = sum_CA_over_distance + LM_fixed_field_data_neighbor_trees$CA_over_distance[y] #summing the CA of each neighbor
sum_CS_over_distance = sum_CS_over_distance + LM_fixed_field_data_neighbor_trees$CS_over_distance[y] #summing the CS of each neighbor
sum_DBH_over_distance = sum_DBH_over_distance + LM_fixed_field_data_neighbor_trees$DBH_over_distance[y] #summing the DBH of each neighbor
}
}
#creating a tibble with all of the calculated sizes over distances
all_vals_tibble <- tibble(sum_SCA_over_distance, sum_LCA_over_distance, sum_CS_over_distance, sum_CA_over_distance, sum_DBH_over_distance)
LM_fixed_field_data_focal_tree <- cbind(LM_fixed_field_data_focal_tree, all_vals_tibble) #bind the sizes over distances values within each buffer to the focal trees
LM_fixed_field_data_all_focal_trees <- rbind(LM_fixed_field_data_all_focal_trees, LM_fixed_field_data_focal_tree) #add the focal trees with sum of size over distance values to the originally empty tibble
}
#plotting the tree points and their
ggplot()+
geom_sf(data=LM_fixed_field_data_all_focal_trees, aes(color = sum_SCA_over_distance))
#model without spatial autocorrelation
LM_glm_focal_SCA <- lme(Canopy_short ~ sum_SCA_over_distance,
data = LM_fixed_field_data_all_focal_trees,
random = ~1 | X.1, Y, #| side, # random effect of neighborhood area (e.g., north side)
method = "ML") #ML is maximum log-likelihood
#model without spatial autocorrelation
LM_glm_focal_SCA <- lme(Canopy_short ~ sum_SCA_over_distance,
data = LM_fixed_field_data_all_focal_trees,
random = ~1 | X.1 + Y, #| side, # random effect of neighborhood area (e.g., north side)
method = "ML") #ML is maximum log-likelihood
#creating x and y columns of the UTM 12N
LM_fixed_field_data_all_focal_trees$X.1 <- st_coordinates(LM_fixed_field_data_all_focal_trees)[,1]
LM_fixed_field_data_all_focal_trees$Y <- st_coordinates(LM_fixed_field_data_all_focal_trees)[,2]
#model without spatial autocorrelation
LM_glm_focal_SCA <- lme(Canopy_short ~ sum_SCA_over_distance,
data = LM_fixed_field_data_all_focal_trees,
random = ~1 | X.1 + Y, #| side, # random effect of neighborhood area (e.g., north side)
method = "ML") #ML is maximum log-likelihood
LM_fixed_field_data_all_focal_trees$X.1
#model without spatial autocorrelation
LM_glm_focal_SCA <- lme(Canopy_short ~ sum_SCA_over_distance,
data = LM_fixed_field_data_all_focal_trees,
random = ~1 | X.1 + Y, #| side, # random effect of neighborhood area (e.g., north side)
method = "ML") #ML is maximum log-likelihood
#model without spatial autocorrelation
LM_glm_focal_SCA <- lme(Canopy_short ~ sum_SCA_over_distance,
data = LM_fixed_field_data_all_focal_trees,
random = ~1 | X.1 / Y, #| side, # random effect of neighborhood area (e.g., north side)
method = "ML") #ML is maximum log-likelihood
summary(model_lme)
summary(LM_glm_focal_SCA)
#checking we have appropriately removed the spatial autocorrelation
semivario <- variog(LM_glm_focal_SCA, form = ~X.1 + Y, data = LM_fixed_field_data_all_focal_trees, resType = "normalized")
#checking we have appropriately removed the spatial autocorrelation
coordinates <- LM_fixed_field_data_all_focal_trees[, c("X.1", "Y")]
values = resid(LM_glm_focal_SCA)
v1 <- variog(coords = coordinates, data = values)
#checking we have appropriately removed the spatial autocorrelation
library(geoR) # compute variogram
install.packages("geoR")
#checking we have appropriately removed the spatial autocorrelation
library(geoR) # compute variogram
library(geoR
library(geoR)
install.packages("XQuartz")
semivario <- Variogram(LM_glm_focal_SCA, form = ~X.1 / Y, data = LM_fixed_field_data_all_focal_trees, resType = "normalized")
LM_glm_focal_SCA
semivario <- Variogram(LM_glm_focal_SCA, form = ~X.1 + Y, data = LM_fixed_field_data_all_focal_trees, resType = "normalized")
plot(semivario, smooth = TRUE)
semivario <- Variogram(LM_glm_focal_SCA, form = ~X.1 + Y, resType = "normalized")
plot(semivario, smooth = TRUE)
library(gstat)
install.packages("gstat")
var1 <- variogram(LM_glm_focal_SCA$residuals ~ X.1 + y, data = LM_fixed_field_data_all_focal_trees)
var1 <- Variogram(LM_glm_focal_SCA$residuals ~ X.1 + y, data = LM_fixed_field_data_all_focal_trees)
var1 <- gstat::variogram(LM_glm_focal_SCA$residuals ~ X.1 + y, data = LM_fixed_field_data_all_focal_trees)
library(gstat)
var1 <- gstat::variogram(LM_glm_focal_SCA$residuals ~ X.1 + y, data = LM_fixed_field_data_all_focal_trees)
var1 <- gstat::variogram(resids ~ X.1 + y, data = LM_fixed_field_data_all_focal_trees)
semivario <- Variogram(LM_glm_focal_SCA, form = ~X.1 + Y, data = LM_fixed_field_data_all_focal_trees, resType = "normalized")
LM_glm_focal_SCA
LM_gls_focal_SCA_lg
#logged version of generalized linear model
LM_gls_focal_SCA_lg <- gls(log(Canopy_short + 1) ~ log(sum_SCA_over_distance + 1), data = LM_fixed_field_data_all_focal_trees)
#checking we have appropriately removed the spatial autocorrelation
semivario <- Variogram( LM_gls_focal_SCA_lg, form = ~X.1 + Y, resType = "normalized")
plot(semivario, smooth = TRUE)
LM_gls_focal_SCA_lg
semivario <- Variogram(LM_glm_focal_SCA, form = ~Canopy_short | X.1 / Y, data = LM_fixed_field_data_all_focal_trees, resType = "normalized")
Canopy_short
LM_fixed_field_data_all_focal_trees$Canopy_short
#model without spatial autocorrelation
LM_glm_focal_SCA <- lme(Canopy_short ~ sum_SCA_over_distance,
data = LM_fixed_field_data_all_focal_trees,
random = ~1 | X.1 / Y, #| side, # random effect of neighborhood area (e.g., north side)
method = "ML") #ML is maximum log-likelihood
plot(semivario, smooth = TRUE)
semivario <- Variogram(LM_glm_focal_SCA, form = ~Canopy_short | X.1 / Y, data = LM_fixed_field_data_all_focal_trees, resType = "normalized")
semivario <- Variogram(LM_glm_focal_SCA, form = ~Canopy_short | X.1 / Y,
data = LM_fixed_field_data_all_focal_trees, robust = T)
LM_glm_focal_SCA
LM_gls_focal_SCA_lg
LM_glm_focal_SCA
LM_gls_focal_SCA
#unlogged version of generlized linear model
LM_gls_focal_SCA <- gls(Canopy_short ~ sum_SCA_over_distance, data = LM_fixed_field_data_all_focal_trees)
LM_gls_focal_SCA
LM_glm_focal_SCA
library(geoR) # compute variogram
library(geoR)
